import {
  InjectedConnector
} from "./chunk-IUNHXTCB.js";
import {
  assertWindowEthereum
} from "./chunk-BUZHNOWW.js";
import "./chunk-SRIU4GRS.js";
import "./chunk-KJWAWEBE.js";
import "./chunk-QJEVYNFJ.js";
import "./chunk-6Q4I5ZJT.js";
import "./chunk-5KMUDT64.js";
import "./chunk-5WPDP5CU.js";
import "./chunk-BZJISV5H.js";
import "./chunk-JZ6CFHV6.js";
import {
  init_lib7 as init_lib
} from "./chunk-HOAY7CPE.js";
import "./chunk-NPRSAB35.js";
import "./chunk-LUL5GG4I.js";
import "./chunk-RZ55PUNP.js";

// node_modules/.pnpm/@thirdweb-dev+wallets@2.5.39_@ethersproject+abstract-provider@5.8.0_@ethersproject+abst_1aeb6cf3f58449f29485c00b075a9d50/node_modules/@thirdweb-dev/wallets/evm/connectors/imtoken/dist/thirdweb-dev-wallets-evm-connectors-imtoken.browser.esm.js
init_lib();
var ImTokenConnector = class extends InjectedConnector {
  constructor(arg) {
    const defaultOptions = {
      name: "imToken",
      getProvider() {
        function getReady(ethereum) {
          const isImToken = !!ethereum?.isImToken;
          if (!isImToken) {
            return;
          }
          return ethereum;
        }
        if (assertWindowEthereum(globalThis.window)) {
          if (globalThis.window.ethereum?.providers) {
            return globalThis.window.ethereum.providers.find(getReady);
          }
          return getReady(globalThis.window.ethereum);
        }
      }
    };
    const options = {
      ...defaultOptions,
      ...arg.options
    };
    super({
      chains: arg.chains,
      options,
      connectorStorage: arg.connectorStorage
    });
  }
};
export {
  ImTokenConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-imtoken.browser.esm-34D3B37X.js.map
