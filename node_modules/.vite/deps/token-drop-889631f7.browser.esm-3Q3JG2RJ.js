import {
  StandardErc20
} from "./chunk-3WLMA3RH.js";
import "./chunk-I4HYQSP4.js";
import {
  DropClaimConditions
} from "./chunk-54TL2FS6.js";
import {
  ContractPrimarySale
} from "./chunk-V4ANEXDN.js";
import {
  require_fast_deep_equal
} from "./chunk-YXMD7WT5.js";
import "./chunk-SUHZGYFJ.js";
import {
  ContractPlatformFee
} from "./chunk-LBZPWF46.js";
import {
  ContractInterceptor
} from "./chunk-YX55VVUJ.js";
import "./chunk-C6HNAJ4E.js";
import {
  ContractRoles
} from "./chunk-UJRE2TVX.js";
import {
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractMetadata,
  GasCostEstimator
} from "./chunk-P2MMOY6P.js";
import {
  AbiSchema,
  ContractWrapper,
  DropErc20ContractSchema,
  TOKEN_DROP_CONTRACT_ROLES,
  Transaction,
  buildTransactionFunction,
  getRoleHash,
  require_bs58,
  resolveAddress
} from "./chunk-RMBH3OGQ.js";
import {
  require_utils
} from "./chunk-6WUZ7PGF.js";
import "./chunk-HOINEBW7.js";
import "./chunk-5WPDP5CU.js";
import "./chunk-ACRESCLM.js";
import "./chunk-HTYCXNSQ.js";
import "./chunk-BRT6DRIA.js";
import {
  require_bn
} from "./chunk-PN3IOENS.js";
import "./chunk-ABGHX4OY.js";
import "./chunk-BZJISV5H.js";
import "./chunk-JZ6CFHV6.js";
import "./chunk-KEHZJHNP.js";
import "./chunk-BU75GG7A.js";
import "./chunk-3KTND37Y.js";
import "./chunk-JGKCYAOG.js";
import "./chunk-7G5FIZFQ.js";
import "./chunk-7FXQ4IAT.js";
import "./chunk-TBJ2FXKA.js";
import "./chunk-M5YXO2SQ.js";
import {
  init_lib7 as init_lib
} from "./chunk-HOAY7CPE.js";
import {
  lib_exports8 as lib_exports
} from "./chunk-NPRSAB35.js";
import "./chunk-LUL5GG4I.js";
import {
  __toESM
} from "./chunk-RZ55PUNP.js";

// node_modules/.pnpm/@thirdweb-dev+sdk@4.0.99_@types+react-dom@18.3.7_@types+react@18.3.26__@types+react@18._4ecbbc39539d7059b1b8ad321c3f738a/node_modules/@thirdweb-dev/sdk/dist/token-drop-889631f7.browser.esm.js
init_lib();
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var TokenDrop = class _TokenDrop extends StandardErc20 {
  static contractRoles = TOKEN_DROP_CONTRACT_ROLES;
  /**
   * Configure claim conditions
   * @remarks Define who can claim Tokens, when and how many.
   * @example
   * ```javascript
   * const presaleStartTime = new Date();
   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);
   * const claimConditions = [
   *   {
   *     startTime: presaleStartTime, // start the presale now
   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale
   *     price: 0.001, // presale price per token
   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses
   *   },
   *   {
   *     startTime: publicSaleStartTime, // 24h after presale, start public sale
   *     price: 0.008, // public sale price per token
   *   }
   * ]);
   * await contract.claimConditions.set(claimConditions);
   * ```
   */
  /**
   * @internal
   */
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    super(contractWrapper, storage, chainId);
    this.abi = AbiSchema.parse(abi || []);
    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, _TokenDrop.contractRoles);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);
  }
  /** ******************************
   * READ FUNCTIONS
   *******************************/
  /**
   * Get your wallet voting power for the current checkpoints
   *
   * @returns The amount of voting power in tokens
   */
  async getVoteBalance() {
    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());
  }
  async getVoteBalanceOf(account) {
    return await this.erc20.getValue(await this.contractWrapper.read("getVotes", [await resolveAddress(account)]));
  }
  /**
   * Get your voting delegatee address
   *
   * @returns The address of your vote delegatee
   */
  async getDelegation() {
    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());
  }
  /**
   * Get a specific address voting delegatee address
   *
   * @returns The address of your vote delegatee
   */
  async getDelegationOf(account) {
    return await this.contractWrapper.read("delegates", [await resolveAddress(account)]);
  }
  /**
   * Get whether users can transfer tokens from this contract
   */
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.read("hasRole", [getRoleHash("transfer"), lib_exports.AddressZero]);
    return !anyoneCanTransfer;
  }
  /** ******************************
   * WRITE FUNCTIONS
   *******************************/
  /**
   * Claim a certain amount of tokens
   * @remarks See {@link TokenDrop.claimTo}
   * @param amount - the amount of tokens to mint
   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer
   */
  claim = buildTransactionFunction(/* @__PURE__ */ (() => {
    var _this = this;
    return async function(amount) {
      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return _this.claimTo.prepare(await _this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);
    };
  })());
  /**
   * Claim a certain amount of tokens to a specific Wallet
   *
   * @remarks Let the specified wallet claim Tokens.
   *
   * @example
   * ```javascript
   * const address = "{{wallet_address}}"; // address of the wallet you want to claim the NFTs
   * const quantity = 42.69; // how many tokens you want to claim
   *
   * const tx = await contract.claimTo(address, quantity);
   * const receipt = tx.receipt; // the transaction receipt
   * ```
   *
   * @param destinationAddress - Address you want to send the token to
   * @param amount - Quantity of the tokens you want to claim
   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer
   *
   * @returns  The transaction receipt
   */
  claimTo = buildTransactionFunction(/* @__PURE__ */ (() => {
    var _this2 = this;
    return async function(destinationAddress, amount) {
      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      return _this2.erc20.claimTo.prepare(destinationAddress, amount, {
        checkERC20Allowance
      });
    };
  })());
  /**
   * Lets you delegate your voting power to the delegateeAddress
   *
   * @param delegateeAddress - delegatee wallet address
   * @alpha
   */
  delegateTo = buildTransactionFunction(async (delegateeAddress) => {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method: "delegate",
      args: [await resolveAddress(delegateeAddress)]
    });
  });
  /**
   * Burn Tokens
   *
   * @remarks Burn tokens held by the connected wallet
   *
   * @example
   * ```javascript
   * // The amount of this token you want to burn
   * const amount = 1.2;
   *
   * await contract.burnTokens(amount);
   * ```
   */
  burnTokens = buildTransactionFunction(async (amount) => {
    return this.erc20.burn.prepare(amount);
  });
  /**
   * Burn Tokens
   *
   * @remarks Burn tokens held by the specified wallet
   *
   * @example
   * ```javascript
   * // Address of the wallet sending the tokens
   * const holderAddress = "{{wallet_address}}";
   *
   * // The amount of this token you want to burn
   * const amount = 1.2;
   *
   * await contract.burnFrom(holderAddress, amount);
   * ```
   */
  burnFrom = buildTransactionFunction(async (holder, amount) => {
    return this.erc20.burnFrom.prepare(holder, amount);
  });
  /**
   * @internal
   */
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  /**
   * @internal
   */
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
export {
  TokenDrop
};
//# sourceMappingURL=token-drop-889631f7.browser.esm-3Q3JG2RJ.js.map
