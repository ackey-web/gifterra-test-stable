import {
  CommonPlatformFeeSchema,
  FEATURE_PLATFORM_FEE,
  Transaction,
  buildTransactionFunction
} from "./chunk-RMBH3OGQ.js";

// node_modules/.pnpm/@thirdweb-dev+sdk@4.0.99_@types+react-dom@18.3.7_@types+react@18.3.26__@types+react@18._4ecbbc39539d7059b1b8ad321c3f738a/node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-e756e68f.browser.esm.js
var ContractPlatformFee = class {
  featureName = FEATURE_PLATFORM_FEE.name;
  constructor(contractWrapper) {
    this.contractWrapper = contractWrapper;
  }
  /**
   * Get the platform fee recipient and basis points
   *
   * @example
   * ```javascript
   * const feeInfo = await contract.platformFees.get();
   * console.log(feeInfo.platform_fee_recipient);
   * console.log(feeInfo.platform_fee_basis_points);
   * ```
   * @twfeature PlatformFee
   */
  async get() {
    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read("getPlatformFeeInfo", []);
    return CommonPlatformFeeSchema.parseAsync({
      platform_fee_recipient: platformFeeRecipient,
      platform_fee_basis_points: platformFeeBps
    });
  }
  /**
   * Set the platform fee recipient and basis points
   *
   * @example
   * ```javascript
   * await contract.platformFees.set({
   *   platform_fee_basis_points: 100, // 1% fee
   *   platform_fee_recipient: "0x..." // the fee recipient
   * })
   * ```
   *
   * @param platformFeeInfo - the platform fee information
   * @twfeature PlatformFee
   */
  set = buildTransactionFunction(async (platformFeeInfo) => {
    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method: "setPlatformFeeInfo",
      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]
    });
  });
};

export {
  ContractPlatformFee
};
//# sourceMappingURL=chunk-LBZPWF46.js.map
