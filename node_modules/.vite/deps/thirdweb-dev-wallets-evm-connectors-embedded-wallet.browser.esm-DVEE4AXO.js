import {
  AuthProvider,
  EmbeddedWalletSdk,
  UserWalletStatus
} from "./chunk-JCY5YCOF.js";
import "./chunk-LCZXP3DY.js";
import {
  Connector
} from "./chunk-F54R5EB6.js";
import "./chunk-6WPWCQHJ.js";
import "./chunk-RMA3UERL.js";
import {
  walletIds
} from "./chunk-KHLB25YR.js";
import {
  normalizeChainId
} from "./chunk-6Q4I5ZJT.js";
import {
  _defineProperty
} from "./chunk-5KMUDT64.js";
import "./chunk-VJLYARZW.js";
import "./chunk-LHNQBU3K.js";
import "./chunk-3CKHE3UX.js";
import "./chunk-KBSU7P7E.js";
import "./chunk-SKYU45PG.js";
import "./chunk-K3WLKV3W.js";
import "./chunk-GPHOYIUU.js";
import "./chunk-XCEIDS74.js";
import "./chunk-5KA42CBB.js";
import "./chunk-WUFPCT7Y.js";
import "./chunk-UALPWOVE.js";
import "./chunk-QR2UZWGK.js";
import "./chunk-HWDUXV26.js";
import "./chunk-SMCLQ63X.js";
import "./chunk-CCZJMTRD.js";
import "./chunk-ODCBHQEV.js";
import "./chunk-AS7Y3LQA.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-76ZFLGHX.js";
import "./chunk-R7MM6V5H.js";
import "./chunk-6NV6YXVG.js";
import "./chunk-WILOY3HU.js";
import "./chunk-JCHTCLVA.js";
import "./chunk-I4HYQSP4.js";
import "./chunk-E4JHE7BY.js";
import "./chunk-JDB4DIAM.js";
import "./chunk-54TL2FS6.js";
import "./chunk-EXDIX5RQ.js";
import "./chunk-V4ANEXDN.js";
import "./chunk-LIV54TUW.js";
import "./chunk-YXMD7WT5.js";
import "./chunk-FYFJ64CE.js";
import "./chunk-VISWZ4NV.js";
import "./chunk-SUHZGYFJ.js";
import "./chunk-JL64IIDE.js";
import "./chunk-QIUKQIML.js";
import "./chunk-LBZPWF46.js";
import "./chunk-YX55VVUJ.js";
import "./chunk-T2ZLFV2O.js";
import "./chunk-C6HNAJ4E.js";
import "./chunk-UJRE2TVX.js";
import "./chunk-P2MMOY6P.js";
import "./chunk-RMBH3OGQ.js";
import {
  require_utils
} from "./chunk-6WUZ7PGF.js";
import "./chunk-HOINEBW7.js";
import "./chunk-5WPDP5CU.js";
import "./chunk-ACRESCLM.js";
import "./chunk-BF2NOJ63.js";
import "./chunk-OL5PZ4BH.js";
import "./chunk-HTYCXNSQ.js";
import "./chunk-BRT6DRIA.js";
import "./chunk-PN3IOENS.js";
import "./chunk-ABGHX4OY.js";
import "./chunk-BZJISV5H.js";
import "./chunk-JZ6CFHV6.js";
import "./chunk-KEHZJHNP.js";
import "./chunk-BU75GG7A.js";
import "./chunk-3KTND37Y.js";
import "./chunk-JGKCYAOG.js";
import "./chunk-7G5FIZFQ.js";
import "./chunk-7FXQ4IAT.js";
import "./chunk-TBJ2FXKA.js";
import "./chunk-M5YXO2SQ.js";
import {
  init_lib7 as init_lib,
  utils_exports
} from "./chunk-HOAY7CPE.js";
import "./chunk-NPRSAB35.js";
import "./chunk-LUL5GG4I.js";
import {
  __toESM
} from "./chunk-RZ55PUNP.js";

// node_modules/.pnpm/@thirdweb-dev+wallets@2.5.39_@ethersproject+abstract-provider@5.8.0_@ethersproject+abst_1aeb6cf3f58449f29485c00b075a9d50/node_modules/@thirdweb-dev/wallets/evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js
init_lib();
var import_utils = __toESM(require_utils());
var EmbeddedWalletConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "id", walletIds.paper);
    _defineProperty(this, "name", "Embedded Wallet");
    _defineProperty(this, "ready", true);
    _defineProperty(this, "user", null);
    _defineProperty(this, "onAccountsChanged", async (accounts) => {
      if (accounts.length === 0) {
        await this.onDisconnect();
      } else {
        this.emit("change", {
          account: utils_exports.getAddress(accounts[0])
        });
      }
    });
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = this.options.chains.findIndex((c) => c.chainId === id) === -1;
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    _defineProperty(this, "onDisconnect", async () => {
      this.emit("disconnect");
    });
    this.options = options;
  }
  getEmbeddedWalletSDK() {
    if (!this._embeddedWalletSdk) {
      this._embeddedWalletSdk = new EmbeddedWalletSdk({
        clientId: this.options.clientId,
        chain: "Ethereum",
        onAuthSuccess: this.options.onAuthSuccess
      });
    }
    return this._embeddedWalletSdk;
  }
  async connect(args) {
    if (!args) {
      const result = await this.authenticate({
        strategy: "iframe"
      });
      if (!result.user) {
        throw new Error("Error connecting User");
      }
      this.user = result.user;
    } else {
      if (!args.authResult) {
        throw new Error("Missing authData - call authenticate() first with your authentication strategy");
      }
      if (!args.authResult.user) {
        throw new Error("Missing authData.user - call authenticate() first with your authentication strategy");
      }
      this.user = args.authResult.user;
    }
    if (args?.chainId) {
      this.switchChain(args.chainId);
    }
    return this.getAddress();
  }
  async disconnect() {
    const paper = this._embeddedWalletSdk;
    await paper?.auth.logout();
    this._signer = void 0;
    this._embeddedWalletSdk = void 0;
    this.user = null;
  }
  async getAddress() {
    if (!this.user) {
      throw new Error("Embedded Wallet is not connected");
    }
    return await this.getSigner().then((signer) => signer.getAddress());
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch (e) {
      return false;
    }
  }
  async getProvider() {
    const signer = await this.getSigner();
    if (!signer.provider) {
      throw new Error("Provider not found");
    }
    return signer.provider;
  }
  async getSigner() {
    if (this._signer) {
      return this._signer;
    }
    const user = await this.getUser();
    const signer = await user.wallet.getEthersJsSigner({
      rpcEndpoint: this.options.chain.rpc[0] || ""
      // TODO: handle chain.rpc being empty array
    });
    if (!signer) {
      throw new Error("Signer not found");
    }
    this._signer = signer;
    return signer;
  }
  async isAuthorized() {
    return false;
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error("Chain not configured");
    }
    try {
      await this.user?.wallet.setChain({
        chain: "Ethereum"
      });
      this._signer = await this.user?.wallet.getEthersJsSigner({
        rpcEndpoint: chain.rpc[0] || ""
      });
      this.emit("change", {
        chain: {
          id: chainId,
          unsupported: false
        }
      });
    } catch (e) {
      console.warn("Failed to switch chain", e);
    }
  }
  async setupListeners() {
    return Promise.resolve();
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
  async getUser() {
    if (!this.user || !this.user.wallet || !this.user.wallet.getEthersJsSigner) {
      const embeddedWalletSdk = this.getEmbeddedWalletSDK();
      const user = await embeddedWalletSdk.getUser();
      switch (user.status) {
        case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
          this.user = user;
          break;
        }
        default: {
          throw new Error("Embedded Wallet is not authenticated, please authenticate first");
        }
      }
    }
    return this.user;
  }
  async getEmail() {
    const user = await this.getUser();
    return user.authDetails.email;
  }
  async getPhoneNumber() {
    const user = await this.getUser();
    return user.authDetails.phoneNumber;
  }
  async getRecoveryInformation() {
    const user = await this.getUser();
    return user.authDetails;
  }
  async sendVerificationEmail(_ref) {
    let {
      email
    } = _ref;
    const ewSDK = this.getEmbeddedWalletSDK();
    return ewSDK.auth.sendEmailLoginOtp({
      email
    });
  }
  async sendVerificationSms(_ref2) {
    let {
      phoneNumber
    } = _ref2;
    const ewSDK = this.getEmbeddedWalletSDK();
    return ewSDK.auth.sendSmsLoginOtp({
      phoneNumber
    });
  }
  async authenticate(params) {
    const ewSDK = this.getEmbeddedWalletSDK();
    const strategy = params.strategy;
    switch (strategy) {
      case "email_verification": {
        return await ewSDK.auth.verifyEmailLoginOtp({
          email: params.email,
          otp: params.verificationCode,
          recoveryCode: params.recoveryCode
        });
      }
      case "phone_number_verification": {
        return await ewSDK.auth.verifySmsLoginOtp({
          phoneNumber: params.phoneNumber,
          otp: params.verificationCode,
          recoveryCode: params.recoveryCode
        });
      }
      case "apple":
      case "facebook":
      case "google": {
        const oauthProvider = oauthStrategyToAuthProvider[strategy];
        return ewSDK.auth.loginWithOauth({
          oauthProvider,
          closeOpenedWindow: params.closeOpenedWindow,
          openedWindow: params.openedWindow
        });
      }
      case "jwt": {
        return ewSDK.auth.loginWithCustomJwt({
          jwt: params.jwt,
          encryptionKey: params.encryptionKey
        });
      }
      case "auth_endpoint": {
        return ewSDK.auth.loginWithCustomAuthEndpoint({
          payload: params.payload,
          encryptionKey: params.encryptionKey
        });
      }
      case "iframe_email_verification": {
        return ewSDK.auth.loginWithEmailOtp({
          email: params.email
        });
      }
      case "iframe": {
        return ewSDK.auth.loginWithModal();
      }
      default:
        assertUnreachable(strategy);
    }
  }
};
function assertUnreachable(x) {
  throw new Error("Invalid param: " + x);
}
var oauthStrategyToAuthProvider = {
  google: AuthProvider.GOOGLE,
  facebook: AuthProvider.FACEBOOK,
  apple: AuthProvider.APPLE
};
export {
  EmbeddedWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm-DVEE4AXO.js.map
