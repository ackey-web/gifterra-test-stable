import {
  require_browser,
  require_js,
  require_safe_buffer,
  require_sha,
  require_string_decoder,
  require_to_buffer
} from "./chunk-PGTGEQAE.js";
import {
  require_assert,
  require_dist,
  require_inherits_browser as require_inherits_browser2
} from "./chunk-U6F5TMNU.js";
import {
  require_call_bound,
  require_get_intrinsic,
  require_satisfies,
  require_type,
  require_util
} from "./chunk-HMEHRJVF.js";
import {
  TransactionTypes,
  TypedDataEncoder,
  accessListify,
  computeAddress,
  dnsEncode,
  hashMessage,
  id,
  init_lib as init_lib10,
  init_lib2 as init_lib11,
  isValidName,
  namehash,
  parse,
  recoverAddress,
  require_bn as require_bn2,
  require_brorand,
  require_hmac_drbg,
  require_utils as require_utils2,
  serialize
} from "./chunk-4P55ELSR.js";
import {
  Connector
} from "./chunk-F54R5EB6.js";
import {
  _defineProperty
} from "./chunk-5KMUDT64.js";
import {
  require_utils
} from "./chunk-6WUZ7PGF.js";
import "./chunk-QD4XNQ5D.js";
import {
  require_events
} from "./chunk-JZLRJHVM.js";
import {
  require_buffer
} from "./chunk-BRT6DRIA.js";
import {
  require_bn
} from "./chunk-PN3IOENS.js";
import "./chunk-BZJISV5H.js";
import "./chunk-JZ6CFHV6.js";
import {
  ethers_exports,
  init_lib as init_lib5,
  init_lib5 as init_lib8,
  init_lib7 as init_lib9,
  lib_exports as lib_exports5,
  lib_exports5 as lib_exports8,
  lib_exports7 as lib_exports9,
  require_aes_js,
  require_scrypt
} from "./chunk-HOAY7CPE.js";
import {
  init_lib11 as init_lib4,
  init_lib13 as init_lib6,
  init_lib19 as init_lib7,
  init_lib2 as init_lib,
  init_lib3 as init_lib2,
  init_lib7 as init_lib3,
  lib_exports11 as lib_exports4,
  lib_exports13 as lib_exports6,
  lib_exports19 as lib_exports7,
  lib_exports2 as lib_exports,
  lib_exports3 as lib_exports2,
  lib_exports7 as lib_exports3,
  require_bech32,
  require_hash,
  require_minimalistic_assert,
  require_sha3
} from "./chunk-NPRSAB35.js";
import {
  require_inherits_browser
} from "./chunk-LUL5GG4I.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-RZ55PUNP.js";

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    var kindOf = /* @__PURE__ */ (function(cache) {
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    })(/* @__PURE__ */ Object.create(null));
    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (kindOf(val) !== "object") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isFormData(thing) {
      var pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
    }
    var isURLSearchParams = kindOfTest("URLSearchParams");
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key2 in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key2)) {
            fn.call(null, obj[key2], key2, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key2) {
        if (isPlainObject(result[key2]) && isPlainObject(val)) {
          result[key2] = merge(result[key2], val);
        } else if (isPlainObject(val)) {
          result[key2] = merge({}, val);
        } else if (isArray(val)) {
          result[key2] = val.slice();
        } else {
          result[key2] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key2) {
        if (thisArg && typeof val === "function") {
          a[key2] = bind(val, thisArg);
        } else {
          a[key2] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }
    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};
      destObj = destObj || {};
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    }
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }
    function toArray(thing) {
      if (!thing) return null;
      var i = thing.length;
      if (isUndefined(i)) return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }
    var isTypedArray = /* @__PURE__ */ (function(TypedArray) {
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      isTypedArray,
      isFileList
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    function encode4(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize3(val, key2) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key2 = key2 + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode4(key2) + "=" + encode4(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id2) {
      if (this.handlers[id2]) {
        this.handlers[id2] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/AxiosError.js
var require_AxiosError = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/AxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON2() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED"
      // eslint-disable-next-line func-names
    ].forEach(function(code) {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    module.exports = AxiosError;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/defaults/transitional.js"(exports, module) {
    "use strict";
    module.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/toFormData.js
var require_toFormData = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/toFormData.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    function toFormData(obj, formData) {
      formData = formData || new FormData();
      var stack = [];
      function convertValue(value) {
        if (value === null) return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error("Circular reference detected in " + parentKey);
          }
          stack.push(data);
          utils.forEach(data, function each(value, key2) {
            if (utils.isUndefined(value)) return;
            var fullKey = parentKey ? parentKey + "." + key2 : key2;
            var arr;
            if (value && !parentKey && typeof value === "object") {
              if (utils.endsWith(key2, "{}")) {
                value = JSON.stringify(value);
              } else if (utils.endsWith(key2, "[]") && (arr = utils.toArray(value))) {
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }
            build(value, fullKey);
          });
          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }
      build(obj);
      return formData;
    }
    module.exports = toFormData;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var AxiosError = require_AxiosError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      /* @__PURE__ */ (function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      })()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      /* @__PURE__ */ (function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      })()
    );
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key2;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key2 = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key2) {
          if (parsed[key2] && ignoreDuplicateOf.indexOf(key2) >= 0) {
            return;
          }
          if (key2 === "set-cookie") {
            parsed[key2] = (parsed[key2] ? parsed[key2] : []).concat([val]);
          } else {
            parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      (function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      })()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ (function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      })()
    );
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/CanceledError.js
var require_CanceledError = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/CanceledError.js"(exports, module) {
    "use strict";
    var AxiosError = require_AxiosError();
    var utils = require_utils3();
    function CanceledError(message) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    module.exports = CanceledError;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/parseProtocol.js
var require_parseProtocol = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/parseProtocol.js"(exports, module) {
    "use strict";
    module.exports = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var transitionalDefaults = require_transitional();
    var AxiosError = require_AxiosError();
    var CanceledError = require_CanceledError();
    var parseProtocol = require_parseProtocol();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key2) {
            if (typeof requestData === "undefined" && key2.toLowerCase() === "content-type") {
              delete requestHeaders[key2];
            } else {
              request.setRequestHeader(key2, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/null.js
var require_null = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/null.js"(exports, module) {
    module.exports = null;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/defaults/index.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var normalizeHeaderName = require_normalizeHeaderName();
    var AxiosError = require_AxiosError();
    var transitionalDefaults = require_transitional();
    var toFormData = require_toFormData();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers["Content-Type"];
        var isFileList;
        if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
          var _FormData = this.env && this.env.FormData;
          return toFormData(isFileList ? { "files[]": data } : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: require_null()
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var CanceledError = require_CanceledError();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError();
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.27.2"
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION = require_data().version;
    var AxiosError = require_AxiosError();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version25, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version25 ? " in " + version25 : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version25 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version25 + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var buildFullPath = require_buildFullPath();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    module.exports = Axios;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var CanceledError = require_CanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.CanceledError = require_CanceledError();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.toFormData = require_toFormData();
    axios.AxiosError = require_AxiosError();
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-adapters@0.1.0-alpha.19_@ethersproject+abstract-provider@5.8.0_f206e203843fdb269f81a28f46761ebb/node_modules/@safe-global/safe-ethers-adapters/dist/src/service.js
var require_service = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-adapters@0.1.0-alpha.19_@ethersproject+abstract-provider@5.8.0_f206e203843fdb269f81a28f46761ebb/node_modules/@safe-global/safe-ethers-adapters/dist/src/service.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SafeService = void 0;
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var axios_1 = __importDefault(require_axios2());
    var SafeService2 = class {
      constructor(serviceUrl, network) {
        this.serviceUrl = serviceUrl;
        this.network = network !== null && network !== void 0 ? network : axios_1.default;
      }
      /**
       * Estimates a Safe transaction
       *
       * @param safe - Address of the Safe for which this transaction should be estimated
       * @param safeTx - Safe transaction that should be estimated for execution
       * @returns A big number representing the safeTxGas for the passed Safe transaction
       */
      async estimateSafeTx(safe, safeTx) {
        const url = `${this.serviceUrl}/api/v1/safes/${safe}/multisig-transactions/estimations/`;
        const resp = await this.network.post(url, safeTx);
        return bignumber_1.BigNumber.from(resp.data.safeTxGas);
      }
      /**
       * Load details for a Safe transaction
       *
       * @param safeTxHash - Hash of the Safe transaction
       * @returns A `SafeTxDetails` object that contains the details of a Safe transaction
       */
      async getSafeTxDetails(safeTxHash) {
        const url = `${this.serviceUrl}/api/v1/multisig-transactions/${safeTxHash}`;
        const resp = await this.network.get(url);
        return resp.data;
      }
      /**
       * Propose a new Safe transaction to the service
       *
       * @param safeAddress - Address of the Safe for which this transaction should be proposed
       * @param safeTxHash - Hash of the Safe transaction
       * @param safeTx - Safe transaction that should be proposed
       * @param signature - Signature of an owner or a delegate of an owner of the specified Safe to authorize the proposal
       * @returns The hash of the Safe transaction that has been proposed
       */
      async proposeTx(safeAddress, safeTxHash, safeTx, signature2) {
        const url = `${this.serviceUrl}/api/v1/safes/${safeAddress}/multisig-transactions/`;
        const data = {
          ...safeTx.data,
          contractTransactionHash: safeTxHash,
          sender: signature2.signer,
          signature: signature2.data
        };
        const resp = await this.network.post(url, data);
        return resp.data;
      }
    };
    exports.SafeService = SafeService2;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CompatibilityFallbackHandlerContract.js
var require_CompatibilityFallbackHandlerContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CompatibilityFallbackHandlerContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CreateCallContract.js
var require_CreateCallContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CreateCallContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeContract.js
var require_GnosisSafeContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeProxyFactoryContract.js
var require_GnosisSafeProxyFactoryContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeProxyFactoryContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendCallOnlyContract.js
var require_MultiSendCallOnlyContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendCallOnlyContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendContract.js
var require_MultiSendContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SignMessageLibContract.js
var require_SignMessageLibContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SignMessageLibContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/ethereumLibs/EthAdapter.js
var require_EthAdapter = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/ethereumLibs/EthAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/types.js
var require_types = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OperationType = void 0;
    var OperationType;
    (function(OperationType2) {
      OperationType2[OperationType2["Call"] = 0] = "Call";
      OperationType2[OperationType2["DelegateCall"] = 1] = "DelegateCall";
    })(OperationType = exports.OperationType || (exports.OperationType = {}));
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js
var require_src = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_CompatibilityFallbackHandlerContract(), exports);
    __exportStar(require_CreateCallContract(), exports);
    __exportStar(require_GnosisSafeContract(), exports);
    __exportStar(require_GnosisSafeProxyFactoryContract(), exports);
    __exportStar(require_MultiSendCallOnlyContract(), exports);
    __exportStar(require_MultiSendContract(), exports);
    __exportStar(require_SignMessageLibContract(), exports);
    __exportStar(require_EthAdapter(), exports);
    __exportStar(require_types(), exports);
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/types.js
var require_types2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/simulate_tx_accessor.json
var require_simulate_tx_accessor = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/simulate_tx_accessor.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SimulateTxAccessor",
      version: "1.3.0",
      deployments: {
        canonical: {
          address: "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
          codeHash: "0xb3fb9763869f2c09a2ac5a425d2dd6060bf7ef46b3899049d71a711e71e00f04"
        },
        eip155: {
          address: "0x727a77a074D1E6c4530e814F89E618a3298FC044",
          codeHash: "0x66712e1d9161706f826d8d74a3cc03db0289b2530a1202f24d52986952b69a02"
        },
        zksync: {
          address: "0x4191E2e12E8BC5002424CE0c51f9947b02675a44",
          codeHash: "0x18c486b76cb76981360e96ca4f90fc745fde6a8575b8c2b35ac98eab3856fd72"
        }
      },
      networkAddresses: {
        "1": ["canonical", "eip155"],
        "3": "canonical",
        "4": "canonical",
        "5": "canonical",
        "10": ["eip155", "canonical"],
        "11": "canonical",
        "12": "canonical",
        "14": "canonical",
        "16": "eip155",
        "18": "eip155",
        "19": "eip155",
        "25": ["eip155", "canonical"],
        "28": "eip155",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "42": "canonical",
        "43": ["eip155", "canonical"],
        "44": ["eip155", "canonical"],
        "46": ["eip155", "canonical"],
        "50": ["eip155", "canonical"],
        "51": ["canonical", "eip155"],
        "56": ["canonical", "eip155"],
        "57": "eip155",
        "61": "eip155",
        "63": "eip155",
        "69": "eip155",
        "71": "canonical",
        "81": "eip155",
        "82": "eip155",
        "83": ["eip155", "canonical"],
        "96": "canonical",
        "97": "canonical",
        "100": ["canonical", "eip155"],
        "106": "eip155",
        "108": "eip155",
        "109": "eip155",
        "111": "eip155",
        "114": "canonical",
        "122": "canonical",
        "123": "canonical",
        "130": ["canonical", "eip155"],
        "133": "canonical",
        "137": ["canonical", "eip155"],
        "143": ["canonical", "eip155"],
        "146": ["canonical", "eip155"],
        "148": "eip155",
        "155": "eip155",
        "169": "canonical",
        "177": "canonical",
        "179": "eip155",
        "185": "eip155",
        "195": "eip155",
        "196": ["eip155", "canonical"],
        "204": ["eip155", "canonical"],
        "232": ["zksync", "canonical", "eip155"],
        "239": ["eip155", "canonical"],
        "240": "zksync",
        "246": "canonical",
        "250": ["canonical", "eip155"],
        "252": ["eip155", "canonical"],
        "255": "eip155",
        "274": "canonical",
        "280": "zksync",
        "282": "zksync",
        "288": "eip155",
        "291": "canonical",
        "295": "canonical",
        "296": "canonical",
        "300": ["zksync", "canonical", "eip155"],
        "314": "eip155",
        "321": "canonical",
        "322": "canonical",
        "324": ["zksync", "canonical", "eip155"],
        "336": ["canonical", "eip155"],
        "338": "eip155",
        "360": ["eip155", "canonical"],
        "369": "canonical",
        "388": "zksync",
        "418": "canonical",
        "420": "eip155",
        "424": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": ["canonical", "eip155"],
        "545": "eip155",
        "570": "eip155",
        "588": "eip155",
        "592": ["canonical", "eip155"],
        "595": "eip155",
        "599": "eip155",
        "648": ["canonical", "eip155"],
        "686": "eip155",
        "690": ["eip155", "canonical"],
        "698": "canonical",
        "747": "eip155",
        "787": "eip155",
        "919": ["canonical", "eip155"],
        "943": "canonical",
        "999": ["canonical", "eip155"],
        "1001": "eip155",
        "1008": "canonical",
        "1030": "canonical",
        "1088": ["eip155", "canonical"],
        "1101": ["canonical", "eip155"],
        "1111": "eip155",
        "1112": "eip155",
        "1114": "canonical",
        "1115": "canonical",
        "1116": "canonical",
        "1135": ["canonical", "eip155"],
        "1230": "eip155",
        "1231": "eip155",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1294": "eip155",
        "1315": ["eip155", "canonical"],
        "1328": ["eip155", "canonical"],
        "1329": "canonical",
        "1337": "eip155",
        "1424": "canonical",
        "1439": "canonical",
        "1442": "eip155",
        "1480": ["eip155", "canonical"],
        "1513": ["eip155", "canonical"],
        "1514": ["eip155", "canonical"],
        "1516": ["eip155", "canonical"],
        "1559": "eip155",
        "1625": "eip155",
        "1663": "eip155",
        "1729": "canonical",
        "1740": ["eip155", "canonical"],
        "1750": ["eip155", "canonical"],
        "1807": "canonical",
        "1868": "canonical",
        "1890": "canonical",
        "1891": "canonical",
        "1923": ["canonical", "eip155"],
        "1924": ["canonical", "eip155"],
        "1946": ["canonical", "eip155"],
        "1984": "canonical",
        "1998": "canonical",
        "2001": "canonical",
        "2002": "canonical",
        "2008": "canonical",
        "2019": "canonical",
        "2020": "canonical",
        "2021": "canonical",
        "2039": ["canonical", "eip155"],
        "2187": ["canonical", "eip155"],
        "2192": ["canonical", "eip155"],
        "2201": ["canonical", "eip155"],
        "2221": ["canonical", "eip155"],
        "2222": ["canonical", "eip155"],
        "2331": "canonical",
        "2345": "canonical",
        "2358": "eip155",
        "2390": "eip155",
        "2391": ["eip155", "canonical"],
        "2741": ["zksync", "canonical", "eip155"],
        "2810": ["eip155", "canonical"],
        "2818": ["canonical", "eip155"],
        "3338": ["canonical", "eip155"],
        "3636": "eip155",
        "3637": ["canonical", "eip155"],
        "3737": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4078": "canonical",
        "4157": "eip155",
        "4158": "eip155",
        "4202": "canonical",
        "4337": "canonical",
        "4460": "canonical",
        "4653": "eip155",
        "4661": "canonical",
        "4689": "eip155",
        "4918": "canonical",
        "4919": "canonical",
        "5000": ["eip155", "canonical"],
        "5001": "eip155",
        "5003": ["eip155", "canonical"],
        "5115": ["eip155", "canonical"],
        "5165": "canonical",
        "5330": ["eip155", "canonical"],
        "5700": ["eip155", "canonical"],
        "6001": "canonical",
        "6102": "eip155",
        "6398": "eip155",
        "6880": "canonical",
        "6900": ["canonical", "eip155"],
        "6911": ["canonical", "eip155"],
        "7000": ["eip155", "canonical"],
        "7001": "eip155",
        "7070": "canonical",
        "7332": "eip155",
        "7341": "canonical",
        "7560": ["canonical", "eip155"],
        "7700": "eip155",
        "7897": ["canonical", "eip155"],
        "8008": ["canonical", "eip155"],
        "8192": "eip155",
        "8194": "eip155",
        "8217": "eip155",
        "8329": "canonical",
        "8333": "eip155",
        "8453": ["eip155", "canonical"],
        "8822": "eip155",
        "9000": ["canonical", "eip155"],
        "9001": ["canonical", "eip155"],
        "9069": "canonical",
        "9070": "canonical",
        "9728": "eip155",
        "9745": ["canonical", "eip155"],
        "9746": ["canonical", "eip155"],
        "10000": "eip155",
        "10001": "eip155",
        "10081": "eip155",
        "10200": "canonical",
        "10242": "eip155",
        "10243": "eip155",
        "10849": "canonical",
        "11011": ["eip155", "canonical"],
        "11111": "canonical",
        "11124": ["zksync", "canonical", "eip155"],
        "11235": "canonical",
        "11437": "canonical",
        "11820": "canonical",
        "11891": "canonical",
        "12324": "canonical",
        "12325": "canonical",
        "12357": "canonical",
        "12553": "canonical",
        "13337": "canonical",
        "13371": ["eip155", "canonical"],
        "13473": ["eip155", "canonical"],
        "13505": "eip155",
        "13746": ["canonical", "eip155"],
        "14800": "eip155",
        "16661": ["canonical", "eip155"],
        "17000": ["canonical", "eip155"],
        "17069": ["eip155", "canonical"],
        "17172": "eip155",
        "18231": "canonical",
        "18233": "canonical",
        "22776": "canonical",
        "23294": ["eip155", "canonical"],
        "23295": ["eip155", "canonical"],
        "25327": "eip155",
        "28802": "eip155",
        "28882": ["eip155", "canonical"],
        "28979": "canonical",
        "31611": "canonical",
        "32323": "canonical",
        "32769": "eip155",
        "32770": "eip155",
        "33101": "eip155",
        "33139": "eip155",
        "33401": "canonical",
        "34443": ["canonical", "eip155"],
        "35441": "canonical",
        "35443": "canonical",
        "37111": "zksync",
        "41455": ["canonical", "eip155"],
        "41923": "eip155",
        "42161": ["canonical", "eip155"],
        "42170": "canonical",
        "42220": ["eip155", "canonical"],
        "42793": ["eip155", "canonical"],
        "43111": ["eip155", "canonical"],
        "43113": ["canonical", "eip155"],
        "43114": ["eip155", "canonical"],
        "43288": "eip155",
        "44787": "canonical",
        "45000": "canonical",
        "47763": "canonical",
        "47805": "canonical",
        "48898": ["eip155", "canonical"],
        "48899": ["eip155", "canonical"],
        "48900": ["canonical", "eip155"],
        "50104": "zksync",
        "53456": "canonical",
        "53457": "canonical",
        "54211": "eip155",
        "56288": "eip155",
        "57000": "eip155",
        "57054": "canonical",
        "57073": ["eip155", "canonical"],
        "58008": "canonical",
        "59140": ["canonical", "eip155"],
        "59141": ["canonical", "eip155"],
        "59144": ["canonical", "eip155"],
        "60808": ["canonical", "eip155"],
        "61166": "zksync",
        "71401": "eip155",
        "71402": "eip155",
        "73799": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": ["canonical", "eip155"],
        "80084": "canonical",
        "80085": ["canonical", "eip155"],
        "80094": ["canonical", "eip155"],
        "81224": ["canonical", "eip155"],
        "81457": ["canonical", "eip155"],
        "83291": "canonical",
        "84531": "eip155",
        "84532": ["eip155", "canonical"],
        "97435": "canonical",
        "103454": "eip155",
        "111188": "canonical",
        "128123": ["eip155", "canonical"],
        "167000": ["eip155", "canonical"],
        "167008": "canonical",
        "167009": ["eip155", "canonical"],
        "175188": "canonical",
        "200101": "canonical",
        "200202": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "314159": "eip155",
        "328527": "canonical",
        "333999": "canonical",
        "421611": "canonical",
        "421613": "canonical",
        "421614": "canonical",
        "490000": ["eip155", "canonical"],
        "534351": ["canonical", "eip155"],
        "534352": ["canonical", "eip155"],
        "534353": "eip155",
        "543210": ["zksync", "canonical"],
        "555666": "canonical",
        "560048": ["eip155", "canonical"],
        "622277": "canonical",
        "656476": ["eip155", "canonical"],
        "657468": ["canonical", "eip155"],
        "660279": "canonical",
        "668668": "canonical",
        "688688": "eip155",
        "695569": ["eip155", "canonical"],
        "713715": ["eip155", "canonical"],
        "747474": ["eip155", "canonical"],
        "763373": "eip155",
        "764984": "canonical",
        "808813": ["eip155", "canonical"],
        "810180": "zksync",
        "978657": "canonical",
        "4457845": "zksync",
        "6038361": ["eip155", "canonical"],
        "7225878": "eip155",
        "7777777": ["canonical", "eip155"],
        "11155111": ["eip155", "canonical"],
        "11155420": "eip155",
        "12227332": "canonical",
        "21000000": "eip155",
        "94204209": ["canonical", "eip155"],
        "111557560": ["canonical", "eip155"],
        "123420111": ["canonical", "eip155"],
        "161221135": "canonical",
        "168587773": "canonical",
        "222000222": "canonical",
        "245022926": "eip155",
        "245022934": "eip155",
        "328527624": "canonical",
        "333000333": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": ["canonical", "eip155"],
        "888888888": "canonical",
        "999999999": ["canonical", "eip155"],
        "1313161554": ["canonical", "eip155"],
        "1313161555": "canonical",
        "1511670449": "canonical",
        "1666600000": "eip155",
        "1666700000": "eip155",
        "11297108099": "canonical",
        "11297108109": "canonical",
        "37714555429": "canonical",
        "88153591557": ["canonical", "eip155"],
        "920637907288165": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "uint256",
              name: "estimate",
              type: "uint256"
            },
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/simulate_tx_accessor.json
var require_simulate_tx_accessor2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/simulate_tx_accessor.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SimulateTxAccessor",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
          codeHash: "0x91f82615581fc73b190b83d72e883608b25e392f72322035df1b13d51766cf8d"
        },
        zksync: {
          address: "0xdd35026932273768A3e31F4efF7313B5B7A7199d",
          codeHash: "0xe772f957acb3987a0b2f1af9e0b515d2a213ec79cbe96a5187e5c5ba6709361e"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "5": "canonical",
        "10": "canonical",
        "14": "canonical",
        "16": "canonical",
        "19": "canonical",
        "25": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "71": "canonical",
        "81": "canonical",
        "88": "canonical",
        "97": "canonical",
        "98": "canonical",
        "100": "canonical",
        "114": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "155": "canonical",
        "169": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "250": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "338": "canonical",
        "360": "canonical",
        "369": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "530": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1030": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1442": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1729": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1811": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2000": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4061": "canonical",
        "4062": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4162": "canonical",
        "4202": "canonical",
        "4337": "canonical",
        "4488": "canonical",
        "4653": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6001": "canonical",
        "6321": "canonical",
        "6322": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6688": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7171": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7771": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8192": "canonical",
        "8194": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10243": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "11235": "canonical",
        "11501": "canonical",
        "11503": "canonical",
        "13337": "canonical",
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "17069": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "35441": "canonical",
        "35443": "canonical",
        "41455": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "54211": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59140": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80085": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84531": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "90001": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "105105": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "205205": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "421614": "canonical",
        "444444": "canonical",
        "490000": "canonical",
        "534351": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "555666": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "6038361": "canonical",
        "7225878": "canonical",
        "7777777": "canonical",
        "9999999": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "52164803": "canonical",
        "65100004": "canonical",
        "94204209": "canonical",
        "111557560": "canonical",
        "123420111": "canonical",
        "168587773": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": "canonical",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1313161555": "canonical",
        "1417429182": "canonical",
        "1511670449": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical",
        "88153591557": "canonical",
        "123420000220": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "uint256",
              name: "estimate",
              type: "uint256"
            },
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/simulate_tx_accessor.json
var require_simulate_tx_accessor3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/simulate_tx_accessor.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SimulateTxAccessor",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x07EfA797c55B5DdE3698d876b277aBb6B893654C",
          codeHash: "0x706db4bb6151f75a5b3845724174e201c59046dfbe65b4e5909ad4b88f8f752d"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "uint256",
              name: "estimate",
              type: "uint256"
            },
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/proxy_factory.json
var require_proxy_factory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/proxy_factory.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "ProxyFactory",
      version: "1.0.0",
      deployments: {
        canonical: {
          address: "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
          codeHash: "0x84a375ad96ab395850d46cd601ed6354d3cf3fb67cec0caf18f34af5c9d1a7f0"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "4": "canonical",
        "5": "canonical",
        "42": "canonical",
        "100": "canonical",
        "369": "canonical"
      },
      abi: [
        {
          constant: false,
          inputs: [
            {
              name: "_mastercopy",
              type: "address"
            },
            {
              name: "initializer",
              type: "bytes"
            },
            {
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "masterCopy",
              type: "address"
            },
            {
              name: "data",
              type: "bytes"
            }
          ],
          name: "createProxy",
          outputs: [
            {
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyRuntimeCode",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "proxy",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/proxy_factory.json
var require_proxy_factory2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/proxy_factory.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "ProxyFactory",
      version: "1.1.1",
      deployments: {
        canonical: {
          address: "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
          codeHash: "0x0f0bb9c13be3b595d6f0fde841d5247a96f7e315bd8b97e1363553bee9a7d995"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "4": "canonical",
        "5": "canonical",
        "42": "canonical",
        "88": "canonical",
        "100": "canonical",
        "246": "canonical",
        "369": "canonical",
        "73799": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "masterCopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          name: "createProxy",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyRuntimeCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_mastercopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_mastercopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              internalType: "contract IProxyCreationCallback",
              name: "callback",
              type: "address"
            }
          ],
          name: "createProxyWithCallback",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_mastercopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "calculateCreateProxyWithNonceAddress",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/proxy_factory.json
var require_proxy_factory3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/proxy_factory.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "GnosisSafeProxyFactory",
      version: "1.3.0",
      deployments: {
        canonical: {
          address: "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
          codeHash: "0x337d7f54be11b6ed55fef7b667ea5488db53db8320a05d1146aa4bd169a39a9b"
        },
        eip155: {
          address: "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
          codeHash: "0x337d7f54be11b6ed55fef7b667ea5488db53db8320a05d1146aa4bd169a39a9b"
        },
        zksync: {
          address: "0xDAec33641865E4651fB43181C6DB6f7232Ee91c2",
          codeHash: "0x55daa5d390d283edbc5fa835bd53befce45179c758feaac8c149a95850d0a6b6"
        }
      },
      networkAddresses: {
        "1": ["canonical", "eip155"],
        "3": "canonical",
        "4": "canonical",
        "5": "canonical",
        "10": ["eip155", "canonical"],
        "11": "canonical",
        "12": "canonical",
        "14": "canonical",
        "16": "eip155",
        "18": "eip155",
        "19": "eip155",
        "25": ["eip155", "canonical"],
        "28": "eip155",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "42": "canonical",
        "43": ["eip155", "canonical"],
        "44": ["eip155", "canonical"],
        "46": ["eip155", "canonical"],
        "50": ["eip155", "canonical"],
        "51": ["canonical", "eip155"],
        "56": ["canonical", "eip155"],
        "57": "eip155",
        "61": "eip155",
        "63": "eip155",
        "69": "eip155",
        "71": "canonical",
        "81": "eip155",
        "82": "eip155",
        "83": ["eip155", "canonical"],
        "96": "canonical",
        "97": "canonical",
        "100": ["canonical", "eip155"],
        "106": "eip155",
        "108": "eip155",
        "109": "eip155",
        "111": "eip155",
        "114": "canonical",
        "122": "canonical",
        "123": "canonical",
        "130": ["canonical", "eip155"],
        "133": "canonical",
        "137": ["canonical", "eip155"],
        "143": ["canonical", "eip155"],
        "146": ["canonical", "eip155"],
        "148": "eip155",
        "155": "eip155",
        "169": "canonical",
        "177": "canonical",
        "179": "eip155",
        "185": "eip155",
        "195": "eip155",
        "196": ["eip155", "canonical"],
        "204": ["eip155", "canonical"],
        "232": ["zksync", "canonical", "eip155"],
        "239": ["eip155", "canonical"],
        "240": "zksync",
        "246": "canonical",
        "250": ["canonical", "eip155"],
        "252": ["eip155", "canonical"],
        "255": "eip155",
        "274": "canonical",
        "280": "zksync",
        "282": "zksync",
        "288": "eip155",
        "291": "canonical",
        "295": "canonical",
        "296": "canonical",
        "300": ["zksync", "canonical", "eip155"],
        "314": "eip155",
        "321": "canonical",
        "322": "canonical",
        "324": ["zksync", "canonical", "eip155"],
        "336": ["canonical", "eip155"],
        "338": "eip155",
        "360": ["eip155", "canonical"],
        "369": "canonical",
        "388": "zksync",
        "418": "canonical",
        "420": "eip155",
        "424": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": ["canonical", "eip155"],
        "545": "eip155",
        "570": "eip155",
        "588": "eip155",
        "592": ["canonical", "eip155"],
        "595": "eip155",
        "599": "eip155",
        "648": ["canonical", "eip155"],
        "686": "eip155",
        "690": ["eip155", "canonical"],
        "698": "canonical",
        "747": "eip155",
        "787": "eip155",
        "919": ["canonical", "eip155"],
        "943": "canonical",
        "999": ["canonical", "eip155"],
        "1001": "eip155",
        "1008": "canonical",
        "1030": "canonical",
        "1088": ["eip155", "canonical"],
        "1101": ["canonical", "eip155"],
        "1111": "eip155",
        "1112": "eip155",
        "1114": "canonical",
        "1115": "canonical",
        "1116": "canonical",
        "1135": ["canonical", "eip155"],
        "1230": "eip155",
        "1231": "eip155",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1294": "eip155",
        "1315": ["eip155", "canonical"],
        "1328": ["eip155", "canonical"],
        "1329": "canonical",
        "1337": "eip155",
        "1424": "canonical",
        "1439": "canonical",
        "1442": "eip155",
        "1480": ["eip155", "canonical"],
        "1513": ["eip155", "canonical"],
        "1514": ["eip155", "canonical"],
        "1516": ["eip155", "canonical"],
        "1559": "eip155",
        "1625": "eip155",
        "1663": "eip155",
        "1729": "canonical",
        "1740": ["eip155", "canonical"],
        "1750": ["eip155", "canonical"],
        "1807": "canonical",
        "1868": "canonical",
        "1890": "canonical",
        "1891": "canonical",
        "1923": ["canonical", "eip155"],
        "1924": ["canonical", "eip155"],
        "1946": ["canonical", "eip155"],
        "1984": "canonical",
        "1998": "canonical",
        "2001": "canonical",
        "2002": "canonical",
        "2008": "canonical",
        "2019": "canonical",
        "2020": "canonical",
        "2021": "canonical",
        "2039": ["canonical", "eip155"],
        "2187": ["canonical", "eip155"],
        "2192": ["canonical", "eip155"],
        "2201": ["canonical", "eip155"],
        "2221": ["canonical", "eip155"],
        "2222": ["canonical", "eip155"],
        "2331": "canonical",
        "2345": "canonical",
        "2358": "eip155",
        "2390": "eip155",
        "2391": ["eip155", "canonical"],
        "2741": ["zksync", "canonical", "eip155"],
        "2810": ["eip155", "canonical"],
        "2818": ["canonical", "eip155"],
        "3338": ["canonical", "eip155"],
        "3636": "eip155",
        "3637": ["canonical", "eip155"],
        "3737": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4078": "canonical",
        "4157": "eip155",
        "4158": "eip155",
        "4202": "canonical",
        "4337": "canonical",
        "4460": "canonical",
        "4653": "eip155",
        "4661": "canonical",
        "4689": "eip155",
        "4918": "canonical",
        "4919": "canonical",
        "5000": ["eip155", "canonical"],
        "5001": "eip155",
        "5003": ["eip155", "canonical"],
        "5115": ["eip155", "canonical"],
        "5165": "canonical",
        "5330": ["eip155", "canonical"],
        "5700": ["eip155", "canonical"],
        "6001": "canonical",
        "6102": "eip155",
        "6398": "eip155",
        "6880": "canonical",
        "6900": ["canonical", "eip155"],
        "6911": ["canonical", "eip155"],
        "7000": ["eip155", "canonical"],
        "7001": "eip155",
        "7070": "canonical",
        "7332": "eip155",
        "7341": "canonical",
        "7560": ["canonical", "eip155"],
        "7700": "eip155",
        "7897": ["canonical", "eip155"],
        "8008": ["canonical", "eip155"],
        "8192": "eip155",
        "8194": "eip155",
        "8217": "eip155",
        "8329": "canonical",
        "8333": "eip155",
        "8453": ["eip155", "canonical"],
        "8822": "eip155",
        "9000": ["canonical", "eip155"],
        "9001": ["canonical", "eip155"],
        "9069": "canonical",
        "9070": "canonical",
        "9728": "eip155",
        "9745": ["canonical", "eip155"],
        "9746": ["canonical", "eip155"],
        "10000": "eip155",
        "10001": "eip155",
        "10081": "eip155",
        "10200": "canonical",
        "10242": "eip155",
        "10243": "eip155",
        "10849": "canonical",
        "11011": ["eip155", "canonical"],
        "11111": "canonical",
        "11124": ["zksync", "canonical", "eip155"],
        "11235": "canonical",
        "11437": "canonical",
        "11820": "canonical",
        "11891": "canonical",
        "12324": "canonical",
        "12325": "canonical",
        "12357": "canonical",
        "12553": "canonical",
        "13337": "canonical",
        "13371": ["eip155", "canonical"],
        "13473": ["eip155", "canonical"],
        "13505": "eip155",
        "13746": ["canonical", "eip155"],
        "14800": "eip155",
        "16661": ["canonical", "eip155"],
        "17000": ["canonical", "eip155"],
        "17069": ["eip155", "canonical"],
        "17172": "eip155",
        "18231": "canonical",
        "18233": "canonical",
        "22776": "canonical",
        "23294": ["eip155", "canonical"],
        "23295": ["eip155", "canonical"],
        "25327": "eip155",
        "28802": "eip155",
        "28882": ["eip155", "canonical"],
        "28979": "canonical",
        "31611": "canonical",
        "32323": "canonical",
        "32769": "eip155",
        "32770": "eip155",
        "33101": "eip155",
        "33139": "eip155",
        "33401": "canonical",
        "34443": ["canonical", "eip155"],
        "35441": "canonical",
        "35443": "canonical",
        "37111": "zksync",
        "41455": ["canonical", "eip155"],
        "41923": "eip155",
        "42161": ["canonical", "eip155"],
        "42170": "canonical",
        "42220": ["eip155", "canonical"],
        "42793": ["eip155", "canonical"],
        "43111": ["eip155", "canonical"],
        "43113": ["canonical", "eip155"],
        "43114": ["eip155", "canonical"],
        "43288": "eip155",
        "44787": "canonical",
        "45000": "canonical",
        "47763": "canonical",
        "47805": "canonical",
        "48898": ["eip155", "canonical"],
        "48899": ["eip155", "canonical"],
        "48900": ["canonical", "eip155"],
        "50104": "zksync",
        "53456": "canonical",
        "53457": "canonical",
        "54211": "eip155",
        "56288": "eip155",
        "57000": "eip155",
        "57054": "canonical",
        "57073": ["eip155", "canonical"],
        "58008": "canonical",
        "59140": ["canonical", "eip155"],
        "59141": ["canonical", "eip155"],
        "59144": ["canonical", "eip155"],
        "60808": ["canonical", "eip155"],
        "61166": "zksync",
        "71401": "eip155",
        "71402": "eip155",
        "73799": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": ["canonical", "eip155"],
        "80084": "canonical",
        "80085": ["canonical", "eip155"],
        "80094": ["canonical", "eip155"],
        "81224": ["canonical", "eip155"],
        "81457": ["canonical", "eip155"],
        "83291": "canonical",
        "84531": "eip155",
        "84532": ["eip155", "canonical"],
        "97435": "canonical",
        "103454": "eip155",
        "111188": "canonical",
        "128123": ["eip155", "canonical"],
        "167000": ["eip155", "canonical"],
        "167008": "canonical",
        "167009": ["eip155", "canonical"],
        "175188": "canonical",
        "200101": "canonical",
        "200202": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "314159": "eip155",
        "328527": "canonical",
        "333999": "canonical",
        "421611": "canonical",
        "421613": "canonical",
        "421614": "canonical",
        "490000": ["eip155", "canonical"],
        "534351": ["canonical", "eip155"],
        "534352": ["canonical", "eip155"],
        "534353": "eip155",
        "543210": ["zksync", "canonical"],
        "555666": "canonical",
        "560048": ["eip155", "canonical"],
        "622277": "canonical",
        "656476": ["eip155", "canonical"],
        "657468": ["canonical", "eip155"],
        "660279": "canonical",
        "668668": "canonical",
        "688688": "eip155",
        "695569": ["eip155", "canonical"],
        "713715": ["eip155", "canonical"],
        "747474": ["eip155", "canonical"],
        "763373": "eip155",
        "764984": "canonical",
        "808813": ["eip155", "canonical"],
        "810180": "zksync",
        "978657": "canonical",
        "4457845": "zksync",
        "6038361": ["eip155", "canonical"],
        "7225878": "eip155",
        "7777777": ["canonical", "eip155"],
        "11155111": ["eip155", "canonical"],
        "11155420": "eip155",
        "12227332": "canonical",
        "21000000": "eip155",
        "94204209": ["canonical", "eip155"],
        "111557560": ["canonical", "eip155"],
        "123420111": ["canonical", "eip155"],
        "161221135": "canonical",
        "168587773": "canonical",
        "222000222": "canonical",
        "245022926": "eip155",
        "245022934": "eip155",
        "328527624": "canonical",
        "333000333": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": ["canonical", "eip155"],
        "888888888": "canonical",
        "999999999": ["canonical", "eip155"],
        "1313161554": ["canonical", "eip155"],
        "1313161555": "canonical",
        "1511670449": "canonical",
        "1666600000": "eip155",
        "1666700000": "eip155",
        "11297108099": "canonical",
        "11297108109": "canonical",
        "37714555429": "canonical",
        "88153591557": ["canonical", "eip155"],
        "920637907288165": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "calculateCreateProxyWithNonceAddress",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          name: "createProxy",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              internalType: "contract IProxyCreationCallback",
              name: "callback",
              type: "address"
            }
          ],
          name: "createProxyWithCallback",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyRuntimeCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_proxy_factory.json
var require_safe_proxy_factory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_proxy_factory.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SafeProxyFactory",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
          codeHash: "0x50c3cdc4074750a7a974204a716c999edd37482f907608d960b2b025ee0b3317"
        },
        zksync: {
          address: "0xc329D02fd8CB2fc13aa919005aF46320794a8629",
          codeHash: "0xa4915e4a50124b5dce3c9adc34cce8108fc5dbda97d443534699621d6e0013ba"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "5": "canonical",
        "10": "canonical",
        "14": "canonical",
        "16": "canonical",
        "19": "canonical",
        "25": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "71": "canonical",
        "81": "canonical",
        "88": "canonical",
        "97": "canonical",
        "98": "canonical",
        "100": "canonical",
        "114": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "155": "canonical",
        "169": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "250": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "338": "canonical",
        "360": "canonical",
        "369": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "530": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1030": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1442": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1729": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1811": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2000": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4061": "canonical",
        "4062": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4162": "canonical",
        "4202": "canonical",
        "4337": "canonical",
        "4488": "canonical",
        "4653": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6001": "canonical",
        "6321": "canonical",
        "6322": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6688": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7171": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7771": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8192": "canonical",
        "8194": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10243": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "11235": "canonical",
        "11501": "canonical",
        "11503": "canonical",
        "13337": "canonical",
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "17069": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "35441": "canonical",
        "35443": "canonical",
        "41455": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "54211": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59140": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80085": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84531": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "90001": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "105105": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "205205": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "421614": "canonical",
        "444444": "canonical",
        "490000": "canonical",
        "534351": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "555666": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "6038361": "canonical",
        "7225878": "canonical",
        "7777777": "canonical",
        "9999999": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "52164803": "canonical",
        "65100004": "canonical",
        "94204209": "canonical",
        "111557560": "canonical",
        "123420111": "canonical",
        "168587773": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": "canonical",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1313161555": "canonical",
        "1417429182": "canonical",
        "1511670449": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical",
        "88153591557": "canonical",
        "123420000220": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createChainSpecificProxyWithNonce",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              internalType: "contract IProxyCreationCallback",
              name: "callback",
              type: "address"
            }
          ],
          name: "createProxyWithCallback",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe_proxy_factory.json
var require_safe_proxy_factory2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe_proxy_factory.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SafeProxyFactory",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x14F2982D601c9458F93bd70B218933A6f8165e7b",
          codeHash: "0x967dae4cda22b0c9ef7f31b010bdc1ceb0af9904b0c3dc060b5302e4c18a4529"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "chainId",
              type: "uint256"
            }
          ],
          name: "ChainSpecificProxyCreationL2",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "ProxyCreationL2",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createChainSpecificProxyWithNonce",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createChainSpecificProxyWithNonceL2",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonceL2",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/default_callback_handler.json
var require_default_callback_handler = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/default_callback_handler.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "DefaultCallbackHandler",
      version: "1.1.1",
      deployments: {
        canonical: {
          address: "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
          codeHash: "0x919a9f5dd111a01f7a8e4b1f5c6a972bb2d1441c67bdec71de6a09d0be92f5b9"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "4": "canonical",
        "5": "canonical",
        "42": "canonical",
        "88": "canonical",
        "100": "canonical",
        "246": "canonical",
        "369": "canonical",
        "73799": "canonical"
      },
      abi: [
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/token_callback_handler.json
var require_token_callback_handler = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/token_callback_handler.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "TokenCallbackHandler",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x54e86d004d71a8D2112ec75FaCE57D730b0433F3",
          codeHash: "0xcbc723172700efa52cc33ee26c7fc7e284edc8097f9dc307857fe525fec98cd8"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/compatibility_fallback_handler.json
var require_compatibility_fallback_handler = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/compatibility_fallback_handler.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "CompatibilityFallbackHandler",
      version: "1.3.0",
      deployments: {
        canonical: {
          address: "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
          codeHash: "0x03e69f7ce809e81687c69b19a7d7cca45b6d551ffdec73d9bb87178476de1abf"
        },
        eip155: {
          address: "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
          codeHash: "0x03e69f7ce809e81687c69b19a7d7cca45b6d551ffdec73d9bb87178476de1abf"
        },
        zksync: {
          address: "0x2f870a80647BbC554F3a0EBD093f11B4d2a7492A",
          codeHash: "0x017e9a83d5513f503fb85274f4d1ad1811040d7caa31772750ffb08638c28fbb"
        }
      },
      networkAddresses: {
        "1": ["canonical", "eip155"],
        "3": "canonical",
        "4": "canonical",
        "5": "canonical",
        "10": ["eip155", "canonical"],
        "11": "canonical",
        "12": "canonical",
        "14": "canonical",
        "16": "eip155",
        "18": "eip155",
        "19": "eip155",
        "25": ["eip155", "canonical"],
        "28": "eip155",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "42": "canonical",
        "43": ["eip155", "canonical"],
        "44": ["eip155", "canonical"],
        "46": ["eip155", "canonical"],
        "50": ["eip155", "canonical"],
        "51": ["canonical", "eip155"],
        "56": ["canonical", "eip155"],
        "57": "eip155",
        "61": "eip155",
        "63": "eip155",
        "69": "eip155",
        "71": "canonical",
        "81": "eip155",
        "82": "eip155",
        "83": ["eip155", "canonical"],
        "96": "canonical",
        "97": "canonical",
        "100": ["canonical", "eip155"],
        "106": "eip155",
        "108": "eip155",
        "109": "eip155",
        "111": "eip155",
        "114": "canonical",
        "122": "canonical",
        "123": "canonical",
        "130": ["canonical", "eip155"],
        "133": "canonical",
        "137": ["canonical", "eip155"],
        "143": ["canonical", "eip155"],
        "146": ["canonical", "eip155"],
        "148": "eip155",
        "155": "eip155",
        "169": "canonical",
        "177": "canonical",
        "179": "eip155",
        "185": "eip155",
        "195": "eip155",
        "196": ["eip155", "canonical"],
        "204": ["eip155", "canonical"],
        "232": ["zksync", "canonical", "eip155"],
        "239": ["eip155", "canonical"],
        "240": "zksync",
        "246": "canonical",
        "250": ["canonical", "eip155"],
        "252": ["eip155", "canonical"],
        "255": "eip155",
        "274": "canonical",
        "280": "zksync",
        "282": "zksync",
        "288": "eip155",
        "291": "canonical",
        "295": "canonical",
        "296": "canonical",
        "300": ["zksync", "canonical", "eip155"],
        "314": "eip155",
        "321": "canonical",
        "322": "canonical",
        "324": ["zksync", "canonical", "eip155"],
        "336": ["canonical", "eip155"],
        "338": "eip155",
        "360": ["eip155", "canonical"],
        "369": "canonical",
        "388": "zksync",
        "418": "canonical",
        "420": "eip155",
        "424": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": ["canonical", "eip155"],
        "545": "eip155",
        "570": "eip155",
        "588": "eip155",
        "592": ["canonical", "eip155"],
        "595": "eip155",
        "599": "eip155",
        "648": ["canonical", "eip155"],
        "686": "eip155",
        "690": ["eip155", "canonical"],
        "698": "canonical",
        "747": "eip155",
        "787": "eip155",
        "919": ["canonical", "eip155"],
        "943": "canonical",
        "999": ["canonical", "eip155"],
        "1001": "eip155",
        "1008": "canonical",
        "1030": "canonical",
        "1088": ["eip155", "canonical"],
        "1101": ["canonical", "eip155"],
        "1111": "eip155",
        "1112": "eip155",
        "1114": "canonical",
        "1115": "canonical",
        "1116": "canonical",
        "1135": ["canonical", "eip155"],
        "1230": "eip155",
        "1231": "eip155",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1294": "eip155",
        "1315": ["eip155", "canonical"],
        "1328": ["eip155", "canonical"],
        "1329": "canonical",
        "1337": "eip155",
        "1424": "canonical",
        "1439": "canonical",
        "1442": "eip155",
        "1480": ["eip155", "canonical"],
        "1513": ["eip155", "canonical"],
        "1514": ["eip155", "canonical"],
        "1516": ["eip155", "canonical"],
        "1559": "eip155",
        "1625": "eip155",
        "1663": "eip155",
        "1729": "canonical",
        "1740": ["eip155", "canonical"],
        "1750": ["eip155", "canonical"],
        "1807": "canonical",
        "1868": "canonical",
        "1890": "canonical",
        "1891": "canonical",
        "1923": ["canonical", "eip155"],
        "1924": ["canonical", "eip155"],
        "1946": ["canonical", "eip155"],
        "1984": "canonical",
        "1998": "canonical",
        "2001": "canonical",
        "2002": "canonical",
        "2008": "canonical",
        "2019": "canonical",
        "2020": "canonical",
        "2021": "canonical",
        "2039": ["canonical", "eip155"],
        "2187": ["canonical", "eip155"],
        "2192": ["canonical", "eip155"],
        "2201": ["canonical", "eip155"],
        "2221": ["canonical", "eip155"],
        "2222": ["canonical", "eip155"],
        "2331": "canonical",
        "2345": "canonical",
        "2358": "eip155",
        "2390": "eip155",
        "2391": ["eip155", "canonical"],
        "2741": ["zksync", "canonical", "eip155"],
        "2810": ["eip155", "canonical"],
        "2818": ["canonical", "eip155"],
        "3338": ["canonical", "eip155"],
        "3636": "eip155",
        "3637": ["canonical", "eip155"],
        "3737": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4078": "canonical",
        "4157": "eip155",
        "4158": "eip155",
        "4202": "canonical",
        "4337": "canonical",
        "4460": "canonical",
        "4653": "eip155",
        "4661": "canonical",
        "4689": "eip155",
        "4918": "canonical",
        "4919": "canonical",
        "5000": ["eip155", "canonical"],
        "5001": "eip155",
        "5003": ["eip155", "canonical"],
        "5115": ["eip155", "canonical"],
        "5165": "canonical",
        "5330": ["eip155", "canonical"],
        "5700": ["eip155", "canonical"],
        "6001": "canonical",
        "6102": "eip155",
        "6398": "eip155",
        "6880": "canonical",
        "6900": ["canonical", "eip155"],
        "6911": ["canonical", "eip155"],
        "7000": ["eip155", "canonical"],
        "7001": "eip155",
        "7070": "canonical",
        "7332": "eip155",
        "7341": "canonical",
        "7560": ["canonical", "eip155"],
        "7700": "eip155",
        "7897": ["canonical", "eip155"],
        "8008": ["canonical", "eip155"],
        "8192": "eip155",
        "8194": "eip155",
        "8217": "eip155",
        "8329": "canonical",
        "8333": "eip155",
        "8453": ["eip155", "canonical"],
        "8822": "eip155",
        "9000": ["canonical", "eip155"],
        "9001": ["canonical", "eip155"],
        "9069": "canonical",
        "9070": "canonical",
        "9728": "eip155",
        "9745": ["canonical", "eip155"],
        "9746": ["canonical", "eip155"],
        "10000": "eip155",
        "10001": "eip155",
        "10081": "eip155",
        "10200": "canonical",
        "10242": "eip155",
        "10243": "eip155",
        "10849": "canonical",
        "11011": ["eip155", "canonical"],
        "11111": "canonical",
        "11124": ["zksync", "canonical", "eip155"],
        "11235": "canonical",
        "11437": "canonical",
        "11820": "canonical",
        "11891": "canonical",
        "12324": "canonical",
        "12325": "canonical",
        "12357": "canonical",
        "12553": "canonical",
        "13337": "canonical",
        "13371": ["eip155", "canonical"],
        "13473": ["eip155", "canonical"],
        "13505": "eip155",
        "13746": ["canonical", "eip155"],
        "14800": "eip155",
        "16661": ["canonical", "eip155"],
        "17000": ["canonical", "eip155"],
        "17069": ["eip155", "canonical"],
        "17172": "eip155",
        "18231": "canonical",
        "18233": "canonical",
        "22776": "canonical",
        "23294": ["eip155", "canonical"],
        "23295": ["eip155", "canonical"],
        "25327": "eip155",
        "28802": "eip155",
        "28882": ["eip155", "canonical"],
        "28979": "canonical",
        "31611": "canonical",
        "32323": "canonical",
        "32769": "eip155",
        "32770": "eip155",
        "33101": "eip155",
        "33139": "eip155",
        "33401": "canonical",
        "34443": ["canonical", "eip155"],
        "35441": "canonical",
        "35443": "canonical",
        "37111": "zksync",
        "41455": ["canonical", "eip155"],
        "41923": "eip155",
        "42161": ["canonical", "eip155"],
        "42170": "canonical",
        "42220": ["eip155", "canonical"],
        "42793": ["eip155", "canonical"],
        "43111": ["eip155", "canonical"],
        "43113": ["canonical", "eip155"],
        "43114": ["eip155", "canonical"],
        "43288": "eip155",
        "44787": "canonical",
        "45000": "canonical",
        "47763": "canonical",
        "47805": "canonical",
        "48898": ["eip155", "canonical"],
        "48899": ["eip155", "canonical"],
        "48900": ["canonical", "eip155"],
        "50104": "zksync",
        "53456": "canonical",
        "53457": "canonical",
        "54211": "eip155",
        "56288": "eip155",
        "57000": "eip155",
        "57054": "canonical",
        "57073": ["eip155", "canonical"],
        "58008": "canonical",
        "59140": ["canonical", "eip155"],
        "59141": ["canonical", "eip155"],
        "59144": ["canonical", "eip155"],
        "60808": ["canonical", "eip155"],
        "61166": "zksync",
        "71401": "eip155",
        "71402": "eip155",
        "73799": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": ["canonical", "eip155"],
        "80084": "canonical",
        "80085": ["canonical", "eip155"],
        "80094": ["canonical", "eip155"],
        "81224": ["canonical", "eip155"],
        "81457": ["canonical", "eip155"],
        "83291": "canonical",
        "84531": "eip155",
        "84532": ["eip155", "canonical"],
        "97435": "canonical",
        "103454": "eip155",
        "111188": "canonical",
        "128123": ["eip155", "canonical"],
        "167000": ["eip155", "canonical"],
        "167008": "canonical",
        "167009": ["eip155", "canonical"],
        "175188": "canonical",
        "200101": "canonical",
        "200202": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "314159": "eip155",
        "328527": "canonical",
        "333999": "canonical",
        "421611": "canonical",
        "421613": "canonical",
        "421614": "canonical",
        "490000": ["eip155", "canonical"],
        "534351": ["canonical", "eip155"],
        "534352": ["canonical", "eip155"],
        "534353": "eip155",
        "543210": ["zksync", "canonical"],
        "555666": "canonical",
        "560048": ["eip155", "canonical"],
        "622277": "canonical",
        "656476": ["eip155", "canonical"],
        "657468": ["canonical", "eip155"],
        "660279": "canonical",
        "668668": "canonical",
        "688688": "eip155",
        "695569": ["eip155", "canonical"],
        "713715": ["eip155", "canonical"],
        "747474": ["eip155", "canonical"],
        "763373": "eip155",
        "764984": "canonical",
        "808813": ["eip155", "canonical"],
        "810180": "zksync",
        "978657": "canonical",
        "4457845": "zksync",
        "6038361": ["eip155", "canonical"],
        "7225878": "eip155",
        "7777777": ["canonical", "eip155"],
        "11155111": ["eip155", "canonical"],
        "11155420": "eip155",
        "12227332": "canonical",
        "21000000": "eip155",
        "94204209": ["canonical", "eip155"],
        "111557560": ["canonical", "eip155"],
        "123420111": ["canonical", "eip155"],
        "161221135": "canonical",
        "168587773": "canonical",
        "222000222": "canonical",
        "245022926": "eip155",
        "245022934": "eip155",
        "328527624": "canonical",
        "333000333": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": ["canonical", "eip155"],
        "888888888": "canonical",
        "999999999": ["canonical", "eip155"],
        "1313161554": ["canonical", "eip155"],
        "1313161555": "canonical",
        "1511670449": "canonical",
        "1666600000": "eip155",
        "1666700000": "eip155",
        "11297108099": "canonical",
        "11297108109": "canonical",
        "37714555429": "canonical",
        "88153591557": ["canonical", "eip155"],
        "920637907288165": "canonical"
      },
      abi: [
        {
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract GnosisSafe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHashForSafe",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "bytes",
              name: "response",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/compatibility_fallback_handler.json
var require_compatibility_fallback_handler2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/compatibility_fallback_handler.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "CompatibilityFallbackHandler",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
          codeHash: "0x7c6007a5d711cea8dfd5d91f5940ec29c7f200fe511eb1fc1397b367af3c42f9"
        },
        zksync: {
          address: "0x9301E98DD367135f21bdF66f342A249c9D5F9069",
          codeHash: "0x331ff834e83e6e1596325f04eb7d16614155e324010af21f14e9c945e7669d5f"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "5": "canonical",
        "10": "canonical",
        "14": "canonical",
        "16": "canonical",
        "19": "canonical",
        "25": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "71": "canonical",
        "81": "canonical",
        "88": "canonical",
        "97": "canonical",
        "98": "canonical",
        "100": "canonical",
        "114": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "155": "canonical",
        "169": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "250": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "338": "canonical",
        "360": "canonical",
        "369": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "530": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1030": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1442": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1729": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1811": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2000": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4061": "canonical",
        "4062": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4162": "canonical",
        "4202": "canonical",
        "4337": "canonical",
        "4488": "canonical",
        "4653": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6001": "canonical",
        "6321": "canonical",
        "6322": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6688": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7171": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7771": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8192": "canonical",
        "8194": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10243": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "11235": "canonical",
        "11501": "canonical",
        "11503": "canonical",
        "13337": "canonical",
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "17069": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "35441": "canonical",
        "35443": "canonical",
        "41455": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "54211": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59140": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80085": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84531": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "90001": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "105105": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "205205": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "421614": "canonical",
        "444444": "canonical",
        "490000": "canonical",
        "534351": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "555666": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "6038361": "canonical",
        "7225878": "canonical",
        "7777777": "canonical",
        "9999999": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "52164803": "canonical",
        "65100004": "canonical",
        "94204209": "canonical",
        "111557560": "canonical",
        "123420111": "canonical",
        "168587773": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": "canonical",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1313161555": "canonical",
        "1417429182": "canonical",
        "1511670449": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical",
        "88153591557": "canonical",
        "123420000220": "canonical"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "contract Safe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "encodeMessageDataForSafe",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract Safe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHashForSafe",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "bytes",
              name: "response",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/compatibility_fallback_handler.json
var require_compatibility_fallback_handler3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/compatibility_fallback_handler.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "CompatibilityFallbackHandler",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x3EfCBb83A4A7AfcB4F68D501E2c2203a38be77f4",
          codeHash: "0x3c6a85bcf7b563daa624b884b4e9a1b9fa5371edde7be945d998071a48f28bbc"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "contract ISafe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "encodeMessageDataForSafe",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract ISafe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHashForSafe",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "bytes",
              name: "response",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/extensible_fallback_handler.json
var require_extensible_fallback_handler = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/extensible_fallback_handler.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "ExtensibleFallbackHandler",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x85a8ca358D388530ad0fB95D0cb89Dd44Fc242c3",
          codeHash: "0xba5bafdfba82e226b6dc8ae29bedf5026bd854ab4bee00128ca322717a5f2acf"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract ISafe",
              name: "safe",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "AddedInterface",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract ISafe",
              name: "safe",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "domainSeparator",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "contract ISafeSignatureVerifier",
              name: "oldVerifier",
              type: "address"
            },
            {
              indexed: false,
              internalType: "contract ISafeSignatureVerifier",
              name: "newVerifier",
              type: "address"
            }
          ],
          name: "ChangedDomainVerifier",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract ISafe",
              name: "safe",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes4",
              name: "selector",
              type: "bytes4"
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "oldMethod",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "newMethod",
              type: "bytes32"
            }
          ],
          name: "ChangedSafeMethod",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract ISafe",
              name: "safe",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "RemovedInterface",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_interfaceId",
              type: "bytes4"
            },
            {
              internalType: "bytes32[]",
              name: "handlerWithSelectors",
              type: "bytes32[]"
            }
          ],
          name: "addSupportedInterfaceBatch",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract ISafe",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "domainVerifiers",
          outputs: [
            {
              internalType: "contract ISafeSignatureVerifier",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_hash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "magic",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_interfaceId",
              type: "bytes4"
            },
            {
              internalType: "bytes4[]",
              name: "selectors",
              type: "bytes4[]"
            }
          ],
          name: "removeSupportedInterfaceBatch",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract ISafe",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          name: "safeInterfaces",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract ISafe",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          name: "safeMethods",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "domainSeparator",
              type: "bytes32"
            },
            {
              internalType: "contract ISafeSignatureVerifier",
              name: "newVerifier",
              type: "address"
            }
          ],
          name: "setDomainVerifier",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "selector",
              type: "bytes4"
            },
            {
              internalType: "bytes32",
              name: "newMethod",
              type: "bytes32"
            }
          ],
          name: "setSafeMethod",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            },
            {
              internalType: "bool",
              name: "supported",
              type: "bool"
            }
          ],
          name: "setSupportedInterface",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/gnosis_safe.json
var require_gnosis_safe = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/gnosis_safe.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "GnosisSafe",
      version: "1.0.0",
      deployments: {
        canonical: {
          address: "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
          codeHash: "0xe1f1593df76e69abc2d692792c80f329457551d5e83dde597546a1d58764da80"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "4": "canonical",
        "5": "canonical",
        "42": "canonical",
        "100": "canonical",
        "369": "canonical"
      },
      abi: [
        {
          constant: false,
          inputs: [
            {
              name: "owner",
              type: "address"
            },
            {
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "DOMAIN_SEPARATOR_TYPEHASH",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "to",
              type: "address"
            },
            {
              name: "value",
              type: "uint256"
            },
            {
              name: "data",
              type: "bytes"
            },
            {
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "",
              type: "address"
            },
            {
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "_masterCopy",
              type: "address"
            }
          ],
          name: "changeMasterCopy",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SENTINEL_MODULES",
          outputs: [
            {
              name: "",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SENTINEL_OWNERS",
          outputs: [
            {
              name: "",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "nonce",
          outputs: [
            {
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getModules",
          outputs: [
            {
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SAFE_MSG_TYPEHASH",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SAFE_TX_TYPEHASH",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "prevModule",
              type: "address"
            },
            {
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "prevOwner",
              type: "address"
            },
            {
              name: "oldOwner",
              type: "address"
            },
            {
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "prevOwner",
              type: "address"
            },
            {
              name: "owner",
              type: "address"
            },
            {
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          payable: true,
          stateMutability: "payable",
          type: "fallback"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "txHash",
              type: "bytes32"
            }
          ],
          name: "ExecutionFailed",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "newContract",
              type: "address"
            }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          constant: false,
          inputs: [
            {
              name: "_owners",
              type: "address[]"
            },
            {
              name: "_threshold",
              type: "uint256"
            },
            {
              name: "to",
              type: "address"
            },
            {
              name: "data",
              type: "bytes"
            },
            {
              name: "paymentToken",
              type: "address"
            },
            {
              name: "payment",
              type: "uint256"
            },
            {
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "to",
              type: "address"
            },
            {
              name: "value",
              type: "uint256"
            },
            {
              name: "data",
              type: "bytes"
            },
            {
              name: "operation",
              type: "uint8"
            },
            {
              name: "safeTxGas",
              type: "uint256"
            },
            {
              name: "baseGas",
              type: "uint256"
            },
            {
              name: "gasPrice",
              type: "uint256"
            },
            {
              name: "gasToken",
              type: "address"
            },
            {
              name: "refundReceiver",
              type: "address"
            },
            {
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "to",
              type: "address"
            },
            {
              name: "value",
              type: "uint256"
            },
            {
              name: "data",
              type: "bytes"
            },
            {
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "_data",
              type: "bytes"
            },
            {
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "to",
              type: "address"
            },
            {
              name: "value",
              type: "uint256"
            },
            {
              name: "data",
              type: "bytes"
            },
            {
              name: "operation",
              type: "uint8"
            },
            {
              name: "safeTxGas",
              type: "uint256"
            },
            {
              name: "baseGas",
              type: "uint256"
            },
            {
              name: "gasPrice",
              type: "uint256"
            },
            {
              name: "gasToken",
              type: "address"
            },
            {
              name: "refundReceiver",
              type: "address"
            },
            {
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "to",
              type: "address"
            },
            {
              name: "value",
              type: "uint256"
            },
            {
              name: "data",
              type: "bytes"
            },
            {
              name: "operation",
              type: "uint8"
            },
            {
              name: "safeTxGas",
              type: "uint256"
            },
            {
              name: "baseGas",
              type: "uint256"
            },
            {
              name: "gasPrice",
              type: "uint256"
            },
            {
              name: "gasToken",
              type: "address"
            },
            {
              name: "refundReceiver",
              type: "address"
            },
            {
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/gnosis_safe.json
var require_gnosis_safe2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/gnosis_safe.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "GnosisSafe",
      version: "1.1.1",
      deployments: {
        canonical: {
          address: "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
          codeHash: "0x56b8be58b5ad629a621593a2e5e5e8e9a28408dc06e95597497b303902772e45"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "4": "canonical",
        "5": "canonical",
        "42": "canonical",
        "88": "canonical",
        "100": "canonical",
        "246": "canonical",
        "369": "canonical",
        "73799": "canonical"
      },
      abi: [
        {
          inputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "masterCopy",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          payable: true,
          stateMutability: "payable",
          type: "fallback"
        },
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_masterCopy",
              type: "address"
            }
          ],
          name: "changeMasterCopy",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.2.0/gnosis_safe.json
var require_gnosis_safe3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.2.0/gnosis_safe.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "GnosisSafe",
      version: "1.2.0",
      deployments: {
        canonical: {
          address: "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
          codeHash: "0x2ae2d1231f0d754a7fa4f5e5d0e5554085e1b500d8e09f95aaaaa3f49c0db922"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "4": "canonical",
        "5": "canonical",
        "42": "canonical",
        "88": "canonical",
        "100": "canonical",
        "246": "canonical",
        "369": "canonical",
        "73799": "canonical"
      },
      abi: [
        {
          inputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "masterCopy",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          payable: true,
          stateMutability: "payable",
          type: "fallback"
        },
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_masterCopy",
              type: "address"
            }
          ],
          name: "changeMasterCopy",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: true,
          stateMutability: "payable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe.json
var require_gnosis_safe4 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "GnosisSafe",
      version: "1.3.0",
      deployments: {
        canonical: {
          address: "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
          codeHash: "0xbba688fbdb21ad2bb58bc320638b43d94e7d100f6f3ebaab0a4e4de6304b1c2e"
        },
        eip155: {
          address: "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
          codeHash: "0xbba688fbdb21ad2bb58bc320638b43d94e7d100f6f3ebaab0a4e4de6304b1c2e"
        },
        zksync: {
          address: "0xB00ce5CCcdEf57e539ddcEd01DF43a13855d9910",
          codeHash: "0x551b7fdfd2dbcec4f785059e1ef6e0b40ca2e44d792158c4e825bc0b092f15e9"
        }
      },
      networkAddresses: {
        "1": ["canonical", "eip155"],
        "3": "canonical",
        "4": "canonical",
        "5": "canonical",
        "10": ["eip155", "canonical"],
        "11": "canonical",
        "12": "canonical",
        "14": "canonical",
        "16": "eip155",
        "18": "eip155",
        "19": "eip155",
        "25": ["eip155", "canonical"],
        "28": "eip155",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "42": "canonical",
        "43": ["eip155", "canonical"],
        "44": ["eip155", "canonical"],
        "46": ["eip155", "canonical"],
        "50": ["eip155", "canonical"],
        "51": ["canonical", "eip155"],
        "56": ["canonical", "eip155"],
        "57": "eip155",
        "61": "eip155",
        "63": "eip155",
        "69": "eip155",
        "71": "canonical",
        "81": "eip155",
        "82": "eip155",
        "83": ["eip155", "canonical"],
        "96": "canonical",
        "97": "canonical",
        "100": ["canonical", "eip155"],
        "106": "eip155",
        "108": "eip155",
        "109": "eip155",
        "111": "eip155",
        "114": "canonical",
        "122": "canonical",
        "123": "canonical",
        "130": ["canonical", "eip155"],
        "133": "canonical",
        "137": ["canonical", "eip155"],
        "143": ["canonical", "eip155"],
        "146": ["canonical", "eip155"],
        "148": "eip155",
        "155": "eip155",
        "169": "canonical",
        "177": "canonical",
        "179": "eip155",
        "185": "eip155",
        "195": "eip155",
        "196": ["eip155", "canonical"],
        "204": ["eip155", "canonical"],
        "232": ["zksync", "canonical", "eip155"],
        "239": ["eip155", "canonical"],
        "240": "zksync",
        "246": "canonical",
        "250": ["canonical", "eip155"],
        "252": ["eip155", "canonical"],
        "255": "eip155",
        "274": "canonical",
        "280": "zksync",
        "282": "zksync",
        "288": "eip155",
        "291": "canonical",
        "295": "canonical",
        "296": "canonical",
        "300": ["zksync", "canonical", "eip155"],
        "314": "eip155",
        "321": "canonical",
        "322": "canonical",
        "324": ["zksync", "canonical", "eip155"],
        "336": ["canonical", "eip155"],
        "338": "eip155",
        "360": ["eip155", "canonical"],
        "369": "canonical",
        "388": "zksync",
        "418": "canonical",
        "420": "eip155",
        "424": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": ["canonical", "eip155"],
        "545": "eip155",
        "570": "eip155",
        "588": "eip155",
        "592": ["canonical", "eip155"],
        "595": "eip155",
        "599": "eip155",
        "648": ["canonical", "eip155"],
        "686": "eip155",
        "690": ["eip155", "canonical"],
        "698": "canonical",
        "747": "eip155",
        "787": "eip155",
        "919": ["canonical", "eip155"],
        "943": "canonical",
        "999": ["canonical", "eip155"],
        "1001": "eip155",
        "1008": "canonical",
        "1030": "canonical",
        "1088": ["eip155", "canonical"],
        "1101": ["canonical", "eip155"],
        "1111": "eip155",
        "1112": "eip155",
        "1114": "canonical",
        "1115": "canonical",
        "1116": "canonical",
        "1135": ["canonical", "eip155"],
        "1230": "eip155",
        "1231": "eip155",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1294": "eip155",
        "1315": ["eip155", "canonical"],
        "1328": ["eip155", "canonical"],
        "1329": "canonical",
        "1337": "eip155",
        "1424": "canonical",
        "1439": "canonical",
        "1442": "eip155",
        "1480": ["eip155", "canonical"],
        "1513": ["eip155", "canonical"],
        "1514": ["eip155", "canonical"],
        "1516": ["eip155", "canonical"],
        "1559": "eip155",
        "1625": "eip155",
        "1663": "eip155",
        "1729": "canonical",
        "1740": ["eip155", "canonical"],
        "1750": ["eip155", "canonical"],
        "1807": "canonical",
        "1868": "canonical",
        "1890": "canonical",
        "1891": "canonical",
        "1923": ["canonical", "eip155"],
        "1924": ["canonical", "eip155"],
        "1946": ["canonical", "eip155"],
        "1984": "canonical",
        "1998": "canonical",
        "2001": "canonical",
        "2002": "canonical",
        "2008": "canonical",
        "2019": "canonical",
        "2020": "canonical",
        "2021": "canonical",
        "2039": ["canonical", "eip155"],
        "2187": ["canonical", "eip155"],
        "2192": ["canonical", "eip155"],
        "2201": ["canonical", "eip155"],
        "2221": ["canonical", "eip155"],
        "2222": ["canonical", "eip155"],
        "2331": "canonical",
        "2345": "canonical",
        "2358": "eip155",
        "2390": "eip155",
        "2391": ["eip155", "canonical"],
        "2741": ["zksync", "canonical", "eip155"],
        "2810": ["eip155", "canonical"],
        "2818": ["canonical", "eip155"],
        "3338": ["canonical", "eip155"],
        "3636": "eip155",
        "3637": ["canonical", "eip155"],
        "3737": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4078": "canonical",
        "4157": "eip155",
        "4158": "eip155",
        "4202": "canonical",
        "4337": "canonical",
        "4460": "canonical",
        "4653": "eip155",
        "4661": "canonical",
        "4689": "eip155",
        "4918": "canonical",
        "4919": "canonical",
        "5000": ["eip155", "canonical"],
        "5001": "eip155",
        "5003": ["eip155", "canonical"],
        "5115": ["eip155", "canonical"],
        "5165": "canonical",
        "5330": ["eip155", "canonical"],
        "5700": ["eip155", "canonical"],
        "6001": "canonical",
        "6102": "eip155",
        "6398": "eip155",
        "6880": "canonical",
        "6900": ["canonical", "eip155"],
        "6911": ["canonical", "eip155"],
        "7000": ["eip155", "canonical"],
        "7001": "eip155",
        "7070": "canonical",
        "7332": "eip155",
        "7341": "canonical",
        "7560": ["canonical", "eip155"],
        "7700": "eip155",
        "7897": ["canonical", "eip155"],
        "8008": ["canonical", "eip155"],
        "8192": "eip155",
        "8194": "eip155",
        "8217": "eip155",
        "8329": "canonical",
        "8333": "eip155",
        "8453": ["eip155", "canonical"],
        "8822": "eip155",
        "9000": ["canonical", "eip155"],
        "9001": ["canonical", "eip155"],
        "9069": "canonical",
        "9070": "canonical",
        "9728": "eip155",
        "9745": ["canonical", "eip155"],
        "9746": ["canonical", "eip155"],
        "10000": "eip155",
        "10001": "eip155",
        "10081": "eip155",
        "10200": "canonical",
        "10242": "eip155",
        "10243": "eip155",
        "10849": "canonical",
        "11011": ["eip155", "canonical"],
        "11111": "canonical",
        "11124": ["zksync", "canonical", "eip155"],
        "11235": "canonical",
        "11437": "canonical",
        "11820": "canonical",
        "11891": "canonical",
        "12324": "canonical",
        "12325": "canonical",
        "12357": "canonical",
        "12553": "canonical",
        "13337": "canonical",
        "13371": ["eip155", "canonical"],
        "13473": ["eip155", "canonical"],
        "13505": "eip155",
        "13746": ["canonical", "eip155"],
        "14800": "eip155",
        "16661": ["canonical", "eip155"],
        "17000": ["canonical", "eip155"],
        "17069": ["eip155", "canonical"],
        "17172": "eip155",
        "18231": "canonical",
        "18233": "canonical",
        "22776": "canonical",
        "23294": ["eip155", "canonical"],
        "23295": ["eip155", "canonical"],
        "25327": "eip155",
        "28802": "eip155",
        "28882": ["eip155", "canonical"],
        "28979": "canonical",
        "31611": "canonical",
        "32323": "canonical",
        "32769": "eip155",
        "32770": "eip155",
        "33101": "eip155",
        "33139": "eip155",
        "33401": "canonical",
        "34443": ["canonical", "eip155"],
        "35441": "canonical",
        "35443": "canonical",
        "37111": "zksync",
        "41455": ["canonical", "eip155"],
        "41923": "eip155",
        "42161": ["canonical", "eip155"],
        "42170": "canonical",
        "42220": ["eip155", "canonical"],
        "42793": ["eip155", "canonical"],
        "43111": ["eip155", "canonical"],
        "43113": ["canonical", "eip155"],
        "43114": ["eip155", "canonical"],
        "43288": "eip155",
        "44787": "canonical",
        "45000": "canonical",
        "47763": "canonical",
        "47805": "canonical",
        "48898": ["eip155", "canonical"],
        "48899": ["eip155", "canonical"],
        "48900": ["canonical", "eip155"],
        "50104": "zksync",
        "53456": "canonical",
        "53457": "canonical",
        "54211": "eip155",
        "56288": "eip155",
        "57000": "eip155",
        "57054": "canonical",
        "57073": ["eip155", "canonical"],
        "58008": "canonical",
        "59140": ["canonical", "eip155"],
        "59141": ["canonical", "eip155"],
        "59144": ["canonical", "eip155"],
        "60808": ["canonical", "eip155"],
        "61166": "zksync",
        "71401": "eip155",
        "71402": "eip155",
        "73799": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": ["canonical", "eip155"],
        "80084": "canonical",
        "80085": ["canonical", "eip155"],
        "80094": ["canonical", "eip155"],
        "81224": ["canonical", "eip155"],
        "81457": ["canonical", "eip155"],
        "83291": "canonical",
        "84531": "eip155",
        "84532": ["eip155", "canonical"],
        "97435": "canonical",
        "103454": "eip155",
        "111188": "canonical",
        "128123": ["eip155", "canonical"],
        "167000": ["eip155", "canonical"],
        "167008": "canonical",
        "167009": ["eip155", "canonical"],
        "175188": "canonical",
        "200101": "canonical",
        "200202": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "314159": "eip155",
        "328527": "canonical",
        "333999": "canonical",
        "421611": "canonical",
        "421613": "canonical",
        "421614": "canonical",
        "490000": ["eip155", "canonical"],
        "534351": ["canonical", "eip155"],
        "534352": ["canonical", "eip155"],
        "534353": "eip155",
        "543210": ["zksync", "canonical"],
        "555666": "canonical",
        "560048": ["eip155", "canonical"],
        "622277": "canonical",
        "656476": ["eip155", "canonical"],
        "657468": ["canonical", "eip155"],
        "660279": "canonical",
        "668668": "canonical",
        "688688": "eip155",
        "695569": ["eip155", "canonical"],
        "713715": ["eip155", "canonical"],
        "747474": ["eip155", "canonical"],
        "763373": "eip155",
        "764984": "canonical",
        "808813": ["eip155", "canonical"],
        "810180": "zksync",
        "978657": "canonical",
        "4457845": "zksync",
        "6038361": ["eip155", "canonical"],
        "7225878": "eip155",
        "7777777": ["canonical", "eip155"],
        "11155111": ["eip155", "canonical"],
        "11155420": "eip155",
        "12227332": "canonical",
        "21000000": "eip155",
        "94204209": ["canonical", "eip155"],
        "111557560": ["canonical", "eip155"],
        "123420111": ["canonical", "eip155"],
        "161221135": "canonical",
        "168587773": "canonical",
        "222000222": "canonical",
        "245022926": "eip155",
        "245022934": "eip155",
        "328527624": "canonical",
        "333000333": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": ["canonical", "eip155"],
        "888888888": "canonical",
        "999999999": ["canonical", "eip155"],
        "1313161554": ["canonical", "eip155"],
        "1313161555": "canonical",
        "1511670449": "canonical",
        "1666600000": "eip155",
        "1666700000": "eip155",
        "11297108099": "canonical",
        "11297108109": "canonical",
        "37714555429": "canonical",
        "88153591557": ["canonical", "eip155"],
        "920637907288165": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe.json
var require_safe = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "Safe",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0x41675C099F32341bf84BFc5382aF534df5C7461a",
          codeHash: "0x1fe2df852ba3299d6534ef416eefa406e56ced995bca886ab7a553e6d0c5e1c4"
        },
        zksync: {
          address: "0xC35F063962328aC65cED5D4c3fC5dEf8dec68dFa",
          codeHash: "0xfa4d4fc0fa9f1a061571a3f3f66502464edf1a519ab1ab93dc232addf4fbe30f"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "5": "canonical",
        "10": "canonical",
        "14": "canonical",
        "16": "canonical",
        "19": "canonical",
        "25": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "71": "canonical",
        "81": "canonical",
        "88": "canonical",
        "97": "canonical",
        "98": "canonical",
        "100": "canonical",
        "114": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "155": "canonical",
        "169": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "250": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "338": "canonical",
        "360": "canonical",
        "369": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "530": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1030": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1442": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1729": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1811": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2000": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4061": "canonical",
        "4062": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4162": "canonical",
        "4202": "canonical",
        "4337": "canonical",
        "4488": "canonical",
        "4653": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6001": "canonical",
        "6321": "canonical",
        "6322": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6688": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7171": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7771": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8192": "canonical",
        "8194": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10243": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "11235": "canonical",
        "11501": "canonical",
        "11503": "canonical",
        "13337": "canonical",
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "17069": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "35441": "canonical",
        "35443": "canonical",
        "41455": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "54211": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59140": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80085": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84531": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "90001": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "105105": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "205205": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "421614": "canonical",
        "444444": "canonical",
        "490000": "canonical",
        "534351": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "555666": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "6038361": "canonical",
        "7225878": "canonical",
        "7777777": "canonical",
        "9999999": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "52164803": "canonical",
        "65100004": "canonical",
        "94204209": "canonical",
        "111557560": "canonical",
        "123420111": "canonical",
        "168587773": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": "canonical",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1313161555": "canonical",
        "1417429182": "canonical",
        "1511670449": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical",
        "88153591557": "canonical",
        "123420000220": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe.json
var require_safe2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "Safe",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0xFf51A5898e281Db6DfC7855790607438dF2ca44b",
          codeHash: "0xdda019cbd7c867a533a2a86e5c53434fdc50b13122b5a5ddb4a8df61b31c20f2"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "moduleGuard",
              type: "address"
            }
          ],
          name: "ChangedModuleGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "executor",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "executor",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "moduleGuard",
              type: "address"
            }
          ],
          name: "setModuleGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe_l2.json
var require_gnosis_safe_l2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe_l2.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "GnosisSafeL2",
      version: "1.3.0",
      deployments: {
        canonical: {
          address: "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
          codeHash: "0x21842597390c4c6e3c1239e434a682b054bd9548eee5e9b1d6a4482731023c0f"
        },
        eip155: {
          address: "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
          codeHash: "0x21842597390c4c6e3c1239e434a682b054bd9548eee5e9b1d6a4482731023c0f"
        },
        zksync: {
          address: "0x1727c2c531cf966f902E5927b98490fDFb3b2b70",
          codeHash: "0xe2ca068330339d608367d83a0b25545efe39e619098597699ab8ff828cb1ddd8"
        }
      },
      networkAddresses: {
        "1": ["canonical", "eip155"],
        "3": "canonical",
        "4": "canonical",
        "5": "canonical",
        "10": ["eip155", "canonical"],
        "11": "canonical",
        "12": "canonical",
        "14": "canonical",
        "16": "eip155",
        "18": "eip155",
        "19": "eip155",
        "25": ["eip155", "canonical"],
        "28": "eip155",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "42": "canonical",
        "43": ["eip155", "canonical"],
        "44": ["eip155", "canonical"],
        "46": ["eip155", "canonical"],
        "50": ["eip155", "canonical"],
        "51": ["canonical", "eip155"],
        "56": ["canonical", "eip155"],
        "57": "eip155",
        "61": "eip155",
        "63": "eip155",
        "69": "eip155",
        "71": "canonical",
        "81": "eip155",
        "82": "eip155",
        "83": ["eip155", "canonical"],
        "96": "canonical",
        "97": "canonical",
        "100": ["canonical", "eip155"],
        "106": "eip155",
        "108": "eip155",
        "109": "eip155",
        "111": "eip155",
        "114": "canonical",
        "122": "canonical",
        "123": "canonical",
        "130": ["canonical", "eip155"],
        "133": "canonical",
        "137": ["canonical", "eip155"],
        "143": ["canonical", "eip155"],
        "146": ["canonical", "eip155"],
        "148": "eip155",
        "155": "eip155",
        "169": "canonical",
        "177": "canonical",
        "179": "eip155",
        "185": "eip155",
        "195": "eip155",
        "196": ["eip155", "canonical"],
        "204": ["eip155", "canonical"],
        "232": ["zksync", "canonical", "eip155"],
        "239": ["eip155", "canonical"],
        "240": "zksync",
        "246": "canonical",
        "250": ["canonical", "eip155"],
        "252": ["eip155", "canonical"],
        "255": "eip155",
        "274": "canonical",
        "280": "zksync",
        "282": "zksync",
        "288": "eip155",
        "291": "canonical",
        "295": "canonical",
        "296": "canonical",
        "300": ["zksync", "canonical", "eip155"],
        "314": "eip155",
        "321": "canonical",
        "322": "canonical",
        "324": ["zksync", "canonical", "eip155"],
        "336": ["canonical", "eip155"],
        "338": "eip155",
        "360": ["eip155", "canonical"],
        "369": "canonical",
        "388": "zksync",
        "418": "canonical",
        "420": "eip155",
        "424": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": ["canonical", "eip155"],
        "545": "eip155",
        "570": "eip155",
        "588": "eip155",
        "592": ["canonical", "eip155"],
        "595": "eip155",
        "599": "eip155",
        "648": ["canonical", "eip155"],
        "686": "eip155",
        "690": ["eip155", "canonical"],
        "698": "canonical",
        "747": "eip155",
        "787": "eip155",
        "919": ["canonical", "eip155"],
        "943": "canonical",
        "999": ["canonical", "eip155"],
        "1001": "eip155",
        "1008": "canonical",
        "1030": "canonical",
        "1088": ["eip155", "canonical"],
        "1101": ["canonical", "eip155"],
        "1111": "eip155",
        "1112": "eip155",
        "1114": "canonical",
        "1115": "canonical",
        "1116": "canonical",
        "1135": ["canonical", "eip155"],
        "1230": "eip155",
        "1231": "eip155",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1294": "eip155",
        "1315": ["eip155", "canonical"],
        "1328": ["eip155", "canonical"],
        "1329": "canonical",
        "1337": "eip155",
        "1424": "canonical",
        "1439": "canonical",
        "1442": "eip155",
        "1480": ["eip155", "canonical"],
        "1513": ["eip155", "canonical"],
        "1514": ["eip155", "canonical"],
        "1516": ["eip155", "canonical"],
        "1559": "eip155",
        "1625": "eip155",
        "1663": "eip155",
        "1729": "canonical",
        "1740": ["eip155", "canonical"],
        "1750": ["eip155", "canonical"],
        "1807": "canonical",
        "1868": "canonical",
        "1890": "canonical",
        "1891": "canonical",
        "1923": ["canonical", "eip155"],
        "1924": ["canonical", "eip155"],
        "1946": ["canonical", "eip155"],
        "1984": "canonical",
        "1998": "canonical",
        "2001": "canonical",
        "2002": "canonical",
        "2008": "canonical",
        "2019": "canonical",
        "2020": "canonical",
        "2021": "canonical",
        "2039": ["canonical", "eip155"],
        "2187": ["canonical", "eip155"],
        "2192": ["canonical", "eip155"],
        "2201": ["canonical", "eip155"],
        "2221": ["canonical", "eip155"],
        "2222": ["canonical", "eip155"],
        "2331": "canonical",
        "2345": "canonical",
        "2358": "eip155",
        "2390": "eip155",
        "2391": ["eip155", "canonical"],
        "2741": ["zksync", "canonical", "eip155"],
        "2810": ["eip155", "canonical"],
        "2818": ["canonical", "eip155"],
        "3338": ["canonical", "eip155"],
        "3636": "eip155",
        "3637": ["canonical", "eip155"],
        "3737": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4078": "canonical",
        "4157": "eip155",
        "4158": "eip155",
        "4202": "canonical",
        "4337": "canonical",
        "4460": "canonical",
        "4653": "eip155",
        "4661": "canonical",
        "4689": "eip155",
        "4918": "canonical",
        "4919": "canonical",
        "5000": ["eip155", "canonical"],
        "5001": "eip155",
        "5003": ["eip155", "canonical"],
        "5115": ["eip155", "canonical"],
        "5165": "canonical",
        "5330": ["eip155", "canonical"],
        "5700": ["eip155", "canonical"],
        "6001": "canonical",
        "6102": "eip155",
        "6398": "eip155",
        "6880": "canonical",
        "6900": ["canonical", "eip155"],
        "6911": ["canonical", "eip155"],
        "7000": ["eip155", "canonical"],
        "7001": "eip155",
        "7070": "canonical",
        "7332": "eip155",
        "7341": "canonical",
        "7560": ["canonical", "eip155"],
        "7700": "eip155",
        "7897": ["canonical", "eip155"],
        "8008": ["canonical", "eip155"],
        "8192": "eip155",
        "8194": "eip155",
        "8217": "eip155",
        "8329": "canonical",
        "8333": "eip155",
        "8453": ["eip155", "canonical"],
        "8822": "eip155",
        "9000": ["canonical", "eip155"],
        "9001": ["canonical", "eip155"],
        "9069": "canonical",
        "9070": "canonical",
        "9728": "eip155",
        "9745": ["canonical", "eip155"],
        "9746": ["canonical", "eip155"],
        "10000": "eip155",
        "10001": "eip155",
        "10081": "eip155",
        "10200": "canonical",
        "10242": "eip155",
        "10243": "eip155",
        "10849": "canonical",
        "11011": ["eip155", "canonical"],
        "11111": "canonical",
        "11124": ["zksync", "canonical", "eip155"],
        "11235": "canonical",
        "11437": "canonical",
        "11820": "canonical",
        "11891": "canonical",
        "12324": "canonical",
        "12325": "canonical",
        "12357": "canonical",
        "12553": "canonical",
        "13337": "canonical",
        "13371": ["eip155", "canonical"],
        "13473": ["eip155", "canonical"],
        "13505": "eip155",
        "13746": ["canonical", "eip155"],
        "14800": "eip155",
        "16661": ["canonical", "eip155"],
        "17000": ["canonical", "eip155"],
        "17069": ["eip155", "canonical"],
        "17172": "eip155",
        "18231": "canonical",
        "18233": "canonical",
        "22776": "canonical",
        "23294": ["eip155", "canonical"],
        "23295": ["eip155", "canonical"],
        "25327": "eip155",
        "28802": "eip155",
        "28882": ["eip155", "canonical"],
        "28979": "canonical",
        "31611": "canonical",
        "32323": "canonical",
        "32769": "eip155",
        "32770": "eip155",
        "33101": "eip155",
        "33139": "eip155",
        "33401": "canonical",
        "34443": ["canonical", "eip155"],
        "35441": "canonical",
        "35443": "canonical",
        "37111": "zksync",
        "41455": ["canonical", "eip155"],
        "41923": "eip155",
        "42161": ["canonical", "eip155"],
        "42170": "canonical",
        "42220": ["eip155", "canonical"],
        "42793": ["eip155", "canonical"],
        "43111": ["eip155", "canonical"],
        "43113": ["canonical", "eip155"],
        "43114": ["eip155", "canonical"],
        "43288": "eip155",
        "44787": "canonical",
        "45000": "canonical",
        "47763": "canonical",
        "47805": "canonical",
        "48898": ["eip155", "canonical"],
        "48899": ["eip155", "canonical"],
        "48900": ["canonical", "eip155"],
        "50104": "zksync",
        "53456": "canonical",
        "53457": "canonical",
        "54211": "eip155",
        "56288": "eip155",
        "57000": "eip155",
        "57054": "canonical",
        "57073": ["eip155", "canonical"],
        "58008": "canonical",
        "59140": ["canonical", "eip155"],
        "59141": ["canonical", "eip155"],
        "59144": ["canonical", "eip155"],
        "60808": ["canonical", "eip155"],
        "61166": "zksync",
        "71401": "eip155",
        "71402": "eip155",
        "73799": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": ["canonical", "eip155"],
        "80084": "canonical",
        "80085": ["canonical", "eip155"],
        "80094": ["canonical", "eip155"],
        "81224": ["canonical", "eip155"],
        "81457": ["canonical", "eip155"],
        "83291": "canonical",
        "84531": "eip155",
        "84532": ["eip155", "canonical"],
        "97435": "canonical",
        "103454": "eip155",
        "111188": "canonical",
        "128123": ["eip155", "canonical"],
        "167000": ["eip155", "canonical"],
        "167008": "canonical",
        "167009": ["eip155", "canonical"],
        "175188": "canonical",
        "200101": "canonical",
        "200202": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "314159": "eip155",
        "328527": "canonical",
        "333999": "canonical",
        "421611": "canonical",
        "421613": "canonical",
        "421614": "canonical",
        "490000": ["eip155", "canonical"],
        "534351": ["canonical", "eip155"],
        "534352": ["canonical", "eip155"],
        "534353": "eip155",
        "543210": ["zksync", "canonical"],
        "555666": "canonical",
        "560048": ["eip155", "canonical"],
        "622277": "canonical",
        "656476": ["eip155", "canonical"],
        "657468": ["canonical", "eip155"],
        "660279": "canonical",
        "668668": "canonical",
        "688688": "eip155",
        "695569": ["eip155", "canonical"],
        "713715": ["eip155", "canonical"],
        "747474": ["eip155", "canonical"],
        "763373": "eip155",
        "764984": "canonical",
        "808813": ["eip155", "canonical"],
        "810180": "zksync",
        "978657": "canonical",
        "4457845": "zksync",
        "6038361": ["eip155", "canonical"],
        "7225878": "eip155",
        "7777777": ["canonical", "eip155"],
        "11155111": ["eip155", "canonical"],
        "11155420": "eip155",
        "12227332": "canonical",
        "21000000": "eip155",
        "94204209": ["canonical", "eip155"],
        "111557560": ["canonical", "eip155"],
        "123420111": ["canonical", "eip155"],
        "161221135": "canonical",
        "168587773": "canonical",
        "222000222": "canonical",
        "245022926": "eip155",
        "245022934": "eip155",
        "328527624": "canonical",
        "333000333": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": ["canonical", "eip155"],
        "888888888": "canonical",
        "999999999": ["canonical", "eip155"],
        "1313161554": ["canonical", "eip155"],
        "1313161555": "canonical",
        "1511670449": "canonical",
        "1666600000": "eip155",
        "1666700000": "eip155",
        "11297108099": "canonical",
        "11297108109": "canonical",
        "37714555429": "canonical",
        "88153591557": ["canonical", "eip155"],
        "920637907288165": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "SafeModuleTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "additionalInfo",
              type: "bytes"
            }
          ],
          name: "SafeMultiSigTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_l2.json
var require_safe_l2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_l2.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SafeL2",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
          codeHash: "0xb1f926978a0f44a2c0ec8fe822418ae969bd8c3f18d61e5103100339894f81ff"
        },
        zksync: {
          address: "0x610fcA2e0279Fa1F8C00c8c2F71dF522AD469380",
          codeHash: "0x520462ebe1156cd2d37b1d470c57f23e12fe0c4cda4c62502d96e03fa0cb44da"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "5": "canonical",
        "10": "canonical",
        "14": "canonical",
        "16": "canonical",
        "19": "canonical",
        "25": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "71": "canonical",
        "81": "canonical",
        "88": "canonical",
        "97": "canonical",
        "98": "canonical",
        "100": "canonical",
        "114": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "155": "canonical",
        "169": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "250": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "338": "canonical",
        "360": "canonical",
        "369": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "530": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1030": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1442": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1729": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1811": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2000": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4061": "canonical",
        "4062": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4162": "canonical",
        "4202": "canonical",
        "4337": "canonical",
        "4488": "canonical",
        "4653": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6001": "canonical",
        "6321": "canonical",
        "6322": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6688": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7171": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7771": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8192": "canonical",
        "8194": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10243": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "11235": "canonical",
        "11501": "canonical",
        "11503": "canonical",
        "13337": "canonical",
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "17069": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "35441": "canonical",
        "35443": "canonical",
        "41455": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "54211": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59140": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80085": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84531": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "90001": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "105105": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "205205": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "421614": "canonical",
        "444444": "canonical",
        "490000": "canonical",
        "534351": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "555666": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "6038361": "canonical",
        "7225878": "canonical",
        "7777777": "canonical",
        "9999999": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "52164803": "canonical",
        "65100004": "canonical",
        "94204209": "canonical",
        "111557560": "canonical",
        "123420111": "canonical",
        "168587773": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": "canonical",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1313161555": "canonical",
        "1417429182": "canonical",
        "1511670449": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical",
        "88153591557": "canonical",
        "123420000220": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "SafeModuleTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "additionalInfo",
              type: "bytes"
            }
          ],
          name: "SafeMultiSigTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe_l2.json
var require_safe_l22 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe_l2.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SafeL2",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0xEdd160fEBBD92E350D4D398fb636302fccd67C7e",
          codeHash: "0x180193227186ccb85316c94db1f0d156ed932b14712cfaac78901899178572dc"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "moduleGuard",
              type: "address"
            }
          ],
          name: "ChangedModuleGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "SafeModuleTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "additionalInfo",
              type: "bytes"
            }
          ],
          name: "SafeMultiSigTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "executor",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "executor",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "moduleGuard",
              type: "address"
            }
          ],
          name: "setModuleGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/multi_send.json
var require_multi_send = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/multi_send.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "MultiSend",
      version: "1.1.1",
      deployments: {
        canonical: {
          address: "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
          codeHash: "0xe4e9b4d4c1e3ff06cd51afe0b51eb1b22c0bab51eab38d428ee74540a5ff603e"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "4": "canonical",
        "5": "canonical",
        "42": "canonical",
        "88": "canonical",
        "100": "canonical",
        "246": "canonical",
        "369": "canonical",
        "73799": "canonical"
      },
      abi: [
        {
          inputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send.json
var require_multi_send2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "MultiSend",
      version: "1.3.0",
      deployments: {
        canonical: {
          address: "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
          codeHash: "0x0208282bd262360d0320862c5ac70f375f5ed3b9d89a83a615b4d398415bdc83"
        },
        eip155: {
          address: "0x998739BFdAAdde7C933B942a68053933098f9EDa",
          codeHash: "0x81db0e4afdf5178583537b58c5ad403bd47a4ac7f9bde2442ef3e341d433126a"
        },
        zksync: {
          address: "0x0dFcccB95225ffB03c6FBB2559B530C2B7C8A912",
          codeHash: "0xd9aa004a59b3738a108e747e578ae409b84e9f3ffd689d81b10f4d96000c5f5c"
        }
      },
      networkAddresses: {
        "1": ["canonical", "eip155"],
        "3": "canonical",
        "4": "canonical",
        "5": "canonical",
        "10": ["eip155", "canonical"],
        "11": "canonical",
        "12": "canonical",
        "14": "canonical",
        "16": "eip155",
        "18": "eip155",
        "19": "eip155",
        "25": ["eip155", "canonical"],
        "28": "eip155",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "42": "canonical",
        "43": ["eip155", "canonical"],
        "44": ["eip155", "canonical"],
        "46": ["eip155", "canonical"],
        "50": ["eip155", "canonical"],
        "51": ["canonical", "eip155"],
        "56": ["canonical", "eip155"],
        "57": "eip155",
        "61": "eip155",
        "63": "eip155",
        "69": "eip155",
        "71": "canonical",
        "81": "eip155",
        "82": "eip155",
        "83": ["eip155", "canonical"],
        "96": "canonical",
        "97": "canonical",
        "100": ["canonical", "eip155"],
        "106": "eip155",
        "108": "eip155",
        "109": "eip155",
        "111": "eip155",
        "114": "canonical",
        "122": "canonical",
        "123": "canonical",
        "130": ["canonical", "eip155"],
        "133": "canonical",
        "137": ["canonical", "eip155"],
        "143": ["canonical", "eip155"],
        "146": ["canonical", "eip155"],
        "148": "eip155",
        "155": "eip155",
        "169": "canonical",
        "177": "canonical",
        "179": "eip155",
        "185": "eip155",
        "195": "eip155",
        "196": ["eip155", "canonical"],
        "204": ["eip155", "canonical"],
        "232": ["zksync", "canonical", "eip155"],
        "239": ["eip155", "canonical"],
        "240": "zksync",
        "246": "canonical",
        "250": ["canonical", "eip155"],
        "252": ["eip155", "canonical"],
        "255": "eip155",
        "274": "canonical",
        "280": "zksync",
        "282": "zksync",
        "288": "eip155",
        "291": "canonical",
        "295": "canonical",
        "296": "canonical",
        "300": ["zksync", "canonical", "eip155"],
        "314": "eip155",
        "321": "canonical",
        "322": "canonical",
        "324": ["zksync", "canonical", "eip155"],
        "336": ["canonical", "eip155"],
        "338": "eip155",
        "360": ["eip155", "canonical"],
        "369": "canonical",
        "388": "zksync",
        "418": "canonical",
        "420": "eip155",
        "424": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": ["canonical", "eip155"],
        "545": "eip155",
        "570": "eip155",
        "588": "eip155",
        "592": ["canonical", "eip155"],
        "595": "eip155",
        "599": "eip155",
        "648": ["canonical", "eip155"],
        "686": "eip155",
        "690": ["eip155", "canonical"],
        "698": "canonical",
        "747": "eip155",
        "787": "eip155",
        "919": ["canonical", "eip155"],
        "943": "canonical",
        "999": ["canonical", "eip155"],
        "1001": "eip155",
        "1008": "canonical",
        "1030": "canonical",
        "1088": ["eip155", "canonical"],
        "1101": ["canonical", "eip155"],
        "1111": "eip155",
        "1112": "eip155",
        "1114": "canonical",
        "1115": "canonical",
        "1116": "canonical",
        "1135": ["canonical", "eip155"],
        "1230": "eip155",
        "1231": "eip155",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1294": "eip155",
        "1315": ["eip155", "canonical"],
        "1328": ["eip155", "canonical"],
        "1329": "canonical",
        "1337": "eip155",
        "1424": "canonical",
        "1439": "canonical",
        "1442": "eip155",
        "1480": ["eip155", "canonical"],
        "1513": ["eip155", "canonical"],
        "1514": ["eip155", "canonical"],
        "1516": ["eip155", "canonical"],
        "1559": "eip155",
        "1625": "eip155",
        "1663": "eip155",
        "1729": "canonical",
        "1740": ["eip155", "canonical"],
        "1750": ["eip155", "canonical"],
        "1807": "canonical",
        "1868": "canonical",
        "1890": "canonical",
        "1891": "canonical",
        "1923": ["canonical", "eip155"],
        "1924": ["canonical", "eip155"],
        "1946": ["canonical", "eip155"],
        "1984": "canonical",
        "1998": "canonical",
        "2001": "canonical",
        "2002": "canonical",
        "2008": "canonical",
        "2019": "canonical",
        "2020": "canonical",
        "2021": "canonical",
        "2039": ["canonical", "eip155"],
        "2187": ["canonical", "eip155"],
        "2192": ["canonical", "eip155"],
        "2201": ["canonical", "eip155"],
        "2221": ["canonical", "eip155"],
        "2222": ["canonical", "eip155"],
        "2331": "canonical",
        "2345": "canonical",
        "2358": "eip155",
        "2390": "eip155",
        "2391": ["eip155", "canonical"],
        "2741": ["zksync", "canonical", "eip155"],
        "2810": ["eip155", "canonical"],
        "2818": ["canonical", "eip155"],
        "3338": ["canonical", "eip155"],
        "3636": "eip155",
        "3637": ["canonical", "eip155"],
        "3737": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4078": "canonical",
        "4157": "eip155",
        "4158": "eip155",
        "4202": "canonical",
        "4337": "canonical",
        "4460": "canonical",
        "4653": "eip155",
        "4661": "canonical",
        "4689": "eip155",
        "4918": "canonical",
        "4919": "canonical",
        "5000": ["eip155", "canonical"],
        "5001": "eip155",
        "5003": ["eip155", "canonical"],
        "5115": ["eip155", "canonical"],
        "5165": "canonical",
        "5330": ["eip155", "canonical"],
        "5700": ["eip155", "canonical"],
        "6001": "canonical",
        "6102": "eip155",
        "6398": "eip155",
        "6880": "canonical",
        "6900": ["canonical", "eip155"],
        "6911": ["canonical", "eip155"],
        "7000": ["eip155", "canonical"],
        "7001": "eip155",
        "7070": "canonical",
        "7332": "eip155",
        "7341": "canonical",
        "7560": ["canonical", "eip155"],
        "7700": "eip155",
        "7897": ["canonical", "eip155"],
        "8008": ["canonical", "eip155"],
        "8192": "eip155",
        "8194": "eip155",
        "8217": "eip155",
        "8329": "canonical",
        "8333": "eip155",
        "8453": ["eip155", "canonical"],
        "8822": "eip155",
        "9000": ["canonical", "eip155"],
        "9001": ["canonical", "eip155"],
        "9069": "canonical",
        "9070": "canonical",
        "9728": "eip155",
        "9745": ["canonical", "eip155"],
        "9746": ["canonical", "eip155"],
        "10000": "eip155",
        "10001": "eip155",
        "10081": "eip155",
        "10200": "canonical",
        "10242": "eip155",
        "10243": "eip155",
        "10849": "canonical",
        "11011": ["eip155", "canonical"],
        "11111": "canonical",
        "11124": ["zksync", "canonical", "eip155"],
        "11235": "canonical",
        "11437": "canonical",
        "11820": "canonical",
        "11891": "canonical",
        "12324": "canonical",
        "12325": "canonical",
        "12357": "canonical",
        "12553": "canonical",
        "13337": "canonical",
        "13371": ["eip155", "canonical"],
        "13473": ["eip155", "canonical"],
        "13505": "eip155",
        "13746": ["canonical", "eip155"],
        "14800": "eip155",
        "16661": ["canonical", "eip155"],
        "17000": ["canonical", "eip155"],
        "17069": ["eip155", "canonical"],
        "17172": "eip155",
        "18231": "canonical",
        "18233": "canonical",
        "22776": "canonical",
        "23294": ["eip155", "canonical"],
        "23295": ["eip155", "canonical"],
        "25327": "eip155",
        "28802": "eip155",
        "28882": ["eip155", "canonical"],
        "28979": "canonical",
        "31611": "canonical",
        "32323": "canonical",
        "32769": "eip155",
        "32770": "eip155",
        "33101": "eip155",
        "33139": "eip155",
        "33401": "canonical",
        "34443": ["canonical", "eip155"],
        "35441": "canonical",
        "35443": "canonical",
        "37111": "zksync",
        "41455": ["canonical", "eip155"],
        "41923": "eip155",
        "42161": ["canonical", "eip155"],
        "42170": "canonical",
        "42220": ["eip155", "canonical"],
        "42793": ["eip155", "canonical"],
        "43111": ["eip155", "canonical"],
        "43113": ["canonical", "eip155"],
        "43114": ["eip155", "canonical"],
        "43288": "eip155",
        "44787": "canonical",
        "45000": "canonical",
        "47763": "canonical",
        "47805": "canonical",
        "48898": ["eip155", "canonical"],
        "48899": ["eip155", "canonical"],
        "48900": ["canonical", "eip155"],
        "50104": "zksync",
        "53456": "canonical",
        "53457": "canonical",
        "54211": "eip155",
        "56288": "eip155",
        "57000": "eip155",
        "57054": "canonical",
        "57073": ["eip155", "canonical"],
        "58008": "canonical",
        "59140": ["canonical", "eip155"],
        "59141": ["canonical", "eip155"],
        "59144": ["canonical", "eip155"],
        "60808": ["canonical", "eip155"],
        "61166": "zksync",
        "71401": "eip155",
        "71402": "eip155",
        "73799": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": ["canonical", "eip155"],
        "80084": "canonical",
        "80085": ["canonical", "eip155"],
        "80094": ["canonical", "eip155"],
        "81224": ["canonical", "eip155"],
        "81457": ["canonical", "eip155"],
        "83291": "canonical",
        "84531": "eip155",
        "84532": ["eip155", "canonical"],
        "97435": "canonical",
        "103454": "eip155",
        "111188": "canonical",
        "128123": ["eip155", "canonical"],
        "167000": ["eip155", "canonical"],
        "167008": "canonical",
        "167009": ["eip155", "canonical"],
        "175188": "canonical",
        "200101": "canonical",
        "200202": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "314159": "eip155",
        "328527": "canonical",
        "333999": "canonical",
        "421611": "canonical",
        "421613": "canonical",
        "421614": "canonical",
        "490000": ["eip155", "canonical"],
        "534351": ["canonical", "eip155"],
        "534352": ["canonical", "eip155"],
        "534353": "eip155",
        "543210": ["zksync", "canonical"],
        "555666": "canonical",
        "560048": ["eip155", "canonical"],
        "622277": "canonical",
        "656476": ["eip155", "canonical"],
        "657468": ["canonical", "eip155"],
        "660279": "canonical",
        "668668": "canonical",
        "688688": "eip155",
        "695569": ["eip155", "canonical"],
        "713715": ["eip155", "canonical"],
        "747474": ["eip155", "canonical"],
        "763373": "eip155",
        "764984": "canonical",
        "808813": ["eip155", "canonical"],
        "810180": "zksync",
        "978657": "canonical",
        "4457845": "zksync",
        "6038361": ["eip155", "canonical"],
        "7225878": "eip155",
        "7777777": ["canonical", "eip155"],
        "11155111": ["eip155", "canonical"],
        "11155420": "eip155",
        "12227332": "canonical",
        "21000000": "eip155",
        "94204209": ["canonical", "eip155"],
        "111557560": ["canonical", "eip155"],
        "123420111": ["canonical", "eip155"],
        "161221135": "canonical",
        "168587773": "canonical",
        "222000222": "canonical",
        "245022926": "eip155",
        "245022934": "eip155",
        "328527624": "canonical",
        "333000333": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": ["canonical", "eip155"],
        "888888888": "canonical",
        "999999999": ["canonical", "eip155"],
        "1313161554": ["canonical", "eip155"],
        "1313161555": "canonical",
        "1511670449": "canonical",
        "1666600000": "eip155",
        "1666700000": "eip155",
        "11297108099": "canonical",
        "11297108109": "canonical",
        "37714555429": "canonical",
        "88153591557": ["canonical", "eip155"],
        "920637907288165": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/multi_send.json
var require_multi_send3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/multi_send.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "MultiSend",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
          codeHash: "0x0e4f7fc66550a322d1e7688e181b75e217e662a4f3f4d6a29b22bc61217c4b77"
        },
        zksync: {
          address: "0x309D0B190FeCCa8e1D5D8309a16F7e3CB133E885",
          codeHash: "0xcb372f27aba6983e7b54997ebb4a75c35876b2a279238ab914c5415de1e95137"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "5": "canonical",
        "10": "canonical",
        "14": "canonical",
        "16": "canonical",
        "19": "canonical",
        "25": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "71": "canonical",
        "81": "canonical",
        "88": "canonical",
        "97": "canonical",
        "98": "canonical",
        "100": "canonical",
        "114": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "155": "canonical",
        "169": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "250": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "338": "canonical",
        "360": "canonical",
        "369": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "530": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1030": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1442": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1729": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1811": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2000": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4061": "canonical",
        "4062": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4162": "canonical",
        "4202": "canonical",
        "4337": "canonical",
        "4488": "canonical",
        "4653": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6001": "canonical",
        "6321": "canonical",
        "6322": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6688": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7171": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7771": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8192": "canonical",
        "8194": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10243": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "11235": "canonical",
        "11501": "canonical",
        "11503": "canonical",
        "13337": "canonical",
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "17069": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "35441": "canonical",
        "35443": "canonical",
        "41455": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "54211": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59140": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80085": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84531": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "90001": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "105105": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "205205": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "421614": "canonical",
        "444444": "canonical",
        "490000": "canonical",
        "534351": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "555666": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "6038361": "canonical",
        "7225878": "canonical",
        "7777777": "canonical",
        "9999999": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "52164803": "canonical",
        "65100004": "canonical",
        "94204209": "canonical",
        "111557560": "canonical",
        "123420111": "canonical",
        "168587773": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": "canonical",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1313161555": "canonical",
        "1417429182": "canonical",
        "1511670449": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical",
        "88153591557": "canonical",
        "123420000220": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/multi_send.json
var require_multi_send4 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/multi_send.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "MultiSend",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x218543288004CD07832472D464648173c77D7eB7",
          codeHash: "0xca1147a12963172a93910c5cb2bfa5ad0e941c7f03fc7eb017dd06a8ea4e5604"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send_call_only.json
var require_multi_send_call_only = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send_call_only.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "MultiSendCallOnly",
      version: "1.3.0",
      deployments: {
        canonical: {
          address: "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
          codeHash: "0xa9865ac2d9c7a1591619b188c4d88167b50df6cc0c5327fcbd1c8c75f7c066ad"
        },
        eip155: {
          address: "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
          codeHash: "0xa9865ac2d9c7a1591619b188c4d88167b50df6cc0c5327fcbd1c8c75f7c066ad"
        },
        zksync: {
          address: "0xf220D3b4DFb23C4ade8C88E526C1353AbAcbC38F",
          codeHash: "0x064ddbf252714bcd4cb79f679e8c12df96d998ce07bbb13b3118c1dbf4a31942"
        }
      },
      networkAddresses: {
        "1": ["canonical", "eip155"],
        "3": "canonical",
        "4": "canonical",
        "5": "canonical",
        "10": ["eip155", "canonical"],
        "11": "canonical",
        "12": "canonical",
        "14": "canonical",
        "16": "eip155",
        "18": "eip155",
        "19": "eip155",
        "25": ["eip155", "canonical"],
        "28": "eip155",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "42": "canonical",
        "43": ["eip155", "canonical"],
        "44": ["eip155", "canonical"],
        "46": ["eip155", "canonical"],
        "50": ["eip155", "canonical"],
        "51": ["canonical", "eip155"],
        "56": ["canonical", "eip155"],
        "57": "eip155",
        "61": "eip155",
        "63": "eip155",
        "69": "eip155",
        "71": "canonical",
        "81": "eip155",
        "82": "eip155",
        "83": ["eip155", "canonical"],
        "96": "canonical",
        "97": "canonical",
        "100": ["canonical", "eip155"],
        "106": "eip155",
        "108": "eip155",
        "109": "eip155",
        "111": "eip155",
        "114": "canonical",
        "122": "canonical",
        "123": "canonical",
        "130": ["canonical", "eip155"],
        "133": "canonical",
        "137": ["canonical", "eip155"],
        "143": ["canonical", "eip155"],
        "146": ["canonical", "eip155"],
        "148": "eip155",
        "155": "eip155",
        "169": "canonical",
        "177": "canonical",
        "179": "eip155",
        "185": "eip155",
        "195": "eip155",
        "196": ["eip155", "canonical"],
        "204": ["eip155", "canonical"],
        "232": ["zksync", "canonical", "eip155"],
        "239": ["eip155", "canonical"],
        "240": "zksync",
        "246": "canonical",
        "250": ["canonical", "eip155"],
        "252": ["eip155", "canonical"],
        "255": "eip155",
        "274": "canonical",
        "280": "zksync",
        "282": "zksync",
        "288": "eip155",
        "291": "canonical",
        "295": "canonical",
        "296": "canonical",
        "300": ["zksync", "canonical", "eip155"],
        "314": "eip155",
        "321": "canonical",
        "322": "canonical",
        "324": ["zksync", "canonical", "eip155"],
        "336": ["canonical", "eip155"],
        "338": "eip155",
        "360": ["eip155", "canonical"],
        "369": "canonical",
        "388": "zksync",
        "418": "canonical",
        "420": "eip155",
        "424": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": ["canonical", "eip155"],
        "545": "eip155",
        "570": "eip155",
        "588": "eip155",
        "592": ["canonical", "eip155"],
        "595": "eip155",
        "599": "eip155",
        "648": ["canonical", "eip155"],
        "686": "eip155",
        "690": ["eip155", "canonical"],
        "698": "canonical",
        "747": "eip155",
        "787": "eip155",
        "919": ["canonical", "eip155"],
        "943": "canonical",
        "999": ["canonical", "eip155"],
        "1001": "eip155",
        "1008": "canonical",
        "1030": "canonical",
        "1088": ["eip155", "canonical"],
        "1101": ["canonical", "eip155"],
        "1111": "eip155",
        "1112": "eip155",
        "1114": "canonical",
        "1115": "canonical",
        "1116": "canonical",
        "1135": ["canonical", "eip155"],
        "1230": "eip155",
        "1231": "eip155",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1294": "eip155",
        "1315": ["eip155", "canonical"],
        "1328": ["eip155", "canonical"],
        "1329": "canonical",
        "1337": "eip155",
        "1424": "canonical",
        "1439": "canonical",
        "1442": "eip155",
        "1480": ["eip155", "canonical"],
        "1513": ["eip155", "canonical"],
        "1514": ["eip155", "canonical"],
        "1516": ["eip155", "canonical"],
        "1559": "eip155",
        "1625": "eip155",
        "1663": "eip155",
        "1729": "canonical",
        "1740": ["eip155", "canonical"],
        "1750": ["eip155", "canonical"],
        "1807": "canonical",
        "1868": "canonical",
        "1890": "canonical",
        "1891": "canonical",
        "1923": ["canonical", "eip155"],
        "1924": ["canonical", "eip155"],
        "1946": ["canonical", "eip155"],
        "1984": "canonical",
        "1998": "canonical",
        "2001": "canonical",
        "2002": "canonical",
        "2008": "canonical",
        "2019": "canonical",
        "2020": "canonical",
        "2021": "canonical",
        "2039": ["canonical", "eip155"],
        "2187": ["canonical", "eip155"],
        "2192": ["canonical", "eip155"],
        "2201": ["canonical", "eip155"],
        "2221": ["canonical", "eip155"],
        "2222": ["canonical", "eip155"],
        "2331": "canonical",
        "2345": "canonical",
        "2358": "eip155",
        "2390": "eip155",
        "2391": ["eip155", "canonical"],
        "2741": ["zksync", "canonical", "eip155"],
        "2810": ["eip155", "canonical"],
        "2818": ["canonical", "eip155"],
        "3338": ["canonical", "eip155"],
        "3636": "eip155",
        "3637": ["canonical", "eip155"],
        "3737": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4078": "canonical",
        "4157": "eip155",
        "4158": "eip155",
        "4202": "canonical",
        "4337": "canonical",
        "4460": "canonical",
        "4653": "eip155",
        "4661": "canonical",
        "4689": "eip155",
        "4918": "canonical",
        "4919": "canonical",
        "5000": ["eip155", "canonical"],
        "5001": "eip155",
        "5003": ["eip155", "canonical"],
        "5115": ["eip155", "canonical"],
        "5165": "canonical",
        "5330": ["eip155", "canonical"],
        "5700": ["eip155", "canonical"],
        "6001": "canonical",
        "6102": "eip155",
        "6398": "eip155",
        "6880": "canonical",
        "6900": ["canonical", "eip155"],
        "6911": ["canonical", "eip155"],
        "7000": ["eip155", "canonical"],
        "7001": "eip155",
        "7070": "canonical",
        "7332": "eip155",
        "7341": "canonical",
        "7560": ["canonical", "eip155"],
        "7700": "eip155",
        "7897": ["canonical", "eip155"],
        "8008": ["canonical", "eip155"],
        "8192": "eip155",
        "8194": "eip155",
        "8217": "eip155",
        "8329": "canonical",
        "8333": "eip155",
        "8453": ["eip155", "canonical"],
        "8822": "eip155",
        "9000": ["canonical", "eip155"],
        "9001": ["canonical", "eip155"],
        "9069": "canonical",
        "9070": "canonical",
        "9728": "eip155",
        "9745": ["canonical", "eip155"],
        "9746": ["canonical", "eip155"],
        "10000": "eip155",
        "10001": "eip155",
        "10081": "eip155",
        "10200": "canonical",
        "10242": "eip155",
        "10243": "eip155",
        "10849": "canonical",
        "11011": ["eip155", "canonical"],
        "11111": "canonical",
        "11124": ["zksync", "canonical", "eip155"],
        "11235": "canonical",
        "11437": "canonical",
        "11820": "canonical",
        "11891": "canonical",
        "12324": "canonical",
        "12325": "canonical",
        "12357": "canonical",
        "12553": "canonical",
        "13337": "canonical",
        "13371": ["eip155", "canonical"],
        "13473": ["eip155", "canonical"],
        "13505": "eip155",
        "13746": ["canonical", "eip155"],
        "14800": "eip155",
        "16661": ["canonical", "eip155"],
        "17000": ["canonical", "eip155"],
        "17069": ["eip155", "canonical"],
        "17172": "eip155",
        "18231": "canonical",
        "18233": "canonical",
        "22776": "canonical",
        "23294": ["eip155", "canonical"],
        "23295": ["eip155", "canonical"],
        "25327": "eip155",
        "28802": "eip155",
        "28882": ["eip155", "canonical"],
        "28979": "canonical",
        "31611": "canonical",
        "32323": "canonical",
        "32769": "eip155",
        "32770": "eip155",
        "33101": "eip155",
        "33139": "eip155",
        "33401": "canonical",
        "34443": ["canonical", "eip155"],
        "35441": "canonical",
        "35443": "canonical",
        "37111": "zksync",
        "41455": ["canonical", "eip155"],
        "41923": "eip155",
        "42161": ["canonical", "eip155"],
        "42170": "canonical",
        "42220": ["eip155", "canonical"],
        "42793": ["eip155", "canonical"],
        "43111": ["eip155", "canonical"],
        "43113": ["canonical", "eip155"],
        "43114": ["eip155", "canonical"],
        "43288": "eip155",
        "44787": "canonical",
        "45000": "canonical",
        "47763": "canonical",
        "47805": "canonical",
        "48898": ["eip155", "canonical"],
        "48899": ["eip155", "canonical"],
        "48900": ["canonical", "eip155"],
        "50104": "zksync",
        "53456": "canonical",
        "53457": "canonical",
        "54211": "eip155",
        "56288": "eip155",
        "57000": "eip155",
        "57054": "canonical",
        "57073": ["eip155", "canonical"],
        "58008": "canonical",
        "59140": ["canonical", "eip155"],
        "59141": ["canonical", "eip155"],
        "59144": ["canonical", "eip155"],
        "60808": ["canonical", "eip155"],
        "61166": "zksync",
        "71401": "eip155",
        "71402": "eip155",
        "73799": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": ["canonical", "eip155"],
        "80084": "canonical",
        "80085": ["canonical", "eip155"],
        "80094": ["canonical", "eip155"],
        "81224": ["canonical", "eip155"],
        "81457": ["canonical", "eip155"],
        "83291": "canonical",
        "84531": "eip155",
        "84532": ["eip155", "canonical"],
        "97435": "canonical",
        "103454": "eip155",
        "111188": "canonical",
        "128123": ["eip155", "canonical"],
        "167000": ["eip155", "canonical"],
        "167008": "canonical",
        "167009": ["eip155", "canonical"],
        "175188": "canonical",
        "200101": "canonical",
        "200202": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "314159": "eip155",
        "328527": "canonical",
        "333999": "canonical",
        "421611": "canonical",
        "421613": "canonical",
        "421614": "canonical",
        "490000": ["eip155", "canonical"],
        "534351": ["canonical", "eip155"],
        "534352": ["canonical", "eip155"],
        "534353": "eip155",
        "543210": ["zksync", "canonical"],
        "555666": "canonical",
        "560048": ["eip155", "canonical"],
        "622277": "canonical",
        "656476": ["eip155", "canonical"],
        "657468": ["canonical", "eip155"],
        "660279": "canonical",
        "668668": "canonical",
        "688688": "eip155",
        "695569": ["eip155", "canonical"],
        "713715": ["eip155", "canonical"],
        "747474": ["eip155", "canonical"],
        "763373": "eip155",
        "764984": "canonical",
        "808813": ["eip155", "canonical"],
        "810180": "zksync",
        "978657": "canonical",
        "4457845": "zksync",
        "6038361": ["eip155", "canonical"],
        "7225878": "eip155",
        "7777777": ["canonical", "eip155"],
        "11155111": ["eip155", "canonical"],
        "11155420": "eip155",
        "12227332": "canonical",
        "21000000": "eip155",
        "94204209": ["canonical", "eip155"],
        "111557560": ["canonical", "eip155"],
        "123420111": ["canonical", "eip155"],
        "161221135": "canonical",
        "168587773": "canonical",
        "222000222": "canonical",
        "245022926": "eip155",
        "245022934": "eip155",
        "328527624": "canonical",
        "333000333": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": ["canonical", "eip155"],
        "888888888": "canonical",
        "999999999": ["canonical", "eip155"],
        "1313161554": ["canonical", "eip155"],
        "1313161555": "canonical",
        "1511670449": "canonical",
        "1666600000": "eip155",
        "1666700000": "eip155",
        "11297108099": "canonical",
        "11297108109": "canonical",
        "37714555429": "canonical",
        "88153591557": ["canonical", "eip155"],
        "920637907288165": "canonical"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/multi_send_call_only.json
var require_multi_send_call_only2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/multi_send_call_only.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "MultiSendCallOnly",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
          codeHash: "0xecd5bd14a08c5d2122379900b2f272bdf107a7e92423c10dd5fe3254386c9939"
        },
        zksync: {
          address: "0x0408EF011960d02349d50286D20531229BCef773",
          codeHash: "0x44c70b30fed5c3a07358a52c2fb028f651031010ef99e4d8c3b45c208e88a264"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "5": "canonical",
        "10": "canonical",
        "14": "canonical",
        "16": "canonical",
        "19": "canonical",
        "25": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "71": "canonical",
        "81": "canonical",
        "88": "canonical",
        "97": "canonical",
        "98": "canonical",
        "100": "canonical",
        "114": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "155": "canonical",
        "169": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "250": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "338": "canonical",
        "360": "canonical",
        "369": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "530": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1030": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1442": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1729": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1811": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2000": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4061": "canonical",
        "4062": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4162": "canonical",
        "4202": "canonical",
        "4337": "canonical",
        "4488": "canonical",
        "4653": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6001": "canonical",
        "6321": "canonical",
        "6322": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6688": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7171": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7771": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8192": "canonical",
        "8194": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10243": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "11235": "canonical",
        "11501": "canonical",
        "11503": "canonical",
        "13337": "canonical",
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "17069": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "35441": "canonical",
        "35443": "canonical",
        "41455": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "54211": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59140": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80085": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84531": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "90001": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "105105": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "205205": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "421614": "canonical",
        "444444": "canonical",
        "490000": "canonical",
        "534351": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "555666": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "6038361": "canonical",
        "7225878": "canonical",
        "7777777": "canonical",
        "9999999": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "52164803": "canonical",
        "65100004": "canonical",
        "94204209": "canonical",
        "111557560": "canonical",
        "123420111": "canonical",
        "168587773": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": "canonical",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1313161555": "canonical",
        "1417429182": "canonical",
        "1511670449": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical",
        "88153591557": "canonical",
        "123420000220": "canonical"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/multi_send_call_only.json
var require_multi_send_call_only3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/multi_send_call_only.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "MultiSendCallOnly",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0xA83c336B20401Af773B6219BA5027174338D1836",
          codeHash: "0xcdbdcec38d2f1c7d961b0029ff8416b7e86e9974d6f0e9c9580c7d17fcfb6663"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/create_call.json
var require_create_call = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/create_call.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "CreateCall",
      version: "1.3.0",
      deployments: {
        canonical: {
          address: "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
          codeHash: "0x8155d988823a4f6f1bcbc76a64af8e510c4ce68819290d43cf24956bd24dee82"
        },
        eip155: {
          address: "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
          codeHash: "0x8155d988823a4f6f1bcbc76a64af8e510c4ce68819290d43cf24956bd24dee82"
        },
        zksync: {
          address: "0xcB8e5E438c5c2b45FbE17B02Ca9aF91509a8ad56",
          codeHash: "0x98095337deb9718f4e5ccb1b25a53be5f5e0093502b29df9e857f5e3e12aa194"
        }
      },
      networkAddresses: {
        "1": ["canonical", "eip155"],
        "3": "canonical",
        "4": "canonical",
        "5": "canonical",
        "10": ["eip155", "canonical"],
        "11": "canonical",
        "12": "canonical",
        "14": "canonical",
        "16": "eip155",
        "18": "eip155",
        "19": "eip155",
        "25": ["eip155", "canonical"],
        "28": "eip155",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "42": "canonical",
        "43": ["eip155", "canonical"],
        "44": ["eip155", "canonical"],
        "46": ["eip155", "canonical"],
        "50": ["eip155", "canonical"],
        "51": ["canonical", "eip155"],
        "56": ["canonical", "eip155"],
        "57": "eip155",
        "61": "eip155",
        "63": "eip155",
        "69": "eip155",
        "71": "canonical",
        "81": "eip155",
        "82": "eip155",
        "83": ["eip155", "canonical"],
        "96": "canonical",
        "97": "canonical",
        "100": ["canonical", "eip155"],
        "106": "eip155",
        "108": "eip155",
        "109": "eip155",
        "111": "eip155",
        "114": "canonical",
        "122": "canonical",
        "123": "canonical",
        "130": ["canonical", "eip155"],
        "133": "canonical",
        "137": ["canonical", "eip155"],
        "143": ["canonical", "eip155"],
        "146": ["canonical", "eip155"],
        "148": "eip155",
        "155": "eip155",
        "169": "canonical",
        "177": "canonical",
        "179": "eip155",
        "185": "eip155",
        "195": "eip155",
        "196": ["eip155", "canonical"],
        "204": ["eip155", "canonical"],
        "232": ["zksync", "canonical", "eip155"],
        "239": ["eip155", "canonical"],
        "240": "zksync",
        "246": "canonical",
        "250": ["canonical", "eip155"],
        "252": ["eip155", "canonical"],
        "255": "eip155",
        "274": "canonical",
        "280": "zksync",
        "282": "zksync",
        "288": "eip155",
        "291": "canonical",
        "295": "canonical",
        "296": "canonical",
        "300": ["zksync", "canonical", "eip155"],
        "314": "eip155",
        "321": "canonical",
        "322": "canonical",
        "324": ["zksync", "canonical", "eip155"],
        "336": ["canonical", "eip155"],
        "338": "eip155",
        "360": ["eip155", "canonical"],
        "369": "canonical",
        "388": "zksync",
        "418": "canonical",
        "420": "eip155",
        "424": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": ["canonical", "eip155"],
        "545": "eip155",
        "570": "eip155",
        "588": "eip155",
        "592": ["canonical", "eip155"],
        "595": "eip155",
        "599": "eip155",
        "648": ["canonical", "eip155"],
        "686": "eip155",
        "690": ["eip155", "canonical"],
        "698": "canonical",
        "747": "eip155",
        "787": "eip155",
        "919": ["canonical", "eip155"],
        "943": "canonical",
        "999": ["canonical", "eip155"],
        "1001": "eip155",
        "1008": "canonical",
        "1030": "canonical",
        "1088": ["eip155", "canonical"],
        "1101": ["canonical", "eip155"],
        "1111": "eip155",
        "1112": "eip155",
        "1114": "canonical",
        "1115": "canonical",
        "1116": "canonical",
        "1135": ["canonical", "eip155"],
        "1230": "eip155",
        "1231": "eip155",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1294": "eip155",
        "1315": ["eip155", "canonical"],
        "1328": ["eip155", "canonical"],
        "1329": "canonical",
        "1337": "eip155",
        "1424": "canonical",
        "1439": "canonical",
        "1442": "eip155",
        "1480": ["eip155", "canonical"],
        "1513": ["eip155", "canonical"],
        "1514": ["eip155", "canonical"],
        "1516": ["eip155", "canonical"],
        "1559": "eip155",
        "1625": "eip155",
        "1663": "eip155",
        "1729": "canonical",
        "1740": ["eip155", "canonical"],
        "1750": ["eip155", "canonical"],
        "1807": "canonical",
        "1868": "canonical",
        "1890": "canonical",
        "1891": "canonical",
        "1923": ["canonical", "eip155"],
        "1924": ["canonical", "eip155"],
        "1946": ["canonical", "eip155"],
        "1984": "canonical",
        "1998": "canonical",
        "2001": "canonical",
        "2002": "canonical",
        "2008": "canonical",
        "2019": "canonical",
        "2020": "canonical",
        "2021": "canonical",
        "2039": ["canonical", "eip155"],
        "2187": ["canonical", "eip155"],
        "2192": ["canonical", "eip155"],
        "2201": ["canonical", "eip155"],
        "2221": ["canonical", "eip155"],
        "2222": ["canonical", "eip155"],
        "2331": "canonical",
        "2345": "canonical",
        "2358": "eip155",
        "2390": "eip155",
        "2391": ["eip155", "canonical"],
        "2741": ["zksync", "canonical", "eip155"],
        "2810": ["eip155", "canonical"],
        "2818": ["canonical", "eip155"],
        "3338": ["canonical", "eip155"],
        "3636": "eip155",
        "3637": ["canonical", "eip155"],
        "3737": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4078": "canonical",
        "4157": "eip155",
        "4158": "eip155",
        "4202": "canonical",
        "4337": "canonical",
        "4460": "canonical",
        "4653": "eip155",
        "4661": "canonical",
        "4689": "eip155",
        "4918": "canonical",
        "4919": "canonical",
        "5000": ["eip155", "canonical"],
        "5001": "eip155",
        "5003": ["eip155", "canonical"],
        "5115": ["eip155", "canonical"],
        "5165": "canonical",
        "5330": ["eip155", "canonical"],
        "5700": ["eip155", "canonical"],
        "6001": "canonical",
        "6102": "eip155",
        "6398": "eip155",
        "6880": "canonical",
        "6900": ["canonical", "eip155"],
        "6911": ["canonical", "eip155"],
        "7000": ["eip155", "canonical"],
        "7001": "eip155",
        "7070": "canonical",
        "7332": "eip155",
        "7341": "canonical",
        "7560": ["canonical", "eip155"],
        "7700": "eip155",
        "7897": ["canonical", "eip155"],
        "8008": ["canonical", "eip155"],
        "8192": "eip155",
        "8194": "eip155",
        "8217": "eip155",
        "8329": "canonical",
        "8333": "eip155",
        "8453": ["eip155", "canonical"],
        "8822": "eip155",
        "9000": ["canonical", "eip155"],
        "9001": ["canonical", "eip155"],
        "9069": "canonical",
        "9070": "canonical",
        "9728": "eip155",
        "9745": ["canonical", "eip155"],
        "9746": ["canonical", "eip155"],
        "10000": "eip155",
        "10001": "eip155",
        "10081": "eip155",
        "10200": "canonical",
        "10242": "eip155",
        "10243": "eip155",
        "10849": "canonical",
        "11011": ["eip155", "canonical"],
        "11111": "canonical",
        "11124": ["zksync", "canonical", "eip155"],
        "11235": "canonical",
        "11437": "canonical",
        "11820": "canonical",
        "11891": "canonical",
        "12324": "canonical",
        "12325": "canonical",
        "12357": "canonical",
        "12553": "canonical",
        "13337": "canonical",
        "13371": ["eip155", "canonical"],
        "13473": ["eip155", "canonical"],
        "13505": "eip155",
        "13746": ["canonical", "eip155"],
        "14800": "eip155",
        "16661": ["canonical", "eip155"],
        "17000": ["canonical", "eip155"],
        "17069": ["eip155", "canonical"],
        "17172": "eip155",
        "18231": "canonical",
        "18233": "canonical",
        "22776": "canonical",
        "23294": ["eip155", "canonical"],
        "23295": ["eip155", "canonical"],
        "25327": "eip155",
        "28802": "eip155",
        "28882": ["eip155", "canonical"],
        "28979": "canonical",
        "31611": "canonical",
        "32323": "canonical",
        "32769": "eip155",
        "32770": "eip155",
        "33101": "eip155",
        "33139": "eip155",
        "33401": "canonical",
        "34443": ["canonical", "eip155"],
        "35441": "canonical",
        "35443": "canonical",
        "37111": "zksync",
        "41455": ["canonical", "eip155"],
        "41923": "eip155",
        "42161": ["canonical", "eip155"],
        "42170": "canonical",
        "42220": ["eip155", "canonical"],
        "42793": ["eip155", "canonical"],
        "43111": ["eip155", "canonical"],
        "43113": ["canonical", "eip155"],
        "43114": ["eip155", "canonical"],
        "43288": "eip155",
        "44787": "canonical",
        "45000": "canonical",
        "47763": "canonical",
        "47805": "canonical",
        "48898": ["eip155", "canonical"],
        "48899": ["eip155", "canonical"],
        "48900": ["canonical", "eip155"],
        "50104": "zksync",
        "53456": "canonical",
        "53457": "canonical",
        "54211": "eip155",
        "56288": "eip155",
        "57000": "eip155",
        "57054": "canonical",
        "57073": ["eip155", "canonical"],
        "58008": "canonical",
        "59140": ["canonical", "eip155"],
        "59141": ["canonical", "eip155"],
        "59144": ["canonical", "eip155"],
        "60808": ["canonical", "eip155"],
        "61166": "zksync",
        "71401": "eip155",
        "71402": "eip155",
        "73799": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": ["canonical", "eip155"],
        "80084": "canonical",
        "80085": ["canonical", "eip155"],
        "80094": ["canonical", "eip155"],
        "81224": ["canonical", "eip155"],
        "81457": ["canonical", "eip155"],
        "83291": "canonical",
        "84531": "eip155",
        "84532": ["eip155", "canonical"],
        "97435": "canonical",
        "103454": "eip155",
        "111188": "canonical",
        "128123": ["eip155", "canonical"],
        "167000": ["eip155", "canonical"],
        "167008": "canonical",
        "167009": ["eip155", "canonical"],
        "175188": "canonical",
        "200101": "canonical",
        "200202": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "314159": "eip155",
        "328527": "canonical",
        "333999": "canonical",
        "421611": "canonical",
        "421613": "canonical",
        "421614": "canonical",
        "490000": ["eip155", "canonical"],
        "534351": ["canonical", "eip155"],
        "534352": ["canonical", "eip155"],
        "534353": "eip155",
        "543210": ["zksync", "canonical"],
        "555666": "canonical",
        "560048": ["eip155", "canonical"],
        "622277": "canonical",
        "656476": ["eip155", "canonical"],
        "657468": ["canonical", "eip155"],
        "660279": "canonical",
        "668668": "canonical",
        "688688": "eip155",
        "695569": ["eip155", "canonical"],
        "713715": ["eip155", "canonical"],
        "747474": ["eip155", "canonical"],
        "763373": "eip155",
        "764984": "canonical",
        "808813": ["eip155", "canonical"],
        "810180": "zksync",
        "978657": "canonical",
        "4457845": "zksync",
        "6038361": ["eip155", "canonical"],
        "7225878": "eip155",
        "7777777": ["canonical", "eip155"],
        "11155111": ["eip155", "canonical"],
        "11155420": "eip155",
        "12227332": "canonical",
        "21000000": "eip155",
        "94204209": ["canonical", "eip155"],
        "111557560": ["canonical", "eip155"],
        "123420111": ["canonical", "eip155"],
        "161221135": "canonical",
        "168587773": "canonical",
        "222000222": "canonical",
        "245022926": "eip155",
        "245022934": "eip155",
        "328527624": "canonical",
        "333000333": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": ["canonical", "eip155"],
        "888888888": "canonical",
        "999999999": ["canonical", "eip155"],
        "1313161554": ["canonical", "eip155"],
        "1313161555": "canonical",
        "1511670449": "canonical",
        "1666600000": "eip155",
        "1666700000": "eip155",
        "11297108099": "canonical",
        "11297108109": "canonical",
        "37714555429": "canonical",
        "88153591557": ["canonical", "eip155"],
        "920637907288165": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            }
          ],
          name: "performCreate",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32"
            }
          ],
          name: "performCreate2",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/create_call.json
var require_create_call2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/create_call.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "CreateCall",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
          codeHash: "0x2b3060c55fcb8275653e99ad511a71f67ba76934ed66a7d74d6e68b52afff889"
        },
        zksync: {
          address: "0xAAA566Fe7978bB0fb0B5362B7ba23038f4428D8f",
          codeHash: "0x3aa5b033c45ab4866216847b12f15bca9a94c66ad5bbfbbbc42cc778079059d4"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "5": "canonical",
        "10": "canonical",
        "14": "canonical",
        "16": "canonical",
        "19": "canonical",
        "25": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "71": "canonical",
        "81": "canonical",
        "88": "canonical",
        "97": "canonical",
        "98": "canonical",
        "100": "canonical",
        "114": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "155": "canonical",
        "169": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "250": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "338": "canonical",
        "360": "canonical",
        "369": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "530": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1030": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1442": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1729": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1811": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2000": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4061": "canonical",
        "4062": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4162": "canonical",
        "4202": "canonical",
        "4337": "canonical",
        "4488": "canonical",
        "4653": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6001": "canonical",
        "6321": "canonical",
        "6322": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6688": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7171": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7771": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8192": "canonical",
        "8194": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10243": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "11235": "canonical",
        "11501": "canonical",
        "11503": "canonical",
        "13337": "canonical",
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "17069": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "35441": "canonical",
        "35443": "canonical",
        "41455": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "54211": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59140": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80085": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84531": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "90001": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "105105": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "205205": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "421614": "canonical",
        "444444": "canonical",
        "490000": "canonical",
        "534351": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "555666": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "6038361": "canonical",
        "7225878": "canonical",
        "7777777": "canonical",
        "9999999": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "52164803": "canonical",
        "65100004": "canonical",
        "94204209": "canonical",
        "111557560": "canonical",
        "123420111": "canonical",
        "168587773": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": "canonical",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1313161555": "canonical",
        "1417429182": "canonical",
        "1511670449": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical",
        "88153591557": "canonical",
        "123420000220": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            }
          ],
          name: "performCreate",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32"
            }
          ],
          name: "performCreate2",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/create_call.json
var require_create_call3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/create_call.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "CreateCall",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x2Ef5ECfbea521449E4De05EDB1ce63B75eDA90B4",
          codeHash: "0x6b7d8d29bdf7004c4617d95041923774f3f7e74b056bff55c1861c9ec92ce54f"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            }
          ],
          name: "performCreate",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32"
            }
          ],
          name: "performCreate2",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/sign_message_lib.json
var require_sign_message_lib = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/sign_message_lib.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SignMessageLib",
      version: "1.3.0",
      deployments: {
        canonical: {
          address: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
          codeHash: "0x3ac65dea3cc9dd0d7b7b800f834e3d73415b4e944bb94555c3e4a08fb137e918"
        },
        eip155: {
          address: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
          codeHash: "0x3ac65dea3cc9dd0d7b7b800f834e3d73415b4e944bb94555c3e4a08fb137e918"
        },
        zksync: {
          address: "0x357147caf9C0cCa67DfA0CF5369318d8193c8407",
          codeHash: "0x9da86f7e32ef976bd442a8eeb353e16d683b53e30e926ae7adce7c609f75b1fc"
        }
      },
      networkAddresses: {
        "1": ["canonical", "eip155"],
        "3": "canonical",
        "4": "canonical",
        "5": "canonical",
        "10": ["eip155", "canonical"],
        "11": "canonical",
        "12": "canonical",
        "14": "canonical",
        "16": "eip155",
        "18": "eip155",
        "19": "eip155",
        "25": ["eip155", "canonical"],
        "28": "eip155",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "42": "canonical",
        "43": ["eip155", "canonical"],
        "44": ["eip155", "canonical"],
        "46": ["eip155", "canonical"],
        "50": ["eip155", "canonical"],
        "51": ["canonical", "eip155"],
        "56": ["canonical", "eip155"],
        "57": "eip155",
        "61": "eip155",
        "63": "eip155",
        "69": "eip155",
        "71": "canonical",
        "81": "eip155",
        "82": "eip155",
        "83": ["eip155", "canonical"],
        "96": "canonical",
        "97": "canonical",
        "100": ["canonical", "eip155"],
        "106": "eip155",
        "108": "eip155",
        "109": "eip155",
        "111": "eip155",
        "114": "canonical",
        "122": "canonical",
        "123": "canonical",
        "130": ["canonical", "eip155"],
        "133": "canonical",
        "137": ["canonical", "eip155"],
        "143": ["canonical", "eip155"],
        "146": ["canonical", "eip155"],
        "148": "eip155",
        "155": "eip155",
        "169": "canonical",
        "177": "canonical",
        "179": "eip155",
        "185": "eip155",
        "195": "eip155",
        "196": ["eip155", "canonical"],
        "204": ["eip155", "canonical"],
        "232": ["zksync", "canonical", "eip155"],
        "239": ["eip155", "canonical"],
        "240": "zksync",
        "246": "canonical",
        "250": ["canonical", "eip155"],
        "252": ["eip155", "canonical"],
        "255": "eip155",
        "274": "canonical",
        "280": "zksync",
        "282": "zksync",
        "288": "eip155",
        "291": "canonical",
        "295": "canonical",
        "296": "canonical",
        "300": ["zksync", "canonical", "eip155"],
        "314": "eip155",
        "321": "canonical",
        "322": "canonical",
        "324": ["zksync", "canonical", "eip155"],
        "336": ["canonical", "eip155"],
        "338": "eip155",
        "360": ["eip155", "canonical"],
        "369": "canonical",
        "388": "zksync",
        "418": "canonical",
        "420": "eip155",
        "424": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": ["canonical", "eip155"],
        "545": "eip155",
        "570": "eip155",
        "588": "eip155",
        "592": ["canonical", "eip155"],
        "595": "eip155",
        "599": "eip155",
        "648": ["canonical", "eip155"],
        "686": "eip155",
        "690": ["eip155", "canonical"],
        "698": "canonical",
        "747": "eip155",
        "787": "eip155",
        "919": ["canonical", "eip155"],
        "943": "canonical",
        "999": ["canonical", "eip155"],
        "1001": "eip155",
        "1008": "canonical",
        "1030": "canonical",
        "1088": ["eip155", "canonical"],
        "1101": ["canonical", "eip155"],
        "1111": "eip155",
        "1112": "eip155",
        "1114": "canonical",
        "1115": "canonical",
        "1116": "canonical",
        "1135": ["canonical", "eip155"],
        "1230": "eip155",
        "1231": "eip155",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1294": "eip155",
        "1315": ["eip155", "canonical"],
        "1328": ["eip155", "canonical"],
        "1329": "canonical",
        "1337": "eip155",
        "1424": "canonical",
        "1439": "canonical",
        "1442": "eip155",
        "1480": ["eip155", "canonical"],
        "1513": ["eip155", "canonical"],
        "1514": ["eip155", "canonical"],
        "1516": ["eip155", "canonical"],
        "1559": "eip155",
        "1625": "eip155",
        "1663": "eip155",
        "1729": "canonical",
        "1740": ["eip155", "canonical"],
        "1750": ["eip155", "canonical"],
        "1807": "canonical",
        "1868": "canonical",
        "1890": "canonical",
        "1891": "canonical",
        "1923": ["canonical", "eip155"],
        "1924": ["canonical", "eip155"],
        "1946": ["canonical", "eip155"],
        "1984": "canonical",
        "1998": "canonical",
        "2001": "canonical",
        "2002": "canonical",
        "2008": "canonical",
        "2019": "canonical",
        "2020": "canonical",
        "2021": "canonical",
        "2039": ["canonical", "eip155"],
        "2187": ["canonical", "eip155"],
        "2192": ["canonical", "eip155"],
        "2201": ["canonical", "eip155"],
        "2221": ["canonical", "eip155"],
        "2222": ["canonical", "eip155"],
        "2331": "canonical",
        "2345": "canonical",
        "2358": "eip155",
        "2390": "eip155",
        "2391": ["eip155", "canonical"],
        "2741": ["zksync", "canonical", "eip155"],
        "2810": ["eip155", "canonical"],
        "2818": ["canonical", "eip155"],
        "3338": ["canonical", "eip155"],
        "3636": "eip155",
        "3637": ["canonical", "eip155"],
        "3737": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4078": "canonical",
        "4157": "eip155",
        "4158": "eip155",
        "4202": "canonical",
        "4337": "canonical",
        "4460": "canonical",
        "4653": "eip155",
        "4661": "canonical",
        "4689": "eip155",
        "4918": "canonical",
        "4919": "canonical",
        "5000": ["eip155", "canonical"],
        "5001": "eip155",
        "5003": ["eip155", "canonical"],
        "5115": ["eip155", "canonical"],
        "5165": "canonical",
        "5330": ["eip155", "canonical"],
        "5700": ["eip155", "canonical"],
        "6001": "canonical",
        "6102": "eip155",
        "6398": "eip155",
        "6880": "canonical",
        "6900": ["canonical", "eip155"],
        "6911": ["canonical", "eip155"],
        "7000": ["eip155", "canonical"],
        "7001": "eip155",
        "7070": "canonical",
        "7332": "eip155",
        "7341": "canonical",
        "7560": ["canonical", "eip155"],
        "7700": "eip155",
        "7897": ["canonical", "eip155"],
        "8008": ["canonical", "eip155"],
        "8192": "eip155",
        "8194": "eip155",
        "8217": "eip155",
        "8329": "canonical",
        "8333": "eip155",
        "8453": ["eip155", "canonical"],
        "8822": "eip155",
        "9000": ["canonical", "eip155"],
        "9001": ["canonical", "eip155"],
        "9069": "canonical",
        "9070": "canonical",
        "9728": "eip155",
        "9745": ["canonical", "eip155"],
        "9746": ["canonical", "eip155"],
        "10000": "eip155",
        "10001": "eip155",
        "10081": "eip155",
        "10200": "canonical",
        "10242": "eip155",
        "10243": "eip155",
        "10849": "canonical",
        "11011": ["eip155", "canonical"],
        "11111": "canonical",
        "11124": ["zksync", "canonical", "eip155"],
        "11235": "canonical",
        "11437": "canonical",
        "11820": "canonical",
        "11891": "canonical",
        "12324": "canonical",
        "12325": "canonical",
        "12357": "canonical",
        "12553": "canonical",
        "13337": "canonical",
        "13371": ["eip155", "canonical"],
        "13473": ["eip155", "canonical"],
        "13505": "eip155",
        "13746": ["canonical", "eip155"],
        "14800": "eip155",
        "16661": ["canonical", "eip155"],
        "17000": ["canonical", "eip155"],
        "17069": ["eip155", "canonical"],
        "17172": "eip155",
        "18231": "canonical",
        "18233": "canonical",
        "22776": "canonical",
        "23294": ["eip155", "canonical"],
        "23295": ["eip155", "canonical"],
        "25327": "eip155",
        "28802": "eip155",
        "28882": ["eip155", "canonical"],
        "28979": "canonical",
        "31611": "canonical",
        "32323": "canonical",
        "32769": "eip155",
        "32770": "eip155",
        "33101": "eip155",
        "33139": "eip155",
        "33401": "canonical",
        "34443": ["canonical", "eip155"],
        "35441": "canonical",
        "35443": "canonical",
        "37111": "zksync",
        "41455": ["canonical", "eip155"],
        "41923": "eip155",
        "42161": ["canonical", "eip155"],
        "42170": "canonical",
        "42220": ["eip155", "canonical"],
        "42793": ["eip155", "canonical"],
        "43111": ["eip155", "canonical"],
        "43113": ["canonical", "eip155"],
        "43114": ["eip155", "canonical"],
        "43288": "eip155",
        "44787": "canonical",
        "45000": "canonical",
        "47763": "canonical",
        "47805": "canonical",
        "48898": ["eip155", "canonical"],
        "48899": ["eip155", "canonical"],
        "48900": ["canonical", "eip155"],
        "50104": "zksync",
        "53456": "canonical",
        "53457": "canonical",
        "54211": "eip155",
        "56288": "eip155",
        "57000": "eip155",
        "57054": "canonical",
        "57073": ["eip155", "canonical"],
        "58008": "canonical",
        "59140": ["canonical", "eip155"],
        "59141": ["canonical", "eip155"],
        "59144": ["canonical", "eip155"],
        "60808": ["canonical", "eip155"],
        "61166": "zksync",
        "71401": "eip155",
        "71402": "eip155",
        "73799": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": ["canonical", "eip155"],
        "80084": "canonical",
        "80085": ["canonical", "eip155"],
        "80094": ["canonical", "eip155"],
        "81224": ["canonical", "eip155"],
        "81457": ["canonical", "eip155"],
        "83291": "canonical",
        "84531": "eip155",
        "84532": ["eip155", "canonical"],
        "97435": "canonical",
        "103454": "eip155",
        "111188": "canonical",
        "128123": ["eip155", "canonical"],
        "167000": ["eip155", "canonical"],
        "167008": "canonical",
        "167009": ["eip155", "canonical"],
        "175188": "canonical",
        "200101": "canonical",
        "200202": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "314159": "eip155",
        "328527": "canonical",
        "333999": "canonical",
        "421611": "canonical",
        "421613": "canonical",
        "421614": "canonical",
        "490000": ["eip155", "canonical"],
        "534351": ["canonical", "eip155"],
        "534352": ["canonical", "eip155"],
        "534353": "eip155",
        "543210": ["zksync", "canonical"],
        "555666": "canonical",
        "560048": ["eip155", "canonical"],
        "622277": "canonical",
        "656476": ["eip155", "canonical"],
        "657468": ["canonical", "eip155"],
        "660279": "canonical",
        "668668": "canonical",
        "688688": "eip155",
        "695569": ["eip155", "canonical"],
        "713715": ["eip155", "canonical"],
        "747474": ["eip155", "canonical"],
        "763373": "eip155",
        "764984": "canonical",
        "808813": ["eip155", "canonical"],
        "810180": "zksync",
        "978657": "canonical",
        "4457845": "zksync",
        "6038361": ["eip155", "canonical"],
        "7225878": "eip155",
        "7777777": ["canonical", "eip155"],
        "11155111": ["eip155", "canonical"],
        "11155420": "eip155",
        "12227332": "canonical",
        "21000000": "eip155",
        "94204209": ["canonical", "eip155"],
        "111557560": ["canonical", "eip155"],
        "123420111": ["canonical", "eip155"],
        "161221135": "canonical",
        "168587773": "canonical",
        "222000222": "canonical",
        "245022926": "eip155",
        "245022934": "eip155",
        "328527624": "canonical",
        "333000333": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": ["canonical", "eip155"],
        "888888888": "canonical",
        "999999999": ["canonical", "eip155"],
        "1313161554": ["canonical", "eip155"],
        "1313161555": "canonical",
        "1511670449": "canonical",
        "1666600000": "eip155",
        "1666700000": "eip155",
        "11297108099": "canonical",
        "11297108109": "canonical",
        "37714555429": "canonical",
        "88153591557": ["canonical", "eip155"],
        "920637907288165": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/sign_message_lib.json
var require_sign_message_lib2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/sign_message_lib.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SignMessageLib",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
          codeHash: "0x525c754a46b79e05543a59bb61e8de3c9eee0d955a59352409cbe67ea1077528"
        },
        zksync: {
          address: "0xAca1ec0a1A575CDCCF1DC3d5d296202Eb6061888",
          codeHash: "0x3e762bdca5f7d61c70e7ad1d1cb7b999481954543e7c29540e757d3e7004aa6b"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "5": "canonical",
        "10": "canonical",
        "14": "canonical",
        "16": "canonical",
        "19": "canonical",
        "25": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "40": "canonical",
        "41": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "71": "canonical",
        "81": "canonical",
        "88": "canonical",
        "97": "canonical",
        "98": "canonical",
        "100": "canonical",
        "114": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "155": "canonical",
        "169": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "250": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "338": "canonical",
        "360": "canonical",
        "369": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "530": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1030": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1442": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1729": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1811": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2000": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "3776": "canonical",
        "4002": "canonical",
        "4061": "canonical",
        "4062": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4162": "canonical",
        "4202": "canonical",
        "4337": "canonical",
        "4488": "canonical",
        "4653": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6001": "canonical",
        "6321": "canonical",
        "6322": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6688": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7171": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7771": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8192": "canonical",
        "8194": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10243": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "11235": "canonical",
        "11501": "canonical",
        "11503": "canonical",
        "13337": "canonical",
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "17069": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "35441": "canonical",
        "35443": "canonical",
        "41455": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "54211": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59140": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80001": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80085": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84531": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "90001": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "105105": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "205205": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "421614": "canonical",
        "444444": "canonical",
        "490000": "canonical",
        "534351": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "555666": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "6038361": "canonical",
        "7225878": "canonical",
        "7777777": "canonical",
        "9999999": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "52164803": "canonical",
        "65100004": "canonical",
        "94204209": "canonical",
        "111557560": "canonical",
        "123420111": "canonical",
        "168587773": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "476462898": "canonical",
        "531050104": "zksync",
        "666666666": "canonical",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1313161555": "canonical",
        "1417429182": "canonical",
        "1511670449": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical",
        "88153591557": "canonical",
        "123420000220": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/sign_message_lib.json
var require_sign_message_lib3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/sign_message_lib.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SignMessageLib",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x4FfeF8222648872B3dE295Ba1e49110E61f5b5aa",
          codeHash: "0xd61840855da008da59a00fc03fb71455b4f70bdca1f56f9504f072ed8d90c50e"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_migration.json
var require_safe_migration = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_migration.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SafeMigration",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0x526643F69b81B008F46d95CD5ced5eC0edFFDaC6",
          codeHash: "0xc00d7921460cd5a05393e7772e634bd7d212f356356aa3a77f0120a9b8e25e99"
        },
        zksync: {
          address: "0x817756C6c555A94BCEE39eB5a102AbC1678b09A7",
          codeHash: "0x6815c12fbdeb438fb0fb1e1484ac190ca2fc98065b93f95db846596c3c0eee70"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "10": "canonical",
        "14": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "81": "canonical",
        "88": "canonical",
        "98": "canonical",
        "100": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "360": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "4061": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4202": "canonical",
        "4488": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "490000": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "7777777": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "65100004": "canonical",
        "111557560": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "531050104": "zksync",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1417429182": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "safeSingleton",
              type: "address"
            },
            {
              internalType: "address",
              name: "safeL2Singleton",
              type: "address"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          inputs: [],
          name: "MIGRATION_SINGLETON",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "SAFE_FALLBACK_HANDLER",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "SAFE_L2_SINGLETON",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "SAFE_SINGLETON",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "migrateL2Singleton",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "migrateL2WithFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "migrateSingleton",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "migrateWithFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe_migration.json
var require_safe_migration2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe_migration.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SafeMigration",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x6439e7ABD8Bb915A5263094784C5CF561c4172AC",
          codeHash: "0x52d7472fa02c3a574544f9b5a4ed4c7777e4e3315217e368926b51e1cc6014ea"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "safeSingleton",
              type: "address"
            },
            {
              internalType: "address",
              name: "safeL2Singleton",
              type: "address"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          inputs: [],
          name: "MIGRATION_SINGLETON",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "SAFE_FALLBACK_HANDLER",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "SAFE_L2_SINGLETON",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "SAFE_SINGLETON",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "migrateL2Singleton",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "migrateL2WithFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "migrateSingleton",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "migrateWithFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_to_l2_migration.json
var require_safe_to_l2_migration = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_to_l2_migration.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SafeToL2Migration",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0xfF83F6335d8930cBad1c0D439A841f01888D9f69",
          codeHash: "0xa83e7be2fa20c96dc9575e3937239d552f3831ea437d7c96397eec8736f0cba0"
        },
        zksync: {
          address: "0xa26620d1f8f1a2433F0D25027F141aaCAFB3E590",
          codeHash: "0x2a68d940fb2460312e98bc36be0efaeff392237039e7282bc12155f049287c70"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "10": "canonical",
        "14": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "81": "canonical",
        "88": "canonical",
        "98": "canonical",
        "100": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "360": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "4061": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4202": "canonical",
        "4488": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "490000": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "7777777": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "65100004": "canonical",
        "111557560": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "531050104": "zksync",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1417429182": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "additionalInfo",
              type: "bytes"
            }
          ],
          name: "SafeMultiSigTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          inputs: [],
          name: "MIGRATION_SINGLETON",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "l2Singleton",
              type: "address"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "migrateFromV111",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "l2Singleton",
              type: "address"
            }
          ],
          name: "migrateToL2",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_to_l2_setup.json
var require_safe_to_l2_setup = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_to_l2_setup.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SafeToL2Setup",
      version: "1.4.1",
      deployments: {
        canonical: {
          address: "0xBD89A1CE4DDe368FFAB0eC35506eEcE0b1fFdc54",
          codeHash: "0x2f25df28caf984366ee584e13241707e85dcd5a6ea0c14267928dafc1fd6274b"
        },
        zksync: {
          address: "0x199A9df0224031c20Cc27083A4164c9c8F1Bcb39",
          codeHash: "0x0bbcc5092b50efd183bb46cfe3f61abca3226cea4f612f23f22bb222cd7b3d45"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "10": "canonical",
        "14": "canonical",
        "30": "canonical",
        "31": "canonical",
        "39": "canonical",
        "44": "canonical",
        "46": "canonical",
        "50": "canonical",
        "51": "canonical",
        "56": "canonical",
        "81": "canonical",
        "88": "canonical",
        "98": "canonical",
        "100": "canonical",
        "122": "canonical",
        "130": "canonical",
        "133": "canonical",
        "137": "canonical",
        "143": "canonical",
        "146": "canonical",
        "150": "canonical",
        "173": "canonical",
        "177": "canonical",
        "181": "canonical",
        "185": "canonical",
        "196": "canonical",
        "204": "canonical",
        "228": "canonical",
        "232": ["zksync", "canonical"],
        "239": "canonical",
        "252": "canonical",
        "255": "canonical",
        "288": "canonical",
        "300": ["zksync", "canonical"],
        "314": "canonical",
        "324": ["zksync", "canonical"],
        "336": "canonical",
        "360": "canonical",
        "466": "canonical",
        "478": "canonical",
        "480": "canonical",
        "545": "canonical",
        "592": "canonical",
        "690": "canonical",
        "747": "canonical",
        "842": "canonical",
        "870": "canonical",
        "919": "canonical",
        "938": "canonical",
        "964": "canonical",
        "970": "canonical",
        "995": "canonical",
        "999": "canonical",
        "1001": "canonical",
        "1101": "canonical",
        "1111": "canonical",
        "1112": "canonical",
        "1125": "canonical",
        "1135": "canonical",
        "1284": "canonical",
        "1285": "canonical",
        "1287": "canonical",
        "1301": "canonical",
        "1315": "canonical",
        "1328": "canonical",
        "1329": "canonical",
        "1337": "canonical",
        "1424": "canonical",
        "1480": "canonical",
        "1514": "canonical",
        "1516": "canonical",
        "1625": "canonical",
        "1663": "canonical",
        "1740": "canonical",
        "1750": "canonical",
        "1868": "canonical",
        "1923": "canonical",
        "1924": "canonical",
        "1946": "canonical",
        "1995": "canonical",
        "2039": "canonical",
        "2187": "canonical",
        "2192": "canonical",
        "2201": "canonical",
        "2221": "canonical",
        "2345": "canonical",
        "2358": "canonical",
        "2390": "canonical",
        "2391": "canonical",
        "2424": "canonical",
        "2442": "canonical",
        "2741": ["zksync", "canonical"],
        "2810": "canonical",
        "2818": "canonical",
        "3068": "canonical",
        "3338": "canonical",
        "3501": "canonical",
        "3636": "canonical",
        "3637": "canonical",
        "4061": "canonical",
        "4157": "canonical",
        "4158": "canonical",
        "4202": "canonical",
        "4488": "canonical",
        "4661": "canonical",
        "5000": "canonical",
        "5003": "canonical",
        "5115": "canonical",
        "5330": "canonical",
        "5611": "canonical",
        "5851": "canonical",
        "6342": "canonical",
        "6398": "canonical",
        "6900": "canonical",
        "6911": "canonical",
        "6942": "canonical",
        "7000": "canonical",
        "7001": "canonical",
        "7200": "canonical",
        "7560": "canonical",
        "7897": "canonical",
        "8008": "canonical",
        "8217": "canonical",
        "8408": "canonical",
        "8453": "canonical",
        "8801": "canonical",
        "8844": "canonical",
        "9001": "canonical",
        "9369": "canonical",
        "9700": "canonical",
        "9728": "canonical",
        "9745": "canonical",
        "9746": "canonical",
        "10081": "canonical",
        "10143": "canonical",
        "10242": "canonical",
        "10888": "canonical",
        "11011": "canonical",
        "11124": ["zksync", "canonical"],
        "13371": "canonical",
        "13473": "canonical",
        "13505": "canonical",
        "13746": "canonical",
        "14800": "canonical",
        "16661": "canonical",
        "17000": "canonical",
        "18233": "canonical",
        "18880": "canonical",
        "23294": "canonical",
        "23295": "canonical",
        "28802": "canonical",
        "28882": "canonical",
        "32380": "canonical",
        "32769": "canonical",
        "32770": "canonical",
        "33101": "canonical",
        "33139": "canonical",
        "34443": "canonical",
        "41923": "canonical",
        "42161": "canonical",
        "42220": "canonical",
        "42421": "canonical",
        "42793": "canonical",
        "43111": "canonical",
        "43114": "canonical",
        "43419": "canonical",
        "44787": "canonical",
        "47763": "canonical",
        "48898": "canonical",
        "48899": "canonical",
        "48900": "canonical",
        "49088": "canonical",
        "49321": "canonical",
        "50104": "zksync",
        "50312": "canonical",
        "53302": "canonical",
        "55244": "canonical",
        "57000": "canonical",
        "57054": "canonical",
        "57073": "canonical",
        "59141": "canonical",
        "59144": "canonical",
        "59902": "canonical",
        "60808": "canonical",
        "66665": "canonical",
        "72080": "canonical",
        "80002": "canonical",
        "80069": "canonical",
        "80094": "canonical",
        "81224": "canonical",
        "81457": "canonical",
        "84532": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "98864": "canonical",
        "98865": "canonical",
        "98867": "canonical",
        "111188": "canonical",
        "128123": "canonical",
        "167000": "canonical",
        "167009": "canonical",
        "175188": "canonical",
        "200810": "canonical",
        "200901": "canonical",
        "210425": "canonical",
        "314159": "canonical",
        "325000": "canonical",
        "381931": "canonical",
        "490000": "canonical",
        "534352": "canonical",
        "543210": "canonical",
        "560048": "canonical",
        "656476": "canonical",
        "657468": "canonical",
        "688688": "canonical",
        "695569": "canonical",
        "713715": "canonical",
        "743111": "canonical",
        "747474": "canonical",
        "763373": "canonical",
        "808813": "canonical",
        "839999": "canonical",
        "984122": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "1501869": "canonical",
        "2206132": "canonical",
        "2632500": "canonical",
        "3441006": "canonical",
        "7777777": "canonical",
        "11155111": "canonical",
        "11155420": "canonical",
        "11155931": "canonical",
        "12227332": "canonical",
        "21000000": "canonical",
        "65100004": "canonical",
        "111557560": "canonical",
        "245022934": "canonical",
        "253368190": "canonical",
        "531050104": "zksync",
        "994873017": "canonical",
        "999999999": "canonical",
        "1313161554": "canonical",
        "1417429182": "canonical",
        "1570754601": "canonical",
        "1660990954": "canonical",
        "1666600000": "canonical",
        "1666700000": "canonical",
        "1952959480": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "l2Singleton",
              type: "address"
            }
          ],
          name: "setupToL2",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe_to_l2_setup.json
var require_safe_to_l2_setup2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/assets/v1.5.0/safe_to_l2_setup.json"(exports, module) {
    module.exports = {
      released: true,
      contractName: "SafeToL2Setup",
      version: "1.5.0",
      deployments: {
        canonical: {
          address: "0x900C7589200010D6C6eCaaE5B06EBe653bc2D82a",
          codeHash: "0xf6034d841bcbff8912aa55526b0f1609212536aaf60bb16f5e8a269a4ab38f18"
        }
      },
      networkAddresses: {
        "1": "canonical",
        "1995": "canonical",
        "5424": "canonical",
        "5887": "canonical",
        "9302": "canonical",
        "32380": "canonical",
        "49088": "canonical",
        "88811": "canonical",
        "88817": "canonical",
        "843843": "canonical",
        "1440000": "canonical",
        "1449000": "canonical",
        "11155111": "canonical"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "l2Singleton",
              type: "address"
            }
          ],
          name: "setupToL2",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/deployments.js
var require_deployments = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/deployments.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._SAFE_TO_L2_SETUP_DEPLOYMENTS = exports._SAFE_TO_L2_MIGRATION_DEPLOYMENTS = exports._SAFE_MIGRATION_DEPLOYMENTS = exports._SIGN_MESSAGE_LIB_DEPLOYMENTS = exports._CREATE_CALL_DEPLOYMENTS = exports._MULTI_SEND_CALL_ONLY_DEPLOYMENTS = exports._MULTI_SEND_DEPLOYMENTS = exports._SAFE_L2_DEPLOYMENTS = exports._SAFE_DEPLOYMENTS = exports._EXTENSIBLE_FALLBACK_HANDLER_DEPLOYMENTS = exports._COMPAT_FALLBACK_HANDLER_DEPLOYMENTS = exports._TOKEN_CALLBACK_HANDLER_DEPLOYMENTS = exports._FACTORY_DEPLOYMENTS = exports._ACCESSOR_DEPLOYMENTS = void 0;
    var simulate_tx_accessor_json_1 = __importDefault(require_simulate_tx_accessor());
    var simulate_tx_accessor_json_2 = __importDefault(require_simulate_tx_accessor2());
    var simulate_tx_accessor_json_3 = __importDefault(require_simulate_tx_accessor3());
    var _ACCESSOR_DEPLOYMENTS = [
      simulate_tx_accessor_json_3.default,
      simulate_tx_accessor_json_2.default,
      simulate_tx_accessor_json_1.default
    ];
    exports._ACCESSOR_DEPLOYMENTS = _ACCESSOR_DEPLOYMENTS;
    var proxy_factory_json_1 = __importDefault(require_proxy_factory());
    var proxy_factory_json_2 = __importDefault(require_proxy_factory2());
    var proxy_factory_json_3 = __importDefault(require_proxy_factory3());
    var safe_proxy_factory_json_1 = __importDefault(require_safe_proxy_factory());
    var safe_proxy_factory_json_2 = __importDefault(require_safe_proxy_factory2());
    var _FACTORY_DEPLOYMENTS = [
      safe_proxy_factory_json_2.default,
      safe_proxy_factory_json_1.default,
      proxy_factory_json_3.default,
      proxy_factory_json_2.default,
      proxy_factory_json_1.default
    ];
    exports._FACTORY_DEPLOYMENTS = _FACTORY_DEPLOYMENTS;
    var default_callback_handler_json_1 = __importDefault(require_default_callback_handler());
    var token_callback_handler_json_1 = __importDefault(require_token_callback_handler());
    var _TOKEN_CALLBACK_HANDLER_DEPLOYMENTS = [
      token_callback_handler_json_1.default,
      default_callback_handler_json_1.default
    ];
    exports._TOKEN_CALLBACK_HANDLER_DEPLOYMENTS = _TOKEN_CALLBACK_HANDLER_DEPLOYMENTS;
    var compatibility_fallback_handler_json_1 = __importDefault(require_compatibility_fallback_handler());
    var compatibility_fallback_handler_json_2 = __importDefault(require_compatibility_fallback_handler2());
    var compatibility_fallback_handler_json_3 = __importDefault(require_compatibility_fallback_handler3());
    var _COMPAT_FALLBACK_HANDLER_DEPLOYMENTS = [
      compatibility_fallback_handler_json_3.default,
      compatibility_fallback_handler_json_2.default,
      compatibility_fallback_handler_json_1.default
    ];
    exports._COMPAT_FALLBACK_HANDLER_DEPLOYMENTS = _COMPAT_FALLBACK_HANDLER_DEPLOYMENTS;
    var extensible_fallback_handler_json_1 = __importDefault(require_extensible_fallback_handler());
    var _EXTENSIBLE_FALLBACK_HANDLER_DEPLOYMENTS = [extensible_fallback_handler_json_1.default];
    exports._EXTENSIBLE_FALLBACK_HANDLER_DEPLOYMENTS = _EXTENSIBLE_FALLBACK_HANDLER_DEPLOYMENTS;
    var gnosis_safe_json_1 = __importDefault(require_gnosis_safe());
    var gnosis_safe_json_2 = __importDefault(require_gnosis_safe2());
    var gnosis_safe_json_3 = __importDefault(require_gnosis_safe3());
    var gnosis_safe_json_4 = __importDefault(require_gnosis_safe4());
    var safe_json_1 = __importDefault(require_safe());
    var safe_json_2 = __importDefault(require_safe2());
    var _SAFE_DEPLOYMENTS = [
      safe_json_2.default,
      safe_json_1.default,
      gnosis_safe_json_4.default,
      gnosis_safe_json_3.default,
      gnosis_safe_json_2.default,
      gnosis_safe_json_1.default
    ];
    exports._SAFE_DEPLOYMENTS = _SAFE_DEPLOYMENTS;
    var gnosis_safe_l2_json_1 = __importDefault(require_gnosis_safe_l2());
    var safe_l2_json_1 = __importDefault(require_safe_l2());
    var safe_l2_json_2 = __importDefault(require_safe_l22());
    var _SAFE_L2_DEPLOYMENTS = [safe_l2_json_2.default, safe_l2_json_1.default, gnosis_safe_l2_json_1.default];
    exports._SAFE_L2_DEPLOYMENTS = _SAFE_L2_DEPLOYMENTS;
    var multi_send_json_1 = __importDefault(require_multi_send());
    var multi_send_json_2 = __importDefault(require_multi_send2());
    var multi_send_json_3 = __importDefault(require_multi_send3());
    var multi_send_json_4 = __importDefault(require_multi_send4());
    var _MULTI_SEND_DEPLOYMENTS = [multi_send_json_4.default, multi_send_json_3.default, multi_send_json_2.default, multi_send_json_1.default];
    exports._MULTI_SEND_DEPLOYMENTS = _MULTI_SEND_DEPLOYMENTS;
    var multi_send_call_only_json_1 = __importDefault(require_multi_send_call_only());
    var multi_send_call_only_json_2 = __importDefault(require_multi_send_call_only2());
    var multi_send_call_only_json_3 = __importDefault(require_multi_send_call_only3());
    var _MULTI_SEND_CALL_ONLY_DEPLOYMENTS = [
      multi_send_call_only_json_3.default,
      multi_send_call_only_json_2.default,
      multi_send_call_only_json_1.default
    ];
    exports._MULTI_SEND_CALL_ONLY_DEPLOYMENTS = _MULTI_SEND_CALL_ONLY_DEPLOYMENTS;
    var create_call_json_1 = __importDefault(require_create_call());
    var create_call_json_2 = __importDefault(require_create_call2());
    var create_call_json_3 = __importDefault(require_create_call3());
    var _CREATE_CALL_DEPLOYMENTS = [create_call_json_3.default, create_call_json_2.default, create_call_json_1.default];
    exports._CREATE_CALL_DEPLOYMENTS = _CREATE_CALL_DEPLOYMENTS;
    var sign_message_lib_json_1 = __importDefault(require_sign_message_lib());
    var sign_message_lib_json_2 = __importDefault(require_sign_message_lib2());
    var sign_message_lib_json_3 = __importDefault(require_sign_message_lib3());
    var _SIGN_MESSAGE_LIB_DEPLOYMENTS = [
      sign_message_lib_json_3.default,
      sign_message_lib_json_2.default,
      sign_message_lib_json_1.default
    ];
    exports._SIGN_MESSAGE_LIB_DEPLOYMENTS = _SIGN_MESSAGE_LIB_DEPLOYMENTS;
    var safe_migration_json_1 = __importDefault(require_safe_migration());
    var safe_migration_json_2 = __importDefault(require_safe_migration2());
    var _SAFE_MIGRATION_DEPLOYMENTS = [safe_migration_json_2.default, safe_migration_json_1.default];
    exports._SAFE_MIGRATION_DEPLOYMENTS = _SAFE_MIGRATION_DEPLOYMENTS;
    var safe_to_l2_migration_json_1 = __importDefault(require_safe_to_l2_migration());
    var _SAFE_TO_L2_MIGRATION_DEPLOYMENTS = [safe_to_l2_migration_json_1.default];
    exports._SAFE_TO_L2_MIGRATION_DEPLOYMENTS = _SAFE_TO_L2_MIGRATION_DEPLOYMENTS;
    var safe_to_l2_setup_json_1 = __importDefault(require_safe_to_l2_setup());
    var safe_to_l2_setup_json_2 = __importDefault(require_safe_to_l2_setup2());
    var _SAFE_TO_L2_SETUP_DEPLOYMENTS = [safe_to_l2_setup_json_2.default, safe_to_l2_setup_json_1.default];
    exports._SAFE_TO_L2_SETUP_DEPLOYMENTS = _SAFE_TO_L2_SETUP_DEPLOYMENTS;
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/utils.js
var require_utils4 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findDeployment = findDeployment;
    var satisfies_1 = __importDefault(require_satisfies());
    var DEFAULT_FILTER = { released: true };
    var DEFAULT_NETWORK_CHAIN_ID = "1";
    var mapJsonToDeploymentsFormatV1 = (deployment) => {
      const defaultAddressType = Array.isArray(deployment.networkAddresses[DEFAULT_NETWORK_CHAIN_ID]) ? deployment.networkAddresses[DEFAULT_NETWORK_CHAIN_ID][0] : deployment.networkAddresses[DEFAULT_NETWORK_CHAIN_ID];
      const defaultAddress = deployment.deployments[defaultAddressType].address;
      const networkAddresses = Object.fromEntries(Object.entries(deployment.networkAddresses).map(([chainId, addressTypes]) => [
        chainId,
        Array.isArray(addressTypes) ? deployment.deployments[addressTypes[0]].address : deployment.deployments[addressTypes].address
      ]));
      return Object.assign(Object.assign({}, deployment), { defaultAddress, networkAddresses });
    };
    var mapJsonToDeploymentsFormatV2 = (deployment) => Object.assign(Object.assign({}, deployment), { networkAddresses: Object.fromEntries(Object.entries(deployment.networkAddresses).map(([chainId, addressTypes]) => [
      chainId,
      Array.isArray(addressTypes) ? (
        // The usage of non-null assertion below is safe, because we validate that the asset files are properly formed in tests
        addressTypes.map((addressType) => deployment.deployments[addressType].address)
      ) : deployment.deployments[addressTypes].address
    ])) });
    function findDeployment(criteria = DEFAULT_FILTER, deployments, format = "singleton") {
      const { version: version25, released, network } = Object.assign(Object.assign({}, DEFAULT_FILTER), criteria);
      const deploymentJson = deployments.find((deployment) => {
        if (version25 && !(0, satisfies_1.default)(deployment.version, version25))
          return false;
        if (typeof released === "boolean" && deployment.released !== released)
          return false;
        if (network && !deployment.networkAddresses[network])
          return false;
        return true;
      });
      if (!deploymentJson)
        return void 0;
      if (format === "multiple") {
        return mapJsonToDeploymentsFormatV2(deploymentJson);
      } else {
        return mapJsonToDeploymentsFormatV1(deploymentJson);
      }
    }
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/safes.js
var require_safes = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/safes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSafeL2SingletonDeployments = exports.getSafeL2SingletonDeployment = exports.getSafeSingletonDeployments = exports.getSafeSingletonDeployment = void 0;
    var deployments_1 = require_deployments();
    var utils_12 = require_utils4();
    var getSafeSingletonDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._SAFE_DEPLOYMENTS);
    };
    exports.getSafeSingletonDeployment = getSafeSingletonDeployment;
    var getSafeSingletonDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._SAFE_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getSafeSingletonDeployments = getSafeSingletonDeployments;
    var getSafeL2SingletonDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._SAFE_L2_DEPLOYMENTS);
    };
    exports.getSafeL2SingletonDeployment = getSafeL2SingletonDeployment;
    var getSafeL2SingletonDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._SAFE_L2_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getSafeL2SingletonDeployments = getSafeL2SingletonDeployments;
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/factories.js
var require_factories = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/factories.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProxyFactoryDeployments = exports.getProxyFactoryDeployment = void 0;
    var utils_12 = require_utils4();
    var deployments_1 = require_deployments();
    var getProxyFactoryDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._FACTORY_DEPLOYMENTS);
    };
    exports.getProxyFactoryDeployment = getProxyFactoryDeployment;
    var getProxyFactoryDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._FACTORY_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getProxyFactoryDeployments = getProxyFactoryDeployments;
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/libs.js
var require_libs = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/libs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSafeToL2SetupDeployments = exports.getSafeToL2SetupDeployment = exports.getSafeToL2MigrationDeployments = exports.getSafeToL2MigrationDeployment = exports.getSafeMigrationDeployments = exports.getSafeMigrationDeployment = exports.getSignMessageLibDeployments = exports.getSignMessageLibDeployment = exports.getCreateCallDeployments = exports.getCreateCallDeployment = exports.getMultiSendCallOnlyDeployments = exports.getMultiSendCallOnlyDeployment = exports.getMultiSendDeployments = exports.getMultiSendDeployment = void 0;
    var deployments_1 = require_deployments();
    var utils_12 = require_utils4();
    var getMultiSendDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._MULTI_SEND_DEPLOYMENTS);
    };
    exports.getMultiSendDeployment = getMultiSendDeployment;
    var getMultiSendDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._MULTI_SEND_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getMultiSendDeployments = getMultiSendDeployments;
    var getMultiSendCallOnlyDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._MULTI_SEND_CALL_ONLY_DEPLOYMENTS);
    };
    exports.getMultiSendCallOnlyDeployment = getMultiSendCallOnlyDeployment;
    var getMultiSendCallOnlyDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._MULTI_SEND_CALL_ONLY_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getMultiSendCallOnlyDeployments = getMultiSendCallOnlyDeployments;
    var getCreateCallDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._CREATE_CALL_DEPLOYMENTS);
    };
    exports.getCreateCallDeployment = getCreateCallDeployment;
    var getCreateCallDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._CREATE_CALL_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getCreateCallDeployments = getCreateCallDeployments;
    var getSignMessageLibDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._SIGN_MESSAGE_LIB_DEPLOYMENTS);
    };
    exports.getSignMessageLibDeployment = getSignMessageLibDeployment;
    var getSignMessageLibDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._SIGN_MESSAGE_LIB_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getSignMessageLibDeployments = getSignMessageLibDeployments;
    var getSafeMigrationDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._SAFE_MIGRATION_DEPLOYMENTS);
    };
    exports.getSafeMigrationDeployment = getSafeMigrationDeployment;
    var getSafeMigrationDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._SAFE_MIGRATION_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getSafeMigrationDeployments = getSafeMigrationDeployments;
    var getSafeToL2MigrationDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._SAFE_TO_L2_MIGRATION_DEPLOYMENTS);
    };
    exports.getSafeToL2MigrationDeployment = getSafeToL2MigrationDeployment;
    var getSafeToL2MigrationDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._SAFE_TO_L2_MIGRATION_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getSafeToL2MigrationDeployments = getSafeToL2MigrationDeployments;
    var getSafeToL2SetupDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._SAFE_TO_L2_SETUP_DEPLOYMENTS);
    };
    exports.getSafeToL2SetupDeployment = getSafeToL2SetupDeployment;
    var getSafeToL2SetupDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._SAFE_TO_L2_SETUP_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getSafeToL2SetupDeployments = getSafeToL2SetupDeployments;
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/handler.js
var require_handler = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFallbackHandlerDeployment = exports.getExtensibleFallbackHandlerDeployments = exports.getExtensibleFallbackHandlerDeployment = exports.getCompatibilityFallbackHandlerDeployments = exports.getCompatibilityFallbackHandlerDeployment = exports.getDefaultCallbackHandlerDeployments = exports.getTokenCallbackHandlerDeployments = exports.getDefaultCallbackHandlerDeployment = exports.getTokenCallbackHandlerDeployment = void 0;
    var utils_12 = require_utils4();
    var deployments_1 = require_deployments();
    var getTokenCallbackHandlerDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._TOKEN_CALLBACK_HANDLER_DEPLOYMENTS);
    };
    exports.getTokenCallbackHandlerDeployment = getTokenCallbackHandlerDeployment;
    exports.getDefaultCallbackHandlerDeployment = exports.getTokenCallbackHandlerDeployment;
    var getTokenCallbackHandlerDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._TOKEN_CALLBACK_HANDLER_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getTokenCallbackHandlerDeployments = getTokenCallbackHandlerDeployments;
    exports.getDefaultCallbackHandlerDeployments = exports.getTokenCallbackHandlerDeployments;
    var getCompatibilityFallbackHandlerDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._COMPAT_FALLBACK_HANDLER_DEPLOYMENTS);
    };
    exports.getCompatibilityFallbackHandlerDeployment = getCompatibilityFallbackHandlerDeployment;
    var getCompatibilityFallbackHandlerDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._COMPAT_FALLBACK_HANDLER_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getCompatibilityFallbackHandlerDeployments = getCompatibilityFallbackHandlerDeployments;
    var getExtensibleFallbackHandlerDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._EXTENSIBLE_FALLBACK_HANDLER_DEPLOYMENTS);
    };
    exports.getExtensibleFallbackHandlerDeployment = getExtensibleFallbackHandlerDeployment;
    var getExtensibleFallbackHandlerDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._EXTENSIBLE_FALLBACK_HANDLER_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getExtensibleFallbackHandlerDeployments = getExtensibleFallbackHandlerDeployments;
    exports.getFallbackHandlerDeployment = exports.getCompatibilityFallbackHandlerDeployment;
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/accessors.js
var require_accessors = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/accessors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSimulateTxAccessorDeployments = exports.getSimulateTxAccessorDeployment = void 0;
    var utils_12 = require_utils4();
    var deployments_1 = require_deployments();
    var getSimulateTxAccessorDeployment = (filter) => {
      return (0, utils_12.findDeployment)(filter, deployments_1._ACCESSOR_DEPLOYMENTS);
    };
    exports.getSimulateTxAccessorDeployment = getSimulateTxAccessorDeployment;
    var getSimulateTxAccessorDeployments = (filter) => {
      return (0, utils_12.findDeployment)(
        filter,
        deployments_1._ACCESSOR_DEPLOYMENTS,
        "multiple"
        /* DeploymentFormats.MULTIPLE */
      );
    };
    exports.getSimulateTxAccessorDeployments = getSimulateTxAccessorDeployments;
  }
});

// node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-deployments@1.37.45/node_modules/@safe-global/safe-deployments/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_types2(), exports);
    __exportStar(require_safes(), exports);
    __exportStar(require_factories(), exports);
    __exportStar(require_libs(), exports);
    __exportStar(require_handler(), exports);
    __exportStar(require_accessors(), exports);
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-adapters@0.1.0-alpha.19_@ethersproject+abstract-provider@5.8.0_f206e203843fdb269f81a28f46761ebb/node_modules/@safe-global/safe-ethers-adapters/dist/src/utils.js
var require_utils5 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-adapters@0.1.0-alpha.19_@ethersproject+abstract-provider@5.8.0_f206e203843fdb269f81a28f46761ebb/node_modules/@safe-global/safe-ethers-adapters/dist/src/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapReceipt = exports.createLibInterface = exports.createLibAddress = exports.createLibDeployment = void 0;
    var abi_1 = (init_lib5(), __toCommonJS(lib_exports5));
    var address_1 = (init_lib3(), __toCommonJS(lib_exports3));
    var safe_deployments_1 = require_dist2();
    exports.createLibDeployment = (0, safe_deployments_1.getCreateCallDeployment)();
    exports.createLibAddress = exports.createLibDeployment.defaultAddress;
    exports.createLibInterface = new abi_1.Interface(exports.createLibDeployment.abi);
    var mapStatus = (receipt) => {
      const success = receipt.logs.find((log) => log.topics[0] === "0x442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e");
      return !!success ? 1 : 0;
    };
    var mapContractAddress = (receipt, safeTx) => {
      if (safeTx.to.toLowerCase() === exports.createLibAddress.toLowerCase()) {
        const creationLog = receipt.logs.find((log) => log.topics[0] === "0x4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511");
        if (creationLog)
          return (0, address_1.getAddress)("0x" + creationLog.data.slice(creationLog.data.length - 40));
      }
      return receipt.contractAddress;
    };
    var mapReceipt = (receipt, safeTx) => {
      receipt.status = mapStatus(receipt);
      receipt.contractAddress = mapContractAddress(receipt, safeTx);
      return receipt;
    };
    exports.mapReceipt = mapReceipt;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-adapters@0.1.0-alpha.19_@ethersproject+abstract-provider@5.8.0_f206e203843fdb269f81a28f46761ebb/node_modules/@safe-global/safe-ethers-adapters/dist/src/signer.js
var require_signer = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-adapters@0.1.0-alpha.19_@ethersproject+abstract-provider@5.8.0_f206e203843fdb269f81a28f46761ebb/node_modules/@safe-global/safe-ethers-adapters/dist/src/signer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SafeEthersSigner = void 0;
    var abstract_signer_1 = (init_lib6(), __toCommonJS(lib_exports6));
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_types_1 = require_src();
    var utils_12 = require_utils5();
    var sleep = (duration) => new Promise((resolve) => setTimeout(resolve, duration));
    var SafeEthersSigner2 = class extends abstract_signer_1.VoidSigner {
      /**
       * Creates an instance of the SafeEthersSigner.
       * @param safe - Safe that should be used
       * @param service - Services to which the transactions should be proposed to
       * @param provider - (Optional) Provider that should be used for blockchain interactions. By default the provider from the signer is used.
       * @param options - (Optional) Additional options (e.g. polling delay when waiting for a transaction to be mined)
       * @returns The SafeEthersSigner instance
       */
      constructor(safe, service, provider, options) {
        super(safe.getAddress(), provider);
        this.service = service;
        this.safe = safe;
        this.options = options;
      }
      async buildTransactionResponse(safeTxHash, safeTx) {
        const connectedSafe = await this.safe;
        const connectedService = this.service;
        return {
          to: safeTx.to,
          value: bignumber_1.BigNumber.from(safeTx.value),
          data: safeTx.data,
          operation: safeTx.operation,
          gasLimit: bignumber_1.BigNumber.from(safeTx.safeTxGas),
          gasPrice: bignumber_1.BigNumber.from(0),
          nonce: safeTx.nonce,
          chainId: await connectedSafe.getChainId(),
          hash: safeTxHash,
          from: this.address,
          confirmations: 0,
          wait: async (confirmations) => {
            var _a, _b;
            while (true) {
              try {
                const txDetails = await connectedService.getSafeTxDetails(safeTxHash);
                if (txDetails.transactionHash) {
                  this._checkProvider("sendTransaction");
                  const receipt = await this.provider.waitForTransaction(txDetails.transactionHash, confirmations);
                  return (0, utils_12.mapReceipt)(receipt, safeTx);
                }
              } catch (e) {
              }
              await sleep((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.pollingDelay) !== null && _b !== void 0 ? _b : 5e3);
            }
          }
        };
      }
      /**
       * Populates all fields in a transaction, signs it and sends it to the Safe transaction service
       *
       * @param transaction - The transaction what should be send
       * @returns A promise that resolves to a SafeTransactionReponse, that contains all the information of the transaction.
       */
      async sendTransaction(transaction) {
        var _a, _b, _c;
        const tx = await transaction;
        let operation = safe_core_sdk_types_1.OperationType.Call;
        let to = await tx.to;
        let data = (_b = (_a = await tx.data) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "0x";
        let value = bignumber_1.BigNumber.from((_c = await tx.value) !== null && _c !== void 0 ? _c : 0);
        if (!to) {
          to = utils_12.createLibAddress;
          data = utils_12.createLibInterface.encodeFunctionData("performCreate", [value, data]);
          value = bignumber_1.BigNumber.from(0);
          operation = safe_core_sdk_types_1.OperationType.DelegateCall;
        }
        const baseTx = {
          to,
          data,
          value: value.toString(),
          operation
        };
        const safeTxGas = await this.service.estimateSafeTx(this.address, baseTx);
        const connectedSafe = await this.safe;
        const safeTransactionData = {
          ...baseTx,
          safeTxGas: safeTxGas.toNumber()
        };
        const safeTx = await connectedSafe.createTransaction({ safeTransactionData });
        const safeTxHash = await connectedSafe.getTransactionHash(safeTx);
        const signature2 = await connectedSafe.signTransactionHash(safeTxHash);
        await this.service.proposeTx(this.address, safeTxHash, safeTx, signature2);
        return this.buildTransactionResponse(safeTxHash, safeTx.data);
      }
    };
    exports.SafeEthersSigner = SafeEthersSigner2;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-adapters@0.1.0-alpha.19_@ethersproject+abstract-provider@5.8.0_f206e203843fdb269f81a28f46761ebb/node_modules/@safe-global/safe-ethers-adapters/dist/src/index.js
var require_src2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-adapters@0.1.0-alpha.19_@ethersproject+abstract-provider@5.8.0_f206e203843fdb269f81a28f46761ebb/node_modules/@safe-global/safe-ethers-adapters/dist/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_service(), exports);
    __exportStar(require_signer(), exports);
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js
var require_config = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.safeDeploymentsL1ChainIds = exports.safeDeploymentsVersions = exports.SAFE_BASE_VERSION = exports.SAFE_LAST_VERSION = void 0;
    exports.SAFE_LAST_VERSION = "1.3.0";
    exports.SAFE_BASE_VERSION = "1.0.0";
    exports.safeDeploymentsVersions = {
      "1.3.0": {
        safeMasterCopyVersion: "1.3.0",
        safeMasterCopyL2Version: "1.3.0",
        safeProxyFactoryVersion: "1.3.0",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.3.0",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      },
      "1.2.0": {
        safeMasterCopyVersion: "1.2.0",
        safeMasterCopyL2Version: void 0,
        safeProxyFactoryVersion: "1.1.1",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.1.1",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      },
      "1.1.1": {
        safeMasterCopyVersion: "1.1.1",
        safeMasterCopyL2Version: void 0,
        safeProxyFactoryVersion: "1.1.1",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.1.1",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      },
      "1.0.0": {
        safeMasterCopyVersion: "1.0.0",
        safeMasterCopyL2Version: void 0,
        safeProxyFactoryVersion: "1.0.0",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.1.1",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      }
    };
    exports.safeDeploymentsL1ChainIds = [
      1
      // Ethereum Mainnet
    ];
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/safeDeploymentContracts.js
var require_safeDeploymentContracts = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/safeDeploymentContracts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCreateCallContract = exports.getSignMessageLibContract = exports.getMultiSendCallOnlyContract = exports.getMultiSendContract = exports.getCompatibilityFallbackHandlerContract = exports.getProxyFactoryContract = exports.getSafeContract = exports.getCreateCallContractDeployment = exports.getSignMessageLibContractDeployment = exports.getSafeProxyFactoryContractDeployment = exports.getMultiSendContractDeployment = exports.getMultiSendCallOnlyContractDeployment = exports.getCompatibilityFallbackHandlerContractDeployment = exports.getSafeContractDeployment = void 0;
    var safe_deployments_1 = require_dist2();
    var config_1 = require_config();
    function getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy = false) {
      const version25 = config_1.safeDeploymentsVersions[safeVersion].safeMasterCopyVersion;
      const filters = { version: version25, network: chainId.toString(), released: true };
      if (config_1.safeDeploymentsL1ChainIds.includes(chainId) || isL1SafeMasterCopy) {
        return (0, safe_deployments_1.getSafeSingletonDeployment)(filters);
      }
      return (0, safe_deployments_1.getSafeL2SingletonDeployment)(filters);
    }
    exports.getSafeContractDeployment = getSafeContractDeployment;
    function getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId) {
      const version25 = config_1.safeDeploymentsVersions[safeVersion].compatibilityFallbackHandler;
      return (0, safe_deployments_1.getCompatibilityFallbackHandlerDeployment)({
        version: version25,
        network: chainId.toString(),
        released: true
      });
    }
    exports.getCompatibilityFallbackHandlerContractDeployment = getCompatibilityFallbackHandlerContractDeployment;
    function getMultiSendCallOnlyContractDeployment(safeVersion, chainId) {
      const version25 = config_1.safeDeploymentsVersions[safeVersion].multiSendCallOnlyVersion;
      return (0, safe_deployments_1.getMultiSendCallOnlyDeployment)({ version: version25, network: chainId.toString(), released: true });
    }
    exports.getMultiSendCallOnlyContractDeployment = getMultiSendCallOnlyContractDeployment;
    function getMultiSendContractDeployment(safeVersion, chainId) {
      const version25 = config_1.safeDeploymentsVersions[safeVersion].multiSendVersion;
      return (0, safe_deployments_1.getMultiSendDeployment)({ version: version25, network: chainId.toString(), released: true });
    }
    exports.getMultiSendContractDeployment = getMultiSendContractDeployment;
    function getSafeProxyFactoryContractDeployment(safeVersion, chainId) {
      const version25 = config_1.safeDeploymentsVersions[safeVersion].safeProxyFactoryVersion;
      return (0, safe_deployments_1.getProxyFactoryDeployment)({ version: version25, network: chainId.toString(), released: true });
    }
    exports.getSafeProxyFactoryContractDeployment = getSafeProxyFactoryContractDeployment;
    function getSignMessageLibContractDeployment(safeVersion, chainId) {
      const version25 = config_1.safeDeploymentsVersions[safeVersion].signMessageLibVersion;
      return (0, safe_deployments_1.getSignMessageLibDeployment)({ version: version25, network: chainId.toString(), released: true });
    }
    exports.getSignMessageLibContractDeployment = getSignMessageLibContractDeployment;
    function getCreateCallContractDeployment(safeVersion, chainId) {
      const version25 = config_1.safeDeploymentsVersions[safeVersion].createCallVersion;
      return (0, safe_deployments_1.getCreateCallDeployment)({ version: version25, network: chainId.toString(), released: true });
    }
    exports.getCreateCallContractDeployment = getCreateCallContractDeployment;
    async function getSafeContract({ ethAdapter, safeVersion, chainId, customSafeAddress, isL1SafeMasterCopy, customContracts }) {
      const singletonDeployment = getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy);
      const gnosisSafeContract = ethAdapter.getSafeContract({
        safeVersion,
        chainId,
        singletonDeployment,
        customContractAddress: customSafeAddress !== null && customSafeAddress !== void 0 ? customSafeAddress : customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(gnosisSafeContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SafeProxy contract is not deployed on the current network");
      }
      return gnosisSafeContract;
    }
    exports.getSafeContract = getSafeContract;
    async function getProxyFactoryContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const proxyFactoryDeployment = getSafeProxyFactoryContractDeployment(safeVersion, chainId);
      const safeProxyFactoryContract = await ethAdapter.getSafeProxyFactoryContract({
        safeVersion,
        chainId,
        singletonDeployment: proxyFactoryDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(safeProxyFactoryContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SafeProxyFactory contract is not deployed on the current network");
      }
      return safeProxyFactoryContract;
    }
    exports.getProxyFactoryContract = getProxyFactoryContract;
    async function getCompatibilityFallbackHandlerContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const fallbackHandlerDeployment = getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId);
      const fallbackHandlerContract = await ethAdapter.getCompatibilityFallbackHandlerContract({
        safeVersion,
        chainId,
        singletonDeployment: fallbackHandlerDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(fallbackHandlerContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("CompatibilityFallbackHandler contract is not deployed on the current network");
      }
      return fallbackHandlerContract;
    }
    exports.getCompatibilityFallbackHandlerContract = getCompatibilityFallbackHandlerContract;
    async function getMultiSendContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const multiSendDeployment = getMultiSendContractDeployment(safeVersion, chainId);
      const multiSendContract = await ethAdapter.getMultiSendContract({
        safeVersion,
        chainId,
        singletonDeployment: multiSendDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(multiSendContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("MultiSend contract is not deployed on the current network");
      }
      return multiSendContract;
    }
    exports.getMultiSendContract = getMultiSendContract;
    async function getMultiSendCallOnlyContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const multiSendCallOnlyDeployment = getMultiSendCallOnlyContractDeployment(safeVersion, chainId);
      const multiSendCallOnlyContract = await ethAdapter.getMultiSendCallOnlyContract({
        safeVersion,
        chainId,
        singletonDeployment: multiSendCallOnlyDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(multiSendCallOnlyContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("MultiSendCallOnly contract is not deployed on the current network");
      }
      return multiSendCallOnlyContract;
    }
    exports.getMultiSendCallOnlyContract = getMultiSendCallOnlyContract;
    async function getSignMessageLibContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const signMessageLibDeployment = getSignMessageLibContractDeployment(safeVersion, chainId);
      const signMessageLibContract = await ethAdapter.getSignMessageLibContract({
        safeVersion,
        chainId,
        singletonDeployment: signMessageLibDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(signMessageLibContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SignMessageLib contract is not deployed on the current network");
      }
      return signMessageLibContract;
    }
    exports.getSignMessageLibContract = getSignMessageLibContract;
    async function getCreateCallContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const createCallDeployment = getCreateCallContractDeployment(safeVersion, chainId);
      const createCallContract = await ethAdapter.getCreateCallContract({
        safeVersion,
        chainId,
        singletonDeployment: createCallDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(createCallContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("CreateCall contract is not deployed on the current network");
      }
      return createCallContract;
    }
    exports.getCreateCallContract = getCreateCallContract;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/contractManager.js
var require_contractManager = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/contractManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _ContractManager_contractNetworks;
    var _ContractManager_isL1SafeMasterCopy;
    var _ContractManager_safeContract;
    var _ContractManager_multiSendContract;
    var _ContractManager_multiSendCallOnlyContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var config_1 = require_config();
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    var ContractManager = class _ContractManager {
      constructor() {
        _ContractManager_contractNetworks.set(this, void 0);
        _ContractManager_isL1SafeMasterCopy.set(this, void 0);
        _ContractManager_safeContract.set(this, void 0);
        _ContractManager_multiSendContract.set(this, void 0);
        _ContractManager_multiSendCallOnlyContract.set(this, void 0);
      }
      static async create({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        const contractManager = new _ContractManager();
        await contractManager.init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks });
        return contractManager;
      }
      async init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        const chainId = await ethAdapter.getChainId();
        const customContracts = contractNetworks === null || contractNetworks === void 0 ? void 0 : contractNetworks[chainId];
        __classPrivateFieldSet(this, _ContractManager_contractNetworks, contractNetworks, "f");
        __classPrivateFieldSet(this, _ContractManager_isL1SafeMasterCopy, isL1SafeMasterCopy, "f");
        const temporarySafeContract = await (0, safeDeploymentContracts_1.getSafeContract)({
          ethAdapter,
          safeVersion: config_1.SAFE_LAST_VERSION,
          chainId,
          isL1SafeMasterCopy,
          customSafeAddress: safeAddress,
          customContracts
        });
        const safeVersion = await temporarySafeContract.getVersion();
        __classPrivateFieldSet(this, _ContractManager_safeContract, await (0, safeDeploymentContracts_1.getSafeContract)({
          ethAdapter,
          safeVersion,
          chainId,
          isL1SafeMasterCopy,
          customSafeAddress: safeAddress,
          customContracts
        }), "f");
        __classPrivateFieldSet(this, _ContractManager_multiSendContract, await (0, safeDeploymentContracts_1.getMultiSendContract)({
          ethAdapter,
          safeVersion,
          chainId,
          customContracts
        }), "f");
        __classPrivateFieldSet(this, _ContractManager_multiSendCallOnlyContract, await (0, safeDeploymentContracts_1.getMultiSendCallOnlyContract)({
          ethAdapter,
          safeVersion,
          chainId,
          customContracts
        }), "f");
      }
      get contractNetworks() {
        return __classPrivateFieldGet(this, _ContractManager_contractNetworks, "f");
      }
      get isL1SafeMasterCopy() {
        return __classPrivateFieldGet(this, _ContractManager_isL1SafeMasterCopy, "f");
      }
      get safeContract() {
        return __classPrivateFieldGet(this, _ContractManager_safeContract, "f");
      }
      get multiSendContract() {
        return __classPrivateFieldGet(this, _ContractManager_multiSendContract, "f");
      }
      get multiSendCallOnlyContract() {
        return __classPrivateFieldGet(this, _ContractManager_multiSendCallOnlyContract, "f");
      }
    };
    _ContractManager_contractNetworks = /* @__PURE__ */ new WeakMap(), _ContractManager_isL1SafeMasterCopy = /* @__PURE__ */ new WeakMap(), _ContractManager_safeContract = /* @__PURE__ */ new WeakMap(), _ContractManager_multiSendContract = /* @__PURE__ */ new WeakMap(), _ContractManager_multiSendCallOnlyContract = /* @__PURE__ */ new WeakMap();
    exports.default = ContractManager;
  }
});

// node_modules/.pnpm/bn.js@4.11.6/node_modules/bn.js/lib/bn.js
var require_bn3 = __commonJS({
  "node_modules/.pnpm/bn.js@4.11.6/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        Buffer2 = require_buffer().Buffer;
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base2 === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base2, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 10;
          } else {
            r |= c & 15;
          }
        }
        return r;
      }
      BN3.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul3) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul3;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r = new BN3(null);
        this.copy(r);
        return r;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N2) {
        var t = new Array(N2);
        var l = BN3.prototype._countBits(N2) - 1;
        for (var i = 0; i < N2; i++) {
          t[i] = this.revBin(i, l, N2);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N2) {
        if (x === 0 || x === N2 - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N2) {
        for (var i = 0; i < N2; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N2, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N2);
        for (var s = 1; s < N2; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N2; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N2 = Math.max(m, n) | 1;
        var odd = N2 & 1;
        var i = 0;
        for (N2 = N2 / 2 | 0; N2; N2 = N2 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N2) {
        if (N2 <= 1) return;
        for (var i = 0; i < N2 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N2 - i - 1];
          rws[N2 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N2 - i - 1];
          iws[N2 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N2) {
        var carry = 0;
        for (var i = 0; i < N2 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N2) * 8192 + Math.round(ws[2 * i] / N2) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N2) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N2; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N2) {
        var ph = new Array(N2);
        for (var i = 0; i < N2; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N2 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N2);
        var _ = this.stub(N2);
        var rws = new Array(N2);
        var rwst = new Array(N2);
        var iwst = new Array(N2);
        var nrws = new Array(N2);
        var nrwst = new Array(N2);
        var niwst = new Array(N2);
        var rmws = out.words;
        rmws.length = N2;
        this.convert13b(x.words, x.length, rws, N2);
        this.convert13b(y.words, y.length, nrws, N2);
        this.transform(rws, _, rwst, iwst, N2, rbt);
        this.transform(nrws, _, nrwst, niwst, N2, rbt);
        for (var i = 0; i < N2; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N2);
        this.transform(rwst, iwst, rmws, _, N2, rbt);
        this.conjugate(rmws, _, N2);
        this.normalize13b(rmws, N2);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN3(1);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero()) return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/.pnpm/is-hex-prefixed@1.0.0/node_modules/is-hex-prefixed/src/index.js
var require_src3 = __commonJS({
  "node_modules/.pnpm/is-hex-prefixed@1.0.0/node_modules/is-hex-prefixed/src/index.js"(exports, module) {
    module.exports = function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + typeof str + ", while checking isHexPrefixed.");
      }
      return str.slice(0, 2) === "0x";
    };
  }
});

// node_modules/.pnpm/strip-hex-prefix@1.0.0/node_modules/strip-hex-prefix/src/index.js
var require_src4 = __commonJS({
  "node_modules/.pnpm/strip-hex-prefix@1.0.0/node_modules/strip-hex-prefix/src/index.js"(exports, module) {
    var isHexPrefixed = require_src3();
    module.exports = function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
  }
});

// node_modules/.pnpm/number-to-bn@1.7.0/node_modules/number-to-bn/src/index.js
var require_src5 = __commonJS({
  "node_modules/.pnpm/number-to-bn@1.7.0/node_modules/number-to-bn/src/index.js"(exports, module) {
    var BN3 = require_bn3();
    var stripHexPrefix = require_src4();
    module.exports = function numberToBN(arg) {
      if (typeof arg === "string" || typeof arg === "number") {
        var multiplier = new BN3(1);
        var formattedString = String(arg).toLowerCase().trim();
        var isHexPrefixed = formattedString.substr(0, 2) === "0x" || formattedString.substr(0, 3) === "-0x";
        var stringArg = stripHexPrefix(formattedString);
        if (stringArg.substr(0, 1) === "-") {
          stringArg = stripHexPrefix(stringArg.slice(1));
          multiplier = new BN3(-1, 10);
        }
        stringArg = stringArg === "" ? "0" : stringArg;
        if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {
          return new BN3(stringArg, 16).mul(multiplier);
        }
        if ((stringArg.match(/^-?[0-9]+$/) || stringArg === "") && isHexPrefixed === false) {
          return new BN3(stringArg, 10).mul(multiplier);
        }
      } else if (typeof arg === "object" && arg.toString && (!arg.pop && !arg.push)) {
        if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
          return new BN3(arg.toString(10), 10);
        }
      }
      throw new Error("[number-to-bn] while converting number " + JSON.stringify(arg) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
    };
  }
});

// node_modules/.pnpm/ethjs-unit@0.1.6/node_modules/ethjs-unit/lib/index.js
var require_lib = __commonJS({
  "node_modules/.pnpm/ethjs-unit@0.1.6/node_modules/ethjs-unit/lib/index.js"(exports, module) {
    "use strict";
    var BN3 = require_bn3();
    var numberToBN = require_src5();
    var zero = new BN3(0);
    var negative1 = new BN3(-1);
    var unitMap = {
      "noether": "0",
      // eslint-disable-line
      "wei": "1",
      // eslint-disable-line
      "kwei": "1000",
      // eslint-disable-line
      "Kwei": "1000",
      // eslint-disable-line
      "babbage": "1000",
      // eslint-disable-line
      "femtoether": "1000",
      // eslint-disable-line
      "mwei": "1000000",
      // eslint-disable-line
      "Mwei": "1000000",
      // eslint-disable-line
      "lovelace": "1000000",
      // eslint-disable-line
      "picoether": "1000000",
      // eslint-disable-line
      "gwei": "1000000000",
      // eslint-disable-line
      "Gwei": "1000000000",
      // eslint-disable-line
      "shannon": "1000000000",
      // eslint-disable-line
      "nanoether": "1000000000",
      // eslint-disable-line
      "nano": "1000000000",
      // eslint-disable-line
      "szabo": "1000000000000",
      // eslint-disable-line
      "microether": "1000000000000",
      // eslint-disable-line
      "micro": "1000000000000",
      // eslint-disable-line
      "finney": "1000000000000000",
      // eslint-disable-line
      "milliether": "1000000000000000",
      // eslint-disable-line
      "milli": "1000000000000000",
      // eslint-disable-line
      "ether": "1000000000000000000",
      // eslint-disable-line
      "kether": "1000000000000000000000",
      // eslint-disable-line
      "grand": "1000000000000000000000",
      // eslint-disable-line
      "mether": "1000000000000000000000000",
      // eslint-disable-line
      "gether": "1000000000000000000000000000",
      // eslint-disable-line
      "tether": "1000000000000000000000000000000"
    };
    function getValueOfUnit(unitInput) {
      var unit = unitInput ? unitInput.toLowerCase() : "ether";
      var unitValue = unitMap[unit];
      if (typeof unitValue !== "string") {
        throw new Error("[ethjs-unit] the unit provided " + unitInput + " doesn't exists, please use the one of the following units " + JSON.stringify(unitMap, null, 2));
      }
      return new BN3(unitValue, 10);
    }
    function numberToString(arg) {
      if (typeof arg === "string") {
        if (!arg.match(/^-?[0-9.]+$/)) {
          throw new Error("while converting number to string, invalid number value '" + arg + "', should be a number matching (^-?[0-9.]+).");
        }
        return arg;
      } else if (typeof arg === "number") {
        return String(arg);
      } else if (typeof arg === "object" && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
        if (arg.toPrecision) {
          return String(arg.toPrecision());
        } else {
          return arg.toString(10);
        }
      }
      throw new Error("while converting number to string, invalid number value '" + arg + "' type " + typeof arg + ".");
    }
    function fromWei(weiInput, unit, optionsInput) {
      var wei = numberToBN(weiInput);
      var negative = wei.lt(zero);
      var base2 = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var options = optionsInput || {};
      if (negative) {
        wei = wei.mul(negative1);
      }
      var fraction = wei.mod(base2).toString(10);
      while (fraction.length < baseLength) {
        fraction = "0" + fraction;
      }
      if (!options.pad) {
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      }
      var whole = wei.div(base2).toString(10);
      if (options.commify) {
        whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      }
      var value = "" + whole + (fraction == "0" ? "" : "." + fraction);
      if (negative) {
        value = "-" + value;
      }
      return value;
    }
    function toWei(etherInput, unit) {
      var ether = numberToString(etherInput);
      var base2 = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var negative = ether.substring(0, 1) === "-";
      if (negative) {
        ether = ether.substring(1);
      }
      if (ether === ".") {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, invalid value");
      }
      var comps = ether.split(".");
      if (comps.length > 2) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei,  too many decimal points");
      }
      var whole = comps[0], fraction = comps[1];
      if (!whole) {
        whole = "0";
      }
      if (!fraction) {
        fraction = "0";
      }
      if (fraction.length > baseLength) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, too many decimal places");
      }
      while (fraction.length < baseLength) {
        fraction += "0";
      }
      whole = new BN3(whole);
      fraction = new BN3(fraction);
      var wei = whole.mul(base2).add(fraction);
      if (negative) {
        wei = wei.mul(negative1);
      }
      return new BN3(wei.toString(10), 10);
    }
    module.exports = {
      unitMap,
      numberToString,
      getValueOfUnit,
      fromWei,
      toWei
    };
  }
});

// node_modules/.pnpm/utf8@3.0.0/node_modules/utf8/utf8.js
var require_utf8 = __commonJS({
  "node_modules/.pnpm/utf8@3.0.0/node_modules/utf8/utf8.js"(exports) {
    (function(root) {
      var stringFromCharCode = String.fromCharCode;
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        var value;
        var extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        var length = array.length;
        var index = -1;
        var value;
        var output = "";
        while (++index < length) {
          value = array[index];
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
        }
        return output;
      }
      function checkScalarValue(codePoint) {
        if (codePoint >= 55296 && codePoint <= 57343) {
          throw Error(
            "Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value"
          );
        }
      }
      function createByte(codePoint, shift) {
        return stringFromCharCode(codePoint >> shift & 63 | 128);
      }
      function encodeCodePoint(codePoint) {
        if ((codePoint & 4294967168) == 0) {
          return stringFromCharCode(codePoint);
        }
        var symbol = "";
        if ((codePoint & 4294965248) == 0) {
          symbol = stringFromCharCode(codePoint >> 6 & 31 | 192);
        } else if ((codePoint & 4294901760) == 0) {
          checkScalarValue(codePoint);
          symbol = stringFromCharCode(codePoint >> 12 & 15 | 224);
          symbol += createByte(codePoint, 6);
        } else if ((codePoint & 4292870144) == 0) {
          symbol = stringFromCharCode(codePoint >> 18 & 7 | 240);
          symbol += createByte(codePoint, 12);
          symbol += createByte(codePoint, 6);
        }
        symbol += stringFromCharCode(codePoint & 63 | 128);
        return symbol;
      }
      function utf8encode(string) {
        var codePoints = ucs2decode(string);
        var length = codePoints.length;
        var index = -1;
        var codePoint;
        var byteString = "";
        while (++index < length) {
          codePoint = codePoints[index];
          byteString += encodeCodePoint(codePoint);
        }
        return byteString;
      }
      function readContinuationByte() {
        if (byteIndex >= byteCount) {
          throw Error("Invalid byte index");
        }
        var continuationByte = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((continuationByte & 192) == 128) {
          return continuationByte & 63;
        }
        throw Error("Invalid continuation byte");
      }
      function decodeSymbol() {
        var byte1;
        var byte2;
        var byte3;
        var byte4;
        var codePoint;
        if (byteIndex > byteCount) {
          throw Error("Invalid byte index");
        }
        if (byteIndex == byteCount) {
          return false;
        }
        byte1 = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((byte1 & 128) == 0) {
          return byte1;
        }
        if ((byte1 & 224) == 192) {
          byte2 = readContinuationByte();
          codePoint = (byte1 & 31) << 6 | byte2;
          if (codePoint >= 128) {
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 240) == 224) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          codePoint = (byte1 & 15) << 12 | byte2 << 6 | byte3;
          if (codePoint >= 2048) {
            checkScalarValue(codePoint);
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 248) == 240) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          byte4 = readContinuationByte();
          codePoint = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
          if (codePoint >= 65536 && codePoint <= 1114111) {
            return codePoint;
          }
        }
        throw Error("Invalid UTF-8 detected");
      }
      var byteArray;
      var byteCount;
      var byteIndex;
      function utf8decode(byteString) {
        byteArray = ucs2decode(byteString);
        byteCount = byteArray.length;
        byteIndex = 0;
        var codePoints = [];
        var tmp;
        while ((tmp = decodeSymbol()) !== false) {
          codePoints.push(tmp);
        }
        return ucs2encode(codePoints);
      }
      root.version = "3.0.0";
      root.encode = utf8encode;
      root.decode = utf8decode;
    })(typeof exports === "undefined" ? exports.utf8 = {} : exports);
  }
});

// node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/_assert.js
var require_assert2 = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/_assert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = exports.isBytes = void 0;
    function number(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`positive integer expected, not ${n}`);
    }
    exports.number = number;
    function bool(b) {
      if (typeof b !== "boolean")
        throw new Error(`boolean expected, not ${b}`);
    }
    exports.bool = bool;
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    exports.isBytes = isBytes2;
    function bytes(b, ...lengths) {
      if (!isBytes2(b))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
    }
    exports.bytes = bytes;
    function hash3(h) {
      if (typeof h !== "function" || typeof h.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number(h.outputLen);
      number(h.blockLen);
    }
    exports.hash = hash3;
    function exists(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    exports.exists = exists;
    function output(out, instance) {
      bytes(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    exports.output = output;
    var assert2 = { number, bool, bytes, hash: hash3, exists, output };
    exports.default = assert2;
  }
});

// node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/crypto.js
var require_crypto = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = void 0;
    exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/utils.js
var require_utils6 = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.byteSwap32 = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = exports.isBytes = void 0;
    var crypto_1 = require_crypto();
    var _assert_js_1 = require_assert2();
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    exports.isBytes = isBytes2;
    var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.u8 = u8;
    var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports.u32 = u32;
    var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.createView = createView;
    var rotr = (word, shift) => word << 32 - shift | word >>> shift;
    exports.rotr = rotr;
    var rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
    exports.rotl = rotl;
    exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    exports.byteSwap = byteSwap;
    exports.byteSwapIfBE = exports.isLE ? (n) => n : (n) => (0, exports.byteSwap)(n);
    function byteSwap32(arr) {
      for (let i = 0; i < arr.length; i++) {
        arr[i] = (0, exports.byteSwap)(arr[i]);
      }
    }
    exports.byteSwap32 = byteSwap32;
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      (0, _assert_js_1.bytes)(bytes);
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    exports.bytesToHex = bytesToHex;
    var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    exports.hexToBytes = hexToBytes;
    var nextTick = async () => {
    };
    exports.nextTick = nextTick;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    exports.asyncLoop = asyncLoop;
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports.utf8ToBytes = utf8ToBytes;
    function toBytes(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      (0, _assert_js_1.bytes)(data);
      return data;
    }
    exports.toBytes = toBytes;
    function concatBytes(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        (0, _assert_js_1.bytes)(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    exports.concatBytes = concatBytes;
    var Hash = class {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    };
    exports.Hash = Hash;
    var toStr = {}.toString;
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    exports.checkOpts = checkOpts;
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports.wrapConstructor = wrapConstructor;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports.randomBytes = randomBytes2;
  }
});

// node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/_md.js
var require_md = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/_md.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HashMD = exports.Maj = exports.Chi = void 0;
    var _assert_js_1 = require_assert2();
    var utils_js_1 = require_utils6();
    function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
    }
    var Chi = (a, b, c) => a & b ^ ~a & c;
    exports.Chi = Chi;
    var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
    exports.Maj = Maj;
    var HashMD = class extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
    };
    exports.HashMD = HashMD;
  }
});

// node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/sha256.js
var require_sha256 = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha224 = exports.sha256 = void 0;
    var _md_js_1 = require_md();
    var utils_js_1 = require_utils6();
    var SHA256_K = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var SHA256_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SHA256_W = new Uint32Array(64);
    var SHA256 = class extends _md_js_1.HashMD {
      constructor() {
        super(64, 32, 8, false);
        this.A = SHA256_IV[0] | 0;
        this.B = SHA256_IV[1] | 0;
        this.C = SHA256_IV[2] | 0;
        this.D = SHA256_IV[3] | 0;
        this.E = SHA256_IV[4] | 0;
        this.F = SHA256_IV[5] | 0;
        this.G = SHA256_IV[6] | 0;
        this.H = SHA256_IV[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
          const T1 = H + sigma1 + (0, _md_js_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
          const T2 = sigma0 + (0, _md_js_1.Maj)(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        SHA256_W.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    };
    var SHA224 = class extends SHA256 {
      constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
      }
    };
    exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
    exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
  }
});

// node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/hmac.js
var require_hmac = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/hmac.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac = exports.HMAC = void 0;
    var _assert_js_1 = require_assert2();
    var utils_js_1 = require_utils6();
    var HMAC = class extends utils_js_1.Hash {
      constructor(hash3, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash3);
        const key2 = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash3.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key2.length > blockLen ? hash3.create().update(key2).digest() : key2);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash3.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports.HMAC = HMAC;
    var hmac2 = (hash3, key2, message) => new HMAC(hash3, key2).update(message).digest();
    exports.hmac = hmac2;
    exports.hmac.create = (hash3, key2) => new HMAC(hash3, key2);
  }
});

// node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/utils.js
var require_utils7 = __commonJS({
  "node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bitMask = void 0;
    exports.isBytes = isBytes2;
    exports.abytes = abytes;
    exports.bytesToHex = bytesToHex;
    exports.numberToHexUnpadded = numberToHexUnpadded;
    exports.hexToNumber = hexToNumber;
    exports.hexToBytes = hexToBytes;
    exports.bytesToNumberBE = bytesToNumberBE;
    exports.bytesToNumberLE = bytesToNumberLE;
    exports.numberToBytesBE = numberToBytesBE;
    exports.numberToBytesLE = numberToBytesLE;
    exports.numberToVarBytesBE = numberToVarBytesBE;
    exports.ensureBytes = ensureBytes;
    exports.concatBytes = concatBytes;
    exports.equalBytes = equalBytes;
    exports.utf8ToBytes = utf8ToBytes;
    exports.bitLen = bitLen;
    exports.bitGet = bitGet;
    exports.bitSet = bitSet;
    exports.createHmacDrbg = createHmacDrbg;
    exports.validateObject = validateObject;
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    function abytes(item) {
      if (!isBytes2(item))
        throw new Error("Uint8Array expected");
    }
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      abytes(bytes);
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    }
    function hexToNumber(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return BigInt(hex === "" ? "0" : `0x${hex}`);
    }
    var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    function bytesToNumberBE(bytes) {
      return hexToNumber(bytesToHex(bytes));
    }
    function bytesToNumberLE(bytes) {
      abytes(bytes);
      return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    function numberToBytesBE(n, len) {
      return hexToBytes(n.toString(16).padStart(len * 2, "0"));
    }
    function numberToBytesLE(n, len) {
      return numberToBytesBE(n, len).reverse();
    }
    function numberToVarBytesBE(n) {
      return hexToBytes(numberToHexUnpadded(n));
    }
    function ensureBytes(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes(hex);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
      } else if (isBytes2(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    function concatBytes(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function equalBytes(a, b) {
      if (a.length !== b.length)
        return false;
      let diff = 0;
      for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
      return diff === 0;
    }
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function bitLen(n) {
      let len;
      for (len = 0; n > _0n; n >>= _1n, len += 1)
        ;
      return len;
    }
    function bitGet(n, pos) {
      return n >> BigInt(pos) & _1n;
    }
    function bitSet(n, pos, value) {
      return n | (value ? _1n : _0n) << BigInt(pos);
    }
    var bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;
    exports.bitMask = bitMask;
    var u8n = (data) => new Uint8Array(data);
    var u8fr = (arr) => Uint8Array.from(arr);
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n(hashLen);
      let k = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b) => hmacFn(k, v, ...b);
      const reseed2 = (seed = u8n()) => {
        k = h(u8fr([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr([1]), seed);
        v = h();
      };
      const gen = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed2(seed);
        let res = void 0;
        while (!(res = pred(gen())))
          reseed2();
        reset();
        return res;
      };
      return genUntil;
    }
    var validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || isBytes2(val),
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
      };
      for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object;
    }
  }
});

// node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/modular.js
var require_modular = __commonJS({
  "node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/modular.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNegativeLE = void 0;
    exports.mod = mod;
    exports.pow = pow;
    exports.pow2 = pow2;
    exports.invert = invert;
    exports.tonelliShanks = tonelliShanks;
    exports.FpSqrt = FpSqrt;
    exports.validateField = validateField;
    exports.FpPow = FpPow;
    exports.FpInvertBatch = FpInvertBatch;
    exports.FpDiv = FpDiv;
    exports.FpIsSquare = FpIsSquare;
    exports.nLength = nLength;
    exports.Field = Field;
    exports.FpSqrtOdd = FpSqrtOdd;
    exports.FpSqrtEven = FpSqrtEven;
    exports.hashToPrivateScalar = hashToPrivateScalar;
    exports.getFieldBytesLength = getFieldBytesLength;
    exports.getMinHashLength = getMinHashLength;
    exports.mapHashToField = mapHashToField;
    var utils_js_1 = require_utils7();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    var _5n = BigInt(5);
    var _8n = BigInt(8);
    var _9n = BigInt(9);
    var _16n = BigInt(16);
    function mod(a, b) {
      const result = a % b;
      return result >= _0n ? result : b + result;
    }
    function pow(num, power, modulo) {
      if (modulo <= _0n || power < _0n)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n)
        return _0n;
      let res = _1n;
      while (power > _0n) {
        if (power & _1n)
          res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n;
      }
      return res;
    }
    function pow2(x, power, modulo) {
      let res = x;
      while (power-- > _0n) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    function invert(number, modulo) {
      if (number === _0n || modulo <= _0n) {
        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      }
      let a = mod(number, modulo);
      let b = modulo;
      let x = _0n, y = _1n, u = _1n, v = _0n;
      while (a !== _0n) {
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
      }
      const gcd = b;
      if (gcd !== _1n)
        throw new Error("invert: does not exist");
      return mod(x, modulo);
    }
    function tonelliShanks(P) {
      const legendreC = (P - _1n) / _2n;
      let Q, S, Z;
      for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)
        ;
      for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)
        ;
      if (S === 1) {
        const p1div4 = (P + _1n) / _4n;
        return function tonelliFast(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q + _1n) / _2n;
      return function tonelliSlow(Fp, n) {
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
          throw new Error("Cannot find square root");
        let r = S;
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
        let x = Fp.pow(n, Q1div2);
        let b = Fp.pow(n, Q);
        while (!Fp.eql(b, Fp.ONE)) {
          if (Fp.eql(b, Fp.ZERO))
            return Fp.ZERO;
          let m = 1;
          for (let t2 = Fp.sqr(b); m < r; m++) {
            if (Fp.eql(t2, Fp.ONE))
              break;
            t2 = Fp.sqr(t2);
          }
          const ge = Fp.pow(g, _1n << BigInt(r - m - 1));
          g = Fp.sqr(ge);
          x = Fp.mul(x, ge);
          b = Fp.mul(b, g);
          r = m;
        }
        return x;
      };
    }
    function FpSqrt(P) {
      if (P % _4n === _3n) {
        const p1div4 = (P + _1n) / _4n;
        return function sqrt3mod4(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _8n === _5n) {
        const c1 = (P - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
          const n2 = Fp.mul(n, _2n);
          const v = Fp.pow(n2, c1);
          const nv = Fp.mul(n, v);
          const i = Fp.mul(Fp.mul(nv, _2n), v);
          const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _16n === _9n) {
      }
      return tonelliShanks(P);
    }
    var isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
    exports.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    function FpPow(f, num, power) {
      if (power < _0n)
        throw new Error("Expected power > 0");
      if (power === _0n)
        return f.ONE;
      if (power === _1n)
        return num;
      let p = f.ONE;
      let d = num;
      while (power > _0n) {
        if (power & _1n)
          p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n;
      }
      return p;
    }
    function FpInvertBatch(f, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
      }, f.ONE);
      const inverted = f.inv(lastMultiplied);
      nums.reduceRight((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
      }, inverted);
      return tmp;
    }
    function FpDiv(f, lhs, rhs) {
      return f.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f.ORDER) : f.inv(rhs));
    }
    function FpIsSquare(f) {
      const legendreConst = (f.ORDER - _1n) / _2n;
      return (x) => {
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
      };
    }
    function nLength(n, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    function Field(ORDER, bitLen, isLE = false, redef = {}) {
      if (ORDER <= _0n)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt(ORDER);
      const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n,
        ONE: _1n,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
          return _0n <= num && num < ORDER;
        },
        is0: (num) => num === _0n,
        isOdd: (num) => (num & _1n) === _1n,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
        invertBatch: (lst) => FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => c ? b : a,
        toBytes: (num) => isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes) => {
          if (bytes.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
          return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);
        }
      });
      return Object.freeze(f);
    }
    function FpSqrtOdd(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? root : Fp.neg(root);
    }
    function FpSqrtEven(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? Fp.neg(root) : root;
    }
    function hashToPrivateScalar(hash3, groupOrder, isLE = false) {
      hash3 = (0, utils_js_1.ensureBytes)("privateHash", hash3);
      const hashLen = hash3.length;
      const minLen = nLength(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash3) : (0, utils_js_1.bytesToNumberBE)(hash3);
      return mod(num, groupOrder - _1n) + _1n;
    }
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    function mapHashToField(key2, fieldOrder, isLE = false) {
      const len = key2.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key2) : (0, utils_js_1.bytesToNumberLE)(key2);
      const reduced = mod(num, fieldOrder - _1n) + _1n;
      return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
  }
});

// node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/curve.js
var require_curve = __commonJS({
  "node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wNAF = wNAF;
    exports.validateBasic = validateBasic;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils7();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    function wNAF(c, bits) {
      const constTimeNegate = (condition, item) => {
        const neg3 = item.negate();
        return condition ? neg3 : item;
      };
      const opts = (W) => {
        const windows = Math.ceil(bits / W) + 1;
        const windowSize = 2 ** (W - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n) {
          let p = c.ZERO;
          let d = elm;
          while (n > _0n) {
            if (n & _1n)
              p = p.add(d);
            d = d.double();
            n >>= _1n;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
          const { windows, windowSize } = opts(W);
          const points = [];
          let p = elm;
          let base2 = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base2 = p;
            points.push(base2);
            for (let i = 1; i < windowSize; i++) {
              base2 = base2.add(p);
              points.push(base2);
            }
            p = base2.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
          const { windows, windowSize } = opts(W);
          let p = c.ZERO;
          let f = c.BASE;
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n += _1n;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f = f.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f };
        },
        wNAFCached(P, precomputesMap, n, transform) {
          const W = P._WINDOW_SIZE || 1;
          let comp = precomputesMap.get(P);
          if (!comp) {
            comp = this.precomputeWindow(P, W);
            if (W !== 1) {
              precomputesMap.set(P, transform(comp));
            }
          }
          return this.wNAF(W, comp, n);
        }
      };
    }
    function validateBasic(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
  }
});

// node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass = __commonJS({
  "node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/weierstrass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DER = void 0;
    exports.weierstrassPoints = weierstrassPoints;
    exports.weierstrass = weierstrass;
    exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
    exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
    var curve_js_1 = require_curve();
    var mod = require_modular();
    var ut = require_utils7();
    var utils_js_1 = require_utils7();
    function validatePointOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    exports.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E } = exports.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data.subarray(len + 2) };
      },
      toSig(hex) {
        const { Err: E } = exports.DER;
        const data = typeof hex === "string" ? h2b(hex) : hex;
        ut.abytes(data);
        let l = data.length;
        if (l < 2 || data[0] != 48)
          throw new E("Invalid signature tag");
        if (data[1] !== l - 2)
          throw new E("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r, s };
      },
      hexFromSig(sig) {
        const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h = (num) => {
          const hex = num.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
      }
    };
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const toBytes = CURVE.toBytes || ((_c, point3, _isCompressed) => {
        const a = point3.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes) => {
        const tail = bytes.subarray(1);
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x);
        const x3 = Fp.mul(x2, x);
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key2) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key2 !== "bigint") {
          if (ut.isBytes(key2))
            key2 = ut.bytesToHex(key2);
          if (typeof key2 !== "string" || !lengths.includes(key2.length))
            throw new Error("Invalid key");
          key2 = key2.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key2 === "bigint" ? key2 : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key2, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key2}`);
        }
        if (wrapPrivateKey)
          num = mod.mod(num, n);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point2))
          throw new Error("ProjectivePoint expected");
      }
      class Point2 {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point2)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp.eql(i, Fp.ZERO);
          if (is0(x) && is0(y))
            return Point2.ZERO;
          return new Point2(x, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P = Point2.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point2(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point2(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point2(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point2.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
            const toInv = Fp.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
          const I = Point2.ZERO;
          if (n === _0n)
            return I;
          assertGE(n);
          if (n === _1n)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n || k2 > _0n) {
            if (k1 & _1n)
              k1p = k1p.add(d);
            if (k2 & _1n)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n;
            k2 >>= _1n;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point3, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point3 = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f } = this.wNAF(n);
            point3 = p;
            fake = f;
          }
          return Point2.normalizeZ([point3, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point2.BASE;
          const mul3 = (P, a2) => a2 === _0n || a2 === _1n || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul3(this, a).add(mul3(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x, py: y, pz: z } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z);
          const ax = Fp.mul(x, iz);
          const ay = Fp.mul(y, iz);
          const zz = Fp.mul(z, iz);
          if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
          if (!Fp.eql(zz, Fp.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point2, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n)
            return this;
          if (clearCofactor)
            return clearCofactor(Point2, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes(Point2, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point2.ZERO = new Point2(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point2,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n < num && num < Fp.ORDER;
      }
      function modN(a) {
        return mod.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point3, isCompressed) {
          const a = point3.toAffine();
          const x = Fp.toBytes(a.x);
          const cat = ut.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point3.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes) {
          const len = bytes.length;
          const head = bytes[0];
          const tail = bytes.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y;
            try {
              y = Fp.sqrt(y2);
            } catch (sqrtError) {
              const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
              throw new Error("Point is not on curve" + suffix);
            }
            const isYOdd = (y & _1n) === _1n;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n;
        return number > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
      class Signature2 {
        constructor(r, s, recovery) {
          this.r = r;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature2(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature2(r, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature2(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point2.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h * ir);
          const u2 = modN(s * ir);
          const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature2(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod.getMinHashLength(CURVE.n);
          return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point3 = Point2.BASE) {
          point3._setWindowSize(windowSize);
          point3.multiply(BigInt(3));
          return point3;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = ut.isBytes(item);
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point2)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point2.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes) {
        const num = ut.bytesToNumberBE(bytes);
        const delta = bytes.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN(bits2int(bytes));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash: hash3, randomBytes: randomBytes2 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash3(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes2(Fp.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point2.BASE.multiply(k).toAffine();
          const r = modN(q.x);
          if (r === _0n)
            return;
          const s = modN(ik * modN(m + r * d));
          if (s === _0n)
            return;
          let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature2(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign3(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point2.BASE._setWindowSize(8);
      function verify3(signature2, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature2;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || ut.isBytes(sg)) {
            try {
              _sig = Signature2.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports.DER.Err))
                throw derError;
              _sig = Signature2.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r2, s: s2 } = sg;
            _sig = new Signature2(r2, s2);
          } else {
            throw new Error("PARSE");
          }
          P = Point2.fromHex(publicKey);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN(h * is);
        const u2 = modN(r * is);
        const R = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
        if (!R)
          return false;
        const v = modN(R.x);
        return v === r;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign: sign3,
        verify: verify3,
        ProjectivePoint: Point2,
        Signature: Signature2,
        utils
      };
    }
    function SWUFpSqrtRatio(Fp, Z) {
      const q = Fp.ORDER;
      let l = _0n;
      for (let o = q - _1n; o % _2n === _0n; o /= _2n)
        l += _1n;
      const c1 = l;
      const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
      const c2 = (q - _1n) / _2n_pow_c1;
      const c3 = (c2 - _1n) / _2n;
      const c4 = _2n_pow_c1 - _1n;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z, c2);
      const c7 = Fp.pow(Z, (c2 + _1n) / _2n);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n; i--) {
          let tv52 = i - _2n;
          tv52 = _2n << tv52 - _1n;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n === _3n) {
        const c12 = (Fp.ORDER - _3n) / _4n;
        const c22 = Fp.sqrt(Fp.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU(Fp, opts) {
      mod.validateField(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x = Fp.cmov(x, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        x = Fp.div(x, tv4);
        return { x, y };
      };
    }
  }
});

// node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils = __commonJS({
  "node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/_shortw_utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHash = getHash;
    exports.createCurve = createCurve;
    var hmac_1 = require_hmac();
    var utils_12 = require_utils6();
    var weierstrass_js_1 = require_weierstrass();
    function getHash(hash3) {
      return {
        hash: hash3,
        hmac: (key2, ...msgs) => (0, hmac_1.hmac)(hash3, key2, (0, utils_12.concatBytes)(...msgs)),
        randomBytes: utils_12.randomBytes
      };
    }
    function createCurve(curveDef, defHash) {
      const create = (hash3) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash3) });
      return Object.freeze({ ...create(defHash), create });
    }
  }
});

// node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve = __commonJS({
  "node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/abstract/hash-to-curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expand_message_xmd = expand_message_xmd;
    exports.expand_message_xof = expand_message_xof;
    exports.hash_to_field = hash_to_field;
    exports.isogenyMap = isogenyMap;
    exports.createHasher = createHasher;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils7();
    var os2ip = utils_js_1.bytesToNumberBE;
    function i2osp(value, length) {
      if (value < 0 || value >= 1 << 8 * length) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
      }
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
      }
      return arr;
    }
    function anum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd(msg, DST, lenInBytes, H) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255)
        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (ell > 255)
        throw new Error("Invalid xmd length");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b = new Array(ell);
      const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
        b[i] = H((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    function expand_message_xof(msg, DST, lenInBytes, k, H) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    function hash_to_field(msg, count, options) {
      (0, utils_js_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash: hash3, expand, DST: _DST } = options;
      (0, utils_js_1.abytes)(msg);
      anum(count);
      const DST = typeof _DST === "string" ? (0, utils_js_1.utf8ToBytes)(_DST) : _DST;
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash3);
      } else if (expand === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash3);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
          const elm_offset = L * (j + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    function isogenyMap(field, map) {
      const COEFF = map.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x, y };
      };
    }
    function createHasher(Point2, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
          const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
          const u0 = Point2.fromAffine(mapToCurve(u[0]));
          const u1 = Point2.fromAffine(mapToCurve(u[1]));
          const P = u0.add(u1).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
          const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
          const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Same as encodeToCurve, but without hash
        mapToCurve(scalars) {
          if (!Array.isArray(scalars))
            throw new Error("mapToCurve: expected array of bigints");
          for (const i of scalars)
            if (typeof i !== "bigint")
              throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);
          const P = Point2.fromAffine(mapToCurve(scalars)).clearCofactor();
          P.assertValidity();
          return P;
        }
      };
    }
  }
});

// node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/secp256k1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
    var sha256_1 = require_sha256();
    var utils_12 = require_utils6();
    var _shortw_utils_js_1 = require_shortw_utils();
    var hash_to_curve_js_1 = require_hash_to_curve();
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils7();
    var weierstrass_js_1 = require_weierstrass();
    var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var divNearest = (a, b) => (a + b / _2n) / b;
    function sqrtMod(y) {
      const P = secp256k1P;
      const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;
      const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;
      const b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;
      const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;
      const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
      const root = (0, modular_js_1.pow2)(t2, _2n, P);
      if (!Fp.eql(Fp.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    var Fp = (0, modular_js_1.Field)(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      // equation params: a, b
      b: BigInt(7),
      // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
      Fp,
      // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
      n: secp256k1N,
      // Curve order, total count of valid points in the field
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      // Cofactor
      lowS: true,
      // Allow only low-S signatures by default in sign() and verify()
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    var _0n = BigInt(0);
    var fe = (x) => typeof x === "bigint" && _0n < x && x < secp256k1P;
    var ge = (x) => typeof x === "bigint" && _0n < x && x < secp256k1N;
    var TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    var pointToBytes = (point3) => point3.toRawBytes(true).slice(1);
    var numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
    var modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);
    var modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);
    var Point2 = exports.secp256k1.ProjectivePoint;
    var GmulAdd = (Q, a, b) => Point2.BASE.multiplyAndAddUnsafe(Q, a, b);
    function schnorrGetExtPubKey(priv) {
      let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point2.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x) {
      if (!fe(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP(x * x);
      const c = modP(xx * x + BigInt(7));
      let y = sqrtMod(c);
      if (y % _2n !== _0n)
        y = modP(-y);
      const p = new Point2(x, y, _1n);
      p.assertValidity();
      return p;
    }
    function challenge(...args) {
      return modN((0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(privateKey) {
      return schnorrGetExtPubKey(privateKey).bytes;
    }
    function schnorrSign(message, privateKey, auxRand = (0, utils_12.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/aux", a)));
      const rand2 = taggedHash("BIP0340/nonce", t, px, m);
      const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand2));
      if (k_ === _0n)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b(modN(k + e * d)), 32);
      if (!schnorrVerify(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify(signature2, message, publicKey) {
      const sig = (0, utils_js_1.ensureBytes)("signature", signature2, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub));
        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe(r))
          return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge(s))
          return false;
        const e = challenge(numTo32b(r), pointToBytes(P), m);
        const R = GmulAdd(P, s, modN(-e));
        if (!R || !R.hasEvenY() || R.toAffine().x !== r)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash,
        mod: modular_js_1.mod
      }
    }))();
    var isoMap = (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j) => BigInt(j)))))();
    var mapSWU = (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp.create(BigInt("-11"))
    }))();
    var htf = (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU(Fp.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports.hashToCurve = (() => htf.hashToCurve)();
    exports.encodeToCurve = (() => htf.encodeToCurve)();
  }
});

// node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/secp256k1.js
var require_secp256k12 = __commonJS({
  "node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/secp256k1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.secp256k1 = void 0;
    var secp256k1_1 = require_secp256k1();
    Object.defineProperty(exports, "secp256k1", { enumerable: true, get: function() {
      return secp256k1_1.secp256k1;
    } });
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/constants.js
var require_constants = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_WITHDRAWALS_PER_PAYLOAD = exports.RLP_EMPTY_STRING = exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.SECP256K1_ORDER_DIV_2 = exports.SECP256K1_ORDER = exports.MAX_INTEGER_BIGINT = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
    var buffer_1 = require_buffer();
    var secp256k1_1 = require_secp256k12();
    exports.MAX_UINT64 = BigInt("0xffffffffffffffff");
    exports.MAX_INTEGER = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    exports.MAX_INTEGER_BIGINT = BigInt("115792089237316195423570985008687907853269984665640564039457584007913129639935");
    exports.SECP256K1_ORDER = secp256k1_1.secp256k1.CURVE.n;
    exports.SECP256K1_ORDER_DIV_2 = secp256k1_1.secp256k1.CURVE.n / BigInt(2);
    exports.TWO_POW256 = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
    exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, "hex");
    exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
    exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, "hex");
    exports.RLP_EMPTY_STRING = buffer_1.Buffer.from([128]);
    exports.MAX_WITHDRAWALS_PER_PAYLOAD = 16;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/units.js
var require_units = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/units.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GWEI_TO_WEI = void 0;
    exports.GWEI_TO_WEI = BigInt(1e9);
  }
});

// node_modules/.pnpm/@ethereumjs+rlp@4.0.1/node_modules/@ethereumjs/rlp/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/.pnpm/@ethereumjs+rlp@4.0.1/node_modules/@ethereumjs/rlp/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RLP = exports.utils = exports.decode = exports.encode = void 0;
    function encode4(input) {
      if (Array.isArray(input)) {
        const output = [];
        let outputLength = 0;
        for (let i = 0; i < input.length; i++) {
          const encoded = encode4(input[i]);
          output.push(encoded);
          outputLength += encoded.length;
        }
        return concatBytes(encodeLength(outputLength, 192), ...output);
      }
      const inputBuf = toBytes(input);
      if (inputBuf.length === 1 && inputBuf[0] < 128) {
        return inputBuf;
      }
      return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
    }
    exports.encode = encode4;
    function safeSlice(input, start, end) {
      if (end > input.length) {
        throw new Error("invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds");
      }
      return input.slice(start, end);
    }
    function decodeLength(v) {
      if (v[0] === 0) {
        throw new Error("invalid RLP: extra zeros");
      }
      return parseHexByte(bytesToHex(v));
    }
    function encodeLength(len, offset) {
      if (len < 56) {
        return Uint8Array.from([len + offset]);
      }
      const hexLength = numberToHex(len);
      const lLength = hexLength.length / 2;
      const firstByte = numberToHex(offset + 55 + lLength);
      return Uint8Array.from(hexToBytes(firstByte + hexLength));
    }
    function decode3(input, stream = false) {
      if (typeof input === "undefined" || input === null || input.length === 0) {
        return Uint8Array.from([]);
      }
      const inputBytes = toBytes(input);
      const decoded = _decode2(inputBytes);
      if (stream) {
        return decoded;
      }
      if (decoded.remainder.length !== 0) {
        throw new Error("invalid RLP: remainder must be zero");
      }
      return decoded.data;
    }
    exports.decode = decode3;
    function _decode2(input) {
      let length, llength, data, innerRemainder, d;
      const decoded = [];
      const firstByte = input[0];
      if (firstByte <= 127) {
        return {
          data: input.slice(0, 1),
          remainder: input.slice(1)
        };
      } else if (firstByte <= 183) {
        length = firstByte - 127;
        if (firstByte === 128) {
          data = Uint8Array.from([]);
        } else {
          data = safeSlice(input, 1, length);
        }
        if (length === 2 && data[0] < 128) {
          throw new Error("invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed");
        }
        return {
          data,
          remainder: input.slice(length)
        };
      } else if (firstByte <= 191) {
        llength = firstByte - 182;
        if (input.length - 1 < llength) {
          throw new Error("invalid RLP: not enough bytes for string length");
        }
        length = decodeLength(safeSlice(input, 1, llength));
        if (length <= 55) {
          throw new Error("invalid RLP: expected string length to be greater than 55");
        }
        data = safeSlice(input, llength, length + llength);
        return {
          data,
          remainder: input.slice(length + llength)
        };
      } else if (firstByte <= 247) {
        length = firstByte - 191;
        innerRemainder = safeSlice(input, 1, length);
        while (innerRemainder.length) {
          d = _decode2(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(length)
        };
      } else {
        llength = firstByte - 246;
        length = decodeLength(safeSlice(input, 1, llength));
        if (length < 56) {
          throw new Error("invalid RLP: encoded list too short");
        }
        const totalLength = llength + length;
        if (totalLength > input.length) {
          throw new Error("invalid RLP: total length is larger than the data");
        }
        innerRemainder = safeSlice(input, llength, totalLength);
        while (innerRemainder.length) {
          d = _decode2(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(totalLength)
        };
      }
    }
    var cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(uint8a) {
      let hex = "";
      for (let i = 0; i < uint8a.length; i++) {
        hex += cachedHexes[uint8a[i]];
      }
      return hex;
    }
    function parseHexByte(hexByte) {
      const byte = Number.parseInt(hexByte, 16);
      if (Number.isNaN(byte))
        throw new Error("Invalid byte sequence");
      return byte;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string") {
        throw new TypeError("hexToBytes: expected string, got " + typeof hex);
      }
      if (hex.length % 2)
        throw new Error("hexToBytes: received invalid unpadded hex");
      const array = new Uint8Array(hex.length / 2);
      for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        array[i] = parseHexByte(hex.slice(j, j + 2));
      }
      return array;
    }
    function concatBytes(...arrays) {
      if (arrays.length === 1)
        return arrays[0];
      const length = arrays.reduce((a, arr) => a + arr.length, 0);
      const result = new Uint8Array(length);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
      }
      return result;
    }
    function utf8ToBytes(utf) {
      return new TextEncoder().encode(utf);
    }
    function numberToHex(integer) {
      if (integer < 0) {
        throw new Error("Invalid integer as argument, must be unsigned!");
      }
      const hex = integer.toString(16);
      return hex.length % 2 ? `0${hex}` : hex;
    }
    function padToEven(a) {
      return a.length % 2 ? `0${a}` : a;
    }
    function isHexPrefixed(str) {
      return str.length >= 2 && str[0] === "0" && str[1] === "x";
    }
    function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    function toBytes(v) {
      if (v instanceof Uint8Array) {
        return v;
      }
      if (typeof v === "string") {
        if (isHexPrefixed(v)) {
          return hexToBytes(padToEven(stripHexPrefix(v)));
        }
        return utf8ToBytes(v);
      }
      if (typeof v === "number" || typeof v === "bigint") {
        if (!v) {
          return Uint8Array.from([]);
        }
        return hexToBytes(numberToHex(v));
      }
      if (v === null || v === void 0) {
        return Uint8Array.from([]);
      }
      throw new Error("toBytes: received unsupported type " + typeof v);
    }
    exports.utils = {
      bytesToHex,
      concatBytes,
      hexToBytes,
      utf8ToBytes
    };
    exports.RLP = { encode: encode4, decode: decode3 };
  }
});

// node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/_u64.js
var require_u64 = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/_u64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
    var U32_MASK64 = BigInt(2 ** 32 - 1);
    var _32n = BigInt(32);
    function fromBig(n, le = false) {
      if (le)
        return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
      return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    exports.fromBig = fromBig;
    function split(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    exports.split = split;
    var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
    exports.toBig = toBig;
    var shrSH = (h, _l, s) => h >>> s;
    exports.shrSH = shrSH;
    var shrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports.shrSL = shrSL;
    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
    exports.rotrSH = rotrSH;
    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports.rotrSL = rotrSL;
    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports.rotrBH = rotrBH;
    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports.rotrBL = rotrBL;
    var rotr32H = (_h, l) => l;
    exports.rotr32H = rotr32H;
    var rotr32L = (h, _l) => h;
    exports.rotr32L = rotr32L;
    var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
    exports.rotlSH = rotlSH;
    var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
    exports.rotlSL = rotlSL;
    var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports.rotlBH = rotlBH;
    var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports.rotlBL = rotlBL;
    function add3(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    exports.add = add3;
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports.add5H = add5H;
    var u64 = {
      fromBig,
      split,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add: add3,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports.default = u64;
  }
});

// node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/sha3.js
var require_sha32 = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/sha3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
    var _assert_js_1 = require_assert2();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils6();
    var SHA3_PI = [];
    var SHA3_ROTL = [];
    var _SHA3_IOTA = [];
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _7n = BigInt(7);
    var _256n = BigInt(256);
    var _0x71n = BigInt(113);
    for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n)
          t ^= _1n << (_1n << BigInt(j)) - _1n;
      }
      _SHA3_IOTA.push(t);
    }
    var [SHA3_IOTA_H, SHA3_IOTA_L] = (0, _u64_js_1.split)(_SHA3_IOTA, true);
    var rotlH = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
    var rotlL = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
    function keccakP(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL[t];
          const Th = rotlH(curH, curL, shift);
          const Tl = rotlL(curH, curL, shift);
          const PI = SHA3_PI[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
      }
      B.fill(0);
    }
    exports.keccakP = keccakP;
    var Keccak = class _Keccak extends utils_js_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
        if (!utils_js_1.isLE)
          (0, utils_js_1.byteSwap32)(this.state32);
        keccakP(this.state32, this.rounds);
        if (!utils_js_1.isLE)
          (0, utils_js_1.byteSwap32)(this.state32);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes) {
        (0, _assert_js_1.number)(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports.Keccak = Keccak;
    var gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
    exports.sha3_224 = gen(6, 144, 224 / 8);
    exports.sha3_256 = gen(6, 136, 256 / 8);
    exports.sha3_384 = gen(6, 104, 384 / 8);
    exports.sha3_512 = gen(6, 72, 512 / 8);
    exports.keccak_224 = gen(1, 144, 224 / 8);
    exports.keccak_256 = gen(1, 136, 256 / 8);
    exports.keccak_384 = gen(1, 104, 384 / 8);
    exports.keccak_512 = gen(1, 72, 512 / 8);
    var genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports.shake128 = genShake(31, 168, 128 / 8);
    exports.shake256 = genShake(31, 136, 256 / 8);
  }
});

// node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/utils.js
var require_utils8 = __commonJS({
  "node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/utils.js"(exports, module) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;
    exports.bytesToUtf8 = bytesToUtf8;
    exports.hexToBytes = hexToBytes;
    exports.equalsBytes = equalsBytes;
    exports.wrapHash = wrapHash;
    var _assert_1 = __importDefault(require_assert2());
    var utils_12 = require_utils6();
    var assertBool = _assert_1.default.bool;
    exports.assertBool = assertBool;
    var assertBytes = _assert_1.default.bytes;
    exports.assertBytes = assertBytes;
    var utils_2 = require_utils6();
    Object.defineProperty(exports, "bytesToHex", { enumerable: true, get: function() {
      return utils_2.bytesToHex;
    } });
    Object.defineProperty(exports, "toHex", { enumerable: true, get: function() {
      return utils_2.bytesToHex;
    } });
    Object.defineProperty(exports, "concatBytes", { enumerable: true, get: function() {
      return utils_2.concatBytes;
    } });
    Object.defineProperty(exports, "createView", { enumerable: true, get: function() {
      return utils_2.createView;
    } });
    Object.defineProperty(exports, "utf8ToBytes", { enumerable: true, get: function() {
      return utils_2.utf8ToBytes;
    } });
    function bytesToUtf8(data) {
      if (!(data instanceof Uint8Array)) {
        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
      }
      return new TextDecoder().decode(data);
    }
    function hexToBytes(data) {
      const sliced = data.startsWith("0x") ? data.substring(2) : data;
      return (0, utils_12.hexToBytes)(sliced);
    }
    function equalsBytes(a, b) {
      if (a.length !== b.length) {
        return false;
      }
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    function wrapHash(hash3) {
      return (msg) => {
        _assert_1.default.bytes(msg);
        return hash3(msg);
      };
    }
    exports.crypto = (() => {
      const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
      const nodeRequire = typeof module !== "undefined" && typeof module.require === "function" && module.require.bind(module);
      return {
        node: nodeRequire && !webCrypto ? nodeRequire("crypto") : void 0,
        web: webCrypto
      };
    })();
  }
});

// node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/keccak.js
var require_keccak = __commonJS({
  "node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/keccak.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keccak512 = exports.keccak384 = exports.keccak256 = exports.keccak224 = void 0;
    var sha3_1 = require_sha32();
    var utils_js_1 = require_utils8();
    exports.keccak224 = (0, utils_js_1.wrapHash)(sha3_1.keccak_224);
    exports.keccak256 = (() => {
      const k = (0, utils_js_1.wrapHash)(sha3_1.keccak_256);
      k.create = sha3_1.keccak_256.create;
      return k;
    })();
    exports.keccak384 = (0, utils_js_1.wrapHash)(sha3_1.keccak_384);
    exports.keccak512 = (0, utils_js_1.wrapHash)(sha3_1.keccak_512);
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/internal.js
var require_internal = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/internal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);
      }
      return str[0] === "0" && str[1] === "x";
    }
    exports.isHexPrefixed = isHexPrefixed;
    var stripHexPrefix = (str) => {
      if (typeof str !== "string")
        throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
    exports.stripHexPrefix = stripHexPrefix;
    function padToEven(value) {
      let a = value;
      if (typeof a !== "string") {
        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
      }
      if (a.length % 2)
        a = `0${a}`;
      return a;
    }
    exports.padToEven = padToEven;
    function getBinarySize(str) {
      if (typeof str !== "string") {
        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);
      }
      return Buffer.byteLength(str, "utf8");
    }
    exports.getBinarySize = getBinarySize;
    function arrayContainsArray(superset, subset, some) {
      if (Array.isArray(superset) !== true) {
        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);
      }
      if (Array.isArray(subset) !== true) {
        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);
      }
      return subset[some === true ? "some" : "every"]((value) => superset.indexOf(value) >= 0);
    }
    exports.arrayContainsArray = arrayContainsArray;
    function toAscii(hex) {
      let str = "";
      let i = 0;
      const l = hex.length;
      if (hex.substring(0, 2) === "0x")
        i = 2;
      for (; i < l; i += 2) {
        const code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    }
    exports.toAscii = toAscii;
    function fromUtf8(stringValue) {
      const str = Buffer.from(stringValue, "utf8");
      return `0x${padToEven(str.toString("hex")).replace(/^0+|0+$/g, "")}`;
    }
    exports.fromUtf8 = fromUtf8;
    function fromAscii(stringValue) {
      let hex = "";
      for (let i = 0; i < stringValue.length; i++) {
        const code = stringValue.charCodeAt(i);
        const n = code.toString(16);
        hex += n.length < 2 ? `0${n}` : n;
      }
      return `0x${hex}`;
    }
    exports.fromAscii = fromAscii;
    function getKeys(params, key2, allowEmpty) {
      if (!Array.isArray(params)) {
        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);
      }
      if (typeof key2 !== "string") {
        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);
      }
      const result = [];
      for (let i = 0; i < params.length; i++) {
        let value = params[i][key2];
        if (allowEmpty === true && !value) {
          value = "";
        } else if (typeof value !== "string") {
          throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);
        }
        result.push(value);
      }
      return result;
    }
    exports.getKeys = getKeys;
    function isHexString2(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
        return false;
      if (typeof length !== "undefined" && length > 0 && value.length !== 2 + 2 * length)
        return false;
      return true;
    }
    exports.isHexString = isHexString2;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/helpers.js
var require_helpers = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;
    var internal_1 = require_internal();
    var assertIsHexString = function(input) {
      if (!(0, internal_1.isHexString)(input)) {
        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;
        throw new Error(msg);
      }
    };
    exports.assertIsHexString = assertIsHexString;
    var assertIsBuffer = function(input) {
      if (!Buffer.isBuffer(input)) {
        const msg = `This method only supports Buffer but input was: ${input}`;
        throw new Error(msg);
      }
    };
    exports.assertIsBuffer = assertIsBuffer;
    var assertIsArray = function(input) {
      if (!Array.isArray(input)) {
        const msg = `This method only supports number arrays but input was: ${input}`;
        throw new Error(msg);
      }
    };
    exports.assertIsArray = assertIsArray;
    var assertIsString = function(input) {
      if (typeof input !== "string") {
        const msg = `This method only supports strings but input was: ${input}`;
        throw new Error(msg);
      }
    };
    exports.assertIsString = assertIsString;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/bytes.js
var require_bytes = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
    var helpers_1 = require_helpers();
    var internal_1 = require_internal();
    var intToHex = function(i) {
      if (!Number.isSafeInteger(i) || i < 0) {
        throw new Error(`Received an invalid integer type: ${i}`);
      }
      return `0x${i.toString(16)}`;
    };
    exports.intToHex = intToHex;
    var intToBuffer = function(i) {
      const hex = (0, exports.intToHex)(i);
      return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), "hex");
    };
    exports.intToBuffer = intToBuffer;
    var zeros2 = function(bytes) {
      return Buffer.allocUnsafe(bytes).fill(0);
    };
    exports.zeros = zeros2;
    var setLength = function(msg, length, right) {
      const buf = (0, exports.zeros)(length);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    var setLengthLeft = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, false);
    };
    exports.setLengthLeft = setLengthLeft;
    var setLengthRight = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, true);
    };
    exports.setLengthRight = setLengthRight;
    var stripZeros2 = function(a) {
      let first = a[0];
      while (a.length > 0 && first.toString() === "0") {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    };
    var unpadBuffer = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return stripZeros2(a);
    };
    exports.unpadBuffer = unpadBuffer;
    var unpadArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return stripZeros2(a);
    };
    exports.unpadArray = unpadArray;
    var unpadHexString = function(a) {
      (0, helpers_1.assertIsHexString)(a);
      a = (0, internal_1.stripHexPrefix)(a);
      return "0x" + stripZeros2(a);
    };
    exports.unpadHexString = unpadHexString;
    var toBuffer = function(v) {
      if (v === null || v === void 0) {
        return Buffer.allocUnsafe(0);
      }
      if (Buffer.isBuffer(v)) {
        return Buffer.from(v);
      }
      if (Array.isArray(v) || v instanceof Uint8Array) {
        return Buffer.from(v);
      }
      if (typeof v === "string") {
        if (!(0, internal_1.isHexString)(v)) {
          throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);
        }
        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), "hex");
      }
      if (typeof v === "number") {
        return (0, exports.intToBuffer)(v);
      }
      if (typeof v === "bigint") {
        if (v < BigInt(0)) {
          throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);
        }
        let n = v.toString(16);
        if (n.length % 2)
          n = "0" + n;
        return Buffer.from(n, "hex");
      }
      if (v.toArray) {
        return Buffer.from(v.toArray());
      }
      if (v.toBuffer) {
        return Buffer.from(v.toBuffer());
      }
      throw new Error("invalid type");
    };
    exports.toBuffer = toBuffer;
    var bufferToHex = function(buf) {
      buf = (0, exports.toBuffer)(buf);
      return "0x" + buf.toString("hex");
    };
    exports.bufferToHex = bufferToHex;
    function bufferToBigInt(buf) {
      const hex = (0, exports.bufferToHex)(buf);
      if (hex === "0x") {
        return BigInt(0);
      }
      return BigInt(hex);
    }
    exports.bufferToBigInt = bufferToBigInt;
    function bigIntToBuffer(num) {
      return (0, exports.toBuffer)("0x" + num.toString(16));
    }
    exports.bigIntToBuffer = bigIntToBuffer;
    var bufferToInt = function(buf) {
      const res = Number(bufferToBigInt(buf));
      if (!Number.isSafeInteger(res))
        throw new Error("Number exceeds 53 bits");
      return res;
    };
    exports.bufferToInt = bufferToInt;
    var fromSigned = function(num) {
      return BigInt.asIntN(256, bufferToBigInt(num));
    };
    exports.fromSigned = fromSigned;
    var toUnsigned = function(num) {
      return bigIntToBuffer(BigInt.asUintN(256, num));
    };
    exports.toUnsigned = toUnsigned;
    var addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return (0, internal_1.isHexPrefixed)(str) ? str : "0x" + str;
    };
    exports.addHexPrefix = addHexPrefix;
    function short(buffer, maxLength = 50) {
      const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString("hex") : buffer;
      if (bufferStr.length <= maxLength) {
        return bufferStr;
      }
      return bufferStr.slice(0, maxLength) + "…";
    }
    exports.short = short;
    var toUtf8 = function(hex) {
      const zerosRegexp = /^(00)+|(00)+$/g;
      hex = (0, internal_1.stripHexPrefix)(hex);
      if (hex.length % 2 !== 0) {
        throw new Error("Invalid non-even hex string input for toUtf8() provided");
      }
      const bufferVal = Buffer.from(hex.replace(zerosRegexp, ""), "hex");
      return bufferVal.toString("utf8");
    };
    exports.toUtf8 = toUtf8;
    var baToJSON = function(ba) {
      if (Buffer.isBuffer(ba)) {
        return `0x${ba.toString("hex")}`;
      } else if (ba instanceof Array) {
        const array = [];
        for (let i = 0; i < ba.length; i++) {
          array.push((0, exports.baToJSON)(ba[i]));
        }
        return array;
      }
    };
    exports.baToJSON = baToJSON;
    var validateNoLeadingZeroes = function(values) {
      for (const [k, v] of Object.entries(values)) {
        if (v !== void 0 && v.length > 0 && v[0] === 0) {
          throw new Error(`${k} cannot have leading zeroes, received: ${v.toString("hex")}`);
        }
      }
    };
    exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
    function arrToBufArr(arr) {
      if (!Array.isArray(arr)) {
        return Buffer.from(arr);
      }
      return arr.map((a) => arrToBufArr(a));
    }
    exports.arrToBufArr = arrToBufArr;
    function bufArrToArr(arr) {
      if (!Array.isArray(arr)) {
        return Uint8Array.from(arr ?? []);
      }
      return arr.map((a) => bufArrToArr(a));
    }
    exports.bufArrToArr = bufArrToArr;
    var bigIntToHex = (num) => {
      return "0x" + num.toString(16);
    };
    exports.bigIntToHex = bigIntToHex;
    function bigIntToUnpaddedBuffer(value) {
      return (0, exports.unpadBuffer)(bigIntToBuffer(value));
    }
    exports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;
    function intToUnpaddedBuffer(value) {
      return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));
    }
    exports.intToUnpaddedBuffer = intToUnpaddedBuffer;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/account.js
var require_account = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/account.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountBodyToRLP = exports.accountBodyToSlim = exports.accountBodyFromSlim = exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
    var rlp_1 = require_dist3();
    var keccak_1 = require_keccak();
    var secp256k1_1 = require_secp256k12();
    var utils_12 = require_utils8();
    var bytes_1 = require_bytes();
    var constants_1 = require_constants();
    var helpers_1 = require_helpers();
    var internal_1 = require_internal();
    var _0n = BigInt(0);
    var Account = class _Account {
      /**
       * This constructor assigns and validates the values.
       * Use the static factory methods to assist in creating an Account from varying data types.
       */
      constructor(nonce = _0n, balance = _0n, storageRoot = constants_1.KECCAK256_RLP, codeHash = constants_1.KECCAK256_NULL) {
        this.nonce = nonce;
        this.balance = balance;
        this.storageRoot = storageRoot;
        this.codeHash = codeHash;
        this._validate();
      }
      static fromAccountData(accountData) {
        const { nonce, balance, storageRoot, codeHash } = accountData;
        return new _Account(nonce !== void 0 ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(nonce)) : void 0, balance !== void 0 ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(balance)) : void 0, storageRoot !== void 0 ? (0, bytes_1.toBuffer)(storageRoot) : void 0, codeHash !== void 0 ? (0, bytes_1.toBuffer)(codeHash) : void 0);
      }
      static fromRlpSerializedAccount(serialized) {
        const values = (0, bytes_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized account input. Must be array");
        }
        return this.fromValuesArray(values);
      }
      static fromValuesArray(values) {
        const [nonce, balance, storageRoot, codeHash] = values;
        return new _Account((0, bytes_1.bufferToBigInt)(nonce), (0, bytes_1.bufferToBigInt)(balance), storageRoot, codeHash);
      }
      _validate() {
        if (this.nonce < _0n) {
          throw new Error("nonce must be greater than zero");
        }
        if (this.balance < _0n) {
          throw new Error("balance must be greater than zero");
        }
        if (this.storageRoot.length !== 32) {
          throw new Error("storageRoot must have a length of 32");
        }
        if (this.codeHash.length !== 32) {
          throw new Error("codeHash must have a length of 32");
        }
      }
      /**
       * Returns a Buffer Array of the raw Buffers for the account, in order.
       */
      raw() {
        return [
          (0, bytes_1.bigIntToUnpaddedBuffer)(this.nonce),
          (0, bytes_1.bigIntToUnpaddedBuffer)(this.balance),
          this.storageRoot,
          this.codeHash
        ];
      }
      /**
       * Returns the RLP serialization of the account as a `Buffer`.
       */
      serialize() {
        return Buffer.from(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)(this.raw())));
      }
      /**
       * Returns a `Boolean` determining if the account is a contract.
       */
      isContract() {
        return !this.codeHash.equals(constants_1.KECCAK256_NULL);
      }
      /**
       * Returns a `Boolean` determining if the account is empty complying to the definition of
       * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
       * "An account is considered empty when it has no code and zero nonce and zero balance."
       */
      isEmpty() {
        return this.balance === _0n && this.nonce === _0n && this.codeHash.equals(constants_1.KECCAK256_NULL);
      }
    };
    exports.Account = Account;
    var isValidAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    };
    exports.isValidAddress = isValidAddress;
    var toChecksumAddress = function(hexAddress, eip1191ChainId) {
      (0, helpers_1.assertIsHexString)(hexAddress);
      const address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
      let prefix = "";
      if (eip1191ChainId !== void 0) {
        const chainId = (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(eip1191ChainId));
        prefix = chainId.toString() + "0x";
      }
      const buf = Buffer.from(prefix + address, "utf8");
      const hash3 = (0, utils_12.bytesToHex)((0, keccak_1.keccak256)(buf));
      let ret = "0x";
      for (let i = 0; i < address.length; i++) {
        if (parseInt(hash3[i], 16) >= 8) {
          ret += address[i].toUpperCase();
        } else {
          ret += address[i];
        }
      }
      return ret;
    };
    exports.toChecksumAddress = toChecksumAddress;
    var isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
      return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
    };
    exports.isValidChecksumAddress = isValidChecksumAddress;
    var generateAddress = function(from, nonce) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(nonce);
      if ((0, bytes_1.bufferToBigInt)(nonce) === BigInt(0)) {
        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, null])))).slice(-20);
      }
      return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, nonce])))).slice(-20);
    };
    exports.generateAddress = generateAddress;
    var generateAddress2 = function(from, salt, initCode) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(salt);
      (0, helpers_1.assertIsBuffer)(initCode);
      if (from.length !== 20) {
        throw new Error("Expected from to be of length 20");
      }
      if (salt.length !== 32) {
        throw new Error("Expected salt to be of length 32");
      }
      const address = (0, keccak_1.keccak256)(Buffer.concat([Buffer.from("ff", "hex"), from, salt, (0, keccak_1.keccak256)(initCode)]));
      return (0, bytes_1.toBuffer)(address).slice(-20);
    };
    exports.generateAddress2 = generateAddress2;
    var isValidPrivate = function(privateKey) {
      return secp256k1_1.secp256k1.utils.isValidPrivateKey(privateKey);
    };
    exports.isValidPrivate = isValidPrivate;
    var isValidPublic = function(publicKey, sanitize = false) {
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length === 64) {
        try {
          secp256k1_1.secp256k1.ProjectivePoint.fromHex(Buffer.concat([Buffer.from([4]), publicKey]));
          return true;
        } catch (e) {
          return false;
        }
      }
      if (!sanitize) {
        return false;
      }
      try {
        secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey);
        return true;
      } catch (e) {
        return false;
      }
    };
    exports.isValidPublic = isValidPublic;
    var pubToAddress = function(pubKey, sanitize = false) {
      (0, helpers_1.assertIsBuffer)(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1));
      }
      if (pubKey.length !== 64) {
        throw new Error("Expected pubKey to be of length 64");
      }
      return Buffer.from((0, keccak_1.keccak256)(pubKey)).slice(-20);
    };
    exports.pubToAddress = pubToAddress;
    exports.publicToAddress = exports.pubToAddress;
    var privateToPublic = function(privateKey) {
      (0, helpers_1.assertIsBuffer)(privateKey);
      return Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1));
    };
    exports.privateToPublic = privateToPublic;
    var privateToAddress = function(privateKey) {
      return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
    };
    exports.privateToAddress = privateToAddress;
    var importPublic = function(publicKey) {
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length !== 64) {
        publicKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1));
      }
      return publicKey;
    };
    exports.importPublic = importPublic;
    var zeroAddress = function() {
      const addressLength = 20;
      const addr = (0, bytes_1.zeros)(addressLength);
      return (0, bytes_1.bufferToHex)(addr);
    };
    exports.zeroAddress = zeroAddress;
    var isZeroAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      const zeroAddr = (0, exports.zeroAddress)();
      return zeroAddr === hexAddress;
    };
    exports.isZeroAddress = isZeroAddress;
    function accountBodyFromSlim(body) {
      const [nonce, balance, storageRoot, codeHash] = body;
      return [
        nonce,
        balance,
        (0, bytes_1.arrToBufArr)(storageRoot).length === 0 ? constants_1.KECCAK256_RLP : storageRoot,
        (0, bytes_1.arrToBufArr)(codeHash).length === 0 ? constants_1.KECCAK256_NULL : codeHash
      ];
    }
    exports.accountBodyFromSlim = accountBodyFromSlim;
    var emptyUint8Arr = new Uint8Array(0);
    function accountBodyToSlim(body) {
      const [nonce, balance, storageRoot, codeHash] = body;
      return [
        nonce,
        balance,
        (0, bytes_1.arrToBufArr)(storageRoot).equals(constants_1.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,
        (0, bytes_1.arrToBufArr)(codeHash).equals(constants_1.KECCAK256_NULL) ? emptyUint8Arr : codeHash
      ];
    }
    exports.accountBodyToSlim = accountBodyToSlim;
    function accountBodyToRLP(body, couldBeSlim = true) {
      const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;
      return (0, bytes_1.arrToBufArr)(rlp_1.RLP.encode(accountBody));
    }
    exports.accountBodyToRLP = accountBodyToRLP;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/address.js
var require_address = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Address = void 0;
    var account_1 = require_account();
    var bytes_1 = require_bytes();
    var Address = class _Address {
      constructor(buf) {
        if (buf.length !== 20) {
          throw new Error("Invalid address length");
        }
        this.buf = buf;
      }
      /**
       * Returns the zero address.
       */
      static zero() {
        return new _Address((0, bytes_1.zeros)(20));
      }
      /**
       * Returns an Address object from a hex-encoded string.
       * @param str - Hex-encoded address
       */
      static fromString(str) {
        if (!(0, account_1.isValidAddress)(str)) {
          throw new Error("Invalid address");
        }
        return new _Address((0, bytes_1.toBuffer)(str));
      }
      /**
       * Returns an address for a given public key.
       * @param pubKey The two points of an uncompressed key
       */
      static fromPublicKey(pubKey) {
        if (!Buffer.isBuffer(pubKey)) {
          throw new Error("Public key should be Buffer");
        }
        const buf = (0, account_1.pubToAddress)(pubKey);
        return new _Address(buf);
      }
      /**
       * Returns an address for a given private key.
       * @param privateKey A private key must be 256 bits wide
       */
      static fromPrivateKey(privateKey) {
        if (!Buffer.isBuffer(privateKey)) {
          throw new Error("Private key should be Buffer");
        }
        const buf = (0, account_1.privateToAddress)(privateKey);
        return new _Address(buf);
      }
      /**
       * Generates an address for a newly created contract.
       * @param from The address which is creating this new address
       * @param nonce The nonce of the from account
       */
      static generate(from, nonce) {
        if (typeof nonce !== "bigint") {
          throw new Error("Expected nonce to be a bigint");
        }
        return new _Address((0, account_1.generateAddress)(from.buf, (0, bytes_1.bigIntToBuffer)(nonce)));
      }
      /**
       * Generates an address for a contract created using CREATE2.
       * @param from The address which is creating this new address
       * @param salt A salt
       * @param initCode The init code of the contract being created
       */
      static generate2(from, salt, initCode) {
        if (!Buffer.isBuffer(salt)) {
          throw new Error("Expected salt to be a Buffer");
        }
        if (!Buffer.isBuffer(initCode)) {
          throw new Error("Expected initCode to be a Buffer");
        }
        return new _Address((0, account_1.generateAddress2)(from.buf, salt, initCode));
      }
      /**
       * Is address equal to another.
       */
      equals(address) {
        return this.buf.equals(address.buf);
      }
      /**
       * Is address zero.
       */
      isZero() {
        return this.equals(_Address.zero());
      }
      /**
       * True if address is in the address range defined
       * by EIP-1352
       */
      isPrecompileOrSystemAddress() {
        const address = (0, bytes_1.bufferToBigInt)(this.buf);
        const rangeMin = BigInt(0);
        const rangeMax = BigInt("0xffff");
        return address >= rangeMin && address <= rangeMax;
      }
      /**
       * Returns hex encoding of address.
       */
      toString() {
        return "0x" + this.buf.toString("hex");
      }
      /**
       * Returns Buffer representation of address.
       */
      toBuffer() {
        return Buffer.from(this.buf);
      }
    };
    exports.Address = Address;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/types.js
var require_types3 = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toType = exports.TypeOutput = void 0;
    var bytes_1 = require_bytes();
    var internal_1 = require_internal();
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BigInt"] = 1] = "BigInt";
      TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
    function toType(input, outputType) {
      if (input === null) {
        return null;
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input === "string" && !(0, internal_1.isHexString)(input)) {
        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      const output = (0, bytes_1.toBuffer)(input);
      switch (outputType) {
        case TypeOutput.Buffer:
          return output;
        case TypeOutput.BigInt:
          return (0, bytes_1.bufferToBigInt)(output);
        case TypeOutput.Number: {
          const bigInt = (0, bytes_1.bufferToBigInt)(output);
          if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {
            throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
          }
          return Number(bigInt);
        }
        case TypeOutput.PrefixedHexString:
          return (0, bytes_1.bufferToHex)(output);
        default:
          throw new Error("unknown outputType");
      }
    }
    exports.toType = toType;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/withdrawal.js
var require_withdrawal = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/withdrawal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Withdrawal = void 0;
    var address_1 = require_address();
    var bytes_1 = require_bytes();
    var types_1 = require_types3();
    var Withdrawal = class _Withdrawal {
      /**
       * This constructor assigns and validates the values.
       * Use the static factory methods to assist in creating a Withdrawal object from varying data types.
       * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot
       */
      constructor(index, validatorIndex, address, amount) {
        this.index = index;
        this.validatorIndex = validatorIndex;
        this.address = address;
        this.amount = amount;
      }
      static fromWithdrawalData(withdrawalData) {
        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData } = withdrawalData;
        const index = (0, types_1.toType)(indexData, types_1.TypeOutput.BigInt);
        const validatorIndex = (0, types_1.toType)(validatorIndexData, types_1.TypeOutput.BigInt);
        const address = new address_1.Address((0, types_1.toType)(addressData, types_1.TypeOutput.Buffer));
        const amount = (0, types_1.toType)(amountData, types_1.TypeOutput.BigInt);
        return new _Withdrawal(index, validatorIndex, address, amount);
      }
      static fromValuesArray(withdrawalArray) {
        if (withdrawalArray.length !== 4) {
          throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);
        }
        const [index, validatorIndex, address, amount] = withdrawalArray;
        return _Withdrawal.fromWithdrawalData({ index, validatorIndex, address, amount });
      }
      /**
       * Convert a withdrawal to a buffer array
       * @param withdrawal the withdrawal to convert
       * @returns buffer array of the withdrawal
       */
      static toBufferArray(withdrawal) {
        const { index, validatorIndex, address, amount } = withdrawal;
        const indexBuffer = (0, types_1.toType)(index, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer.alloc(0) : (0, types_1.toType)(index, types_1.TypeOutput.Buffer);
        const validatorIndexBuffer = (0, types_1.toType)(validatorIndex, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer.alloc(0) : (0, types_1.toType)(validatorIndex, types_1.TypeOutput.Buffer);
        let addressBuffer;
        if (address instanceof address_1.Address) {
          addressBuffer = address.buf;
        } else {
          addressBuffer = (0, types_1.toType)(address, types_1.TypeOutput.Buffer);
        }
        const amountBuffer = (0, types_1.toType)(amount, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer.alloc(0) : (0, types_1.toType)(amount, types_1.TypeOutput.Buffer);
        return [indexBuffer, validatorIndexBuffer, addressBuffer, amountBuffer];
      }
      raw() {
        return _Withdrawal.toBufferArray(this);
      }
      toValue() {
        return {
          index: this.index,
          validatorIndex: this.validatorIndex,
          address: this.address.buf,
          amount: this.amount
        };
      }
      toJSON() {
        return {
          index: (0, bytes_1.bigIntToHex)(this.index),
          validatorIndex: (0, bytes_1.bigIntToHex)(this.validatorIndex),
          address: "0x" + this.address.buf.toString("hex"),
          amount: (0, bytes_1.bigIntToHex)(this.amount)
        };
      }
    };
    exports.Withdrawal = Withdrawal;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/signature.js
var require_signature = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
    var keccak_1 = require_keccak();
    var secp256k1_1 = require_secp256k12();
    var bytes_1 = require_bytes();
    var constants_1 = require_constants();
    var helpers_1 = require_helpers();
    function ecsign(msgHash, privateKey, chainId) {
      const sig = secp256k1_1.secp256k1.sign(msgHash, privateKey);
      const buf = sig.toCompactRawBytes();
      const r = Buffer.from(buf.slice(0, 32));
      const s = Buffer.from(buf.slice(32, 64));
      const v = chainId === void 0 ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * BigInt(2);
      return { r, s, v };
    }
    exports.ecsign = ecsign;
    function calculateSigRecovery(v, chainId) {
      if (v === BigInt(0) || v === BigInt(1))
        return v;
      if (chainId === void 0) {
        return v - BigInt(27);
      }
      return v - (chainId * BigInt(2) + BigInt(35));
    }
    function isValidSigRecovery(recovery) {
      return recovery === BigInt(0) || recovery === BigInt(1);
    }
    var ecrecover = function(msgHash, v, r, s, chainId) {
      const signature2 = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
      const recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      const sig = secp256k1_1.secp256k1.Signature.fromCompact(signature2).addRecoveryBit(Number(recovery));
      const senderPubKey = sig.recoverPublicKey(msgHash);
      return Buffer.from(senderPubKey.toRawBytes(false).slice(1));
    };
    exports.ecrecover = ecrecover;
    var toRpcSig = function(v, r, s, chainId) {
      const recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
    };
    exports.toRpcSig = toRpcSig;
    var toCompactSig = function(v, r, s, chainId) {
      const recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      let ss = s;
      if (v > BigInt(28) && v % BigInt(2) === BigInt(1) || v === BigInt(1) || v === BigInt(28)) {
        ss = Buffer.from(s);
        ss[0] |= 128;
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
    };
    exports.toCompactSig = toCompactSig;
    var fromRpcSig = function(sig) {
      const buf = (0, bytes_1.toBuffer)(sig);
      let r;
      let s;
      let v;
      if (buf.length >= 65) {
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToBigInt)(buf.slice(64));
      } else if (buf.length === 64) {
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = BigInt((0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7);
        s[0] &= 127;
      } else {
        throw new Error("Invalid signature length");
      }
      if (v < 27) {
        v = v + BigInt(27);
      }
      return {
        v,
        r,
        s
      };
    };
    exports.fromRpcSig = fromRpcSig;
    var isValidSignature = function(v, r, s, homesteadOrLater = true, chainId) {
      if (r.length !== 32 || s.length !== 32) {
        return false;
      }
      if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
      }
      const rBigInt = (0, bytes_1.bufferToBigInt)(r);
      const sBigInt = (0, bytes_1.bufferToBigInt)(s);
      if (rBigInt === BigInt(0) || rBigInt >= constants_1.SECP256K1_ORDER || sBigInt === BigInt(0) || sBigInt >= constants_1.SECP256K1_ORDER) {
        return false;
      }
      if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {
        return false;
      }
      return true;
    };
    exports.isValidSignature = isValidSignature;
    var hashPersonalMessage = function(message) {
      (0, helpers_1.assertIsBuffer)(message);
      const prefix = Buffer.from(`Ethereum Signed Message:
${message.length}`, "utf-8");
      return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([prefix, message])));
    };
    exports.hashPersonalMessage = hashPersonalMessage;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/encoding.js
var require_encoding = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/encoding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compactBytesToNibbles = exports.bytesToNibbles = exports.nibblesToCompactBytes = exports.nibblesToBytes = exports.hasTerminator = void 0;
    var hasTerminator = (nibbles) => {
      return nibbles.length > 0 && nibbles[nibbles.length - 1] === 16;
    };
    exports.hasTerminator = hasTerminator;
    var nibblesToBytes = (nibbles, bytes) => {
      for (let bi = 0, ni = 0; ni < nibbles.length; bi += 1, ni += 2) {
        bytes[bi] = nibbles[ni] << 4 | nibbles[ni + 1];
      }
    };
    exports.nibblesToBytes = nibblesToBytes;
    var nibblesToCompactBytes = (nibbles) => {
      let terminator = 0;
      if ((0, exports.hasTerminator)(nibbles)) {
        terminator = 1;
        nibbles = nibbles.subarray(0, nibbles.length - 1);
      }
      const buf = new Uint8Array(nibbles.length / 2 + 1);
      buf[0] = terminator << 5;
      if ((nibbles.length & 1) === 1) {
        buf[0] |= 1 << 4;
        buf[0] |= nibbles[0];
        nibbles = nibbles.subarray(1);
      }
      (0, exports.nibblesToBytes)(nibbles, buf.subarray(1));
      return buf;
    };
    exports.nibblesToCompactBytes = nibblesToCompactBytes;
    var bytesToNibbles = (str) => {
      const l = str.length * 2 + 1;
      const nibbles = new Uint8Array(l);
      for (let i = 0; i < str.length; i++) {
        const b = str[i];
        nibbles[i * 2] = b / 16;
        nibbles[i * 2 + 1] = b % 16;
      }
      nibbles[l - 1] = 16;
      return nibbles;
    };
    exports.bytesToNibbles = bytesToNibbles;
    var compactBytesToNibbles = (compact) => {
      if (compact.length === 0) {
        return compact;
      }
      let base2 = (0, exports.bytesToNibbles)(compact);
      if (base2[0] < 2) {
        base2 = base2.subarray(0, base2.length - 1);
      }
      const chop = 2 - (base2[0] & 1);
      return base2.subarray(chop);
    };
    exports.compactBytesToNibbles = compactBytesToNibbles;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/asyncEventEmitter.js
var require_asyncEventEmitter = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/asyncEventEmitter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncEventEmitter = void 0;
    var events_1 = require_events();
    async function runInSeries(context, tasks, data) {
      let error;
      for await (const task of tasks) {
        try {
          if (task.length < 2) {
            task.call(context, data);
          } else {
            await new Promise((resolve, reject) => {
              task.call(context, data, (error2) => {
                if (error2) {
                  reject(error2);
                } else {
                  resolve();
                }
              });
            });
          }
        } catch (e) {
          error = e;
        }
      }
      if (error) {
        throw error;
      }
    }
    var AsyncEventEmitter = class extends events_1.EventEmitter {
      emit(event, ...args) {
        let [data, callback] = args;
        const self2 = this;
        let listeners = self2._events[event] ?? [];
        if (callback === void 0 && typeof data === "function") {
          callback = data;
          data = void 0;
        }
        if (event === "newListener" || event === "removeListener") {
          data = {
            event: data,
            fn: callback
          };
          callback = void 0;
        }
        listeners = Array.isArray(listeners) ? listeners : [listeners];
        runInSeries(self2, listeners.slice(), data).then(callback).catch(callback);
        return self2.listenerCount(event) > 0;
      }
      once(event, listener) {
        const self2 = this;
        let g;
        if (typeof listener !== "function") {
          throw new TypeError("listener must be a function");
        }
        if (listener.length >= 2) {
          g = function(e, next) {
            self2.removeListener(event, g);
            void listener(e, next);
          };
        } else {
          g = function(e) {
            self2.removeListener(event, g);
            void listener(e, g);
          };
        }
        self2.on(event, g);
        return self2;
      }
      first(event, listener) {
        let listeners = this._events[event] ?? [];
        if (typeof listener !== "function") {
          throw new TypeError("listener must be a function");
        }
        if (!Array.isArray(listeners)) {
          ;
          this._events[event] = listeners = [listeners];
        }
        listeners.unshift(listener);
        return this;
      }
      before(event, target, listener) {
        return this.beforeOrAfter(event, target, listener);
      }
      after(event, target, listener) {
        return this.beforeOrAfter(event, target, listener, "after");
      }
      beforeOrAfter(event, target, listener, beforeOrAfter) {
        let listeners = this._events[event] ?? [];
        let i;
        let index;
        const add3 = beforeOrAfter === "after" ? 1 : 0;
        if (typeof listener !== "function") {
          throw new TypeError("listener must be a function");
        }
        if (typeof target !== "function") {
          throw new TypeError("target must be a function");
        }
        if (!Array.isArray(listeners)) {
          ;
          this._events[event] = listeners = [listeners];
        }
        index = listeners.length;
        for (i = listeners.length; i--; ) {
          if (listeners[i] === target) {
            index = i + add3;
            break;
          }
        }
        listeners.splice(index, 0, listener);
        return this;
      }
      on(event, listener) {
        return super.on(event, listener);
      }
      addListener(event, listener) {
        return super.addListener(event, listener);
      }
      prependListener(event, listener) {
        return super.prependListener(event, listener);
      }
      prependOnceListener(event, listener) {
        return super.prependOnceListener(event, listener);
      }
      removeAllListeners(event) {
        return super.removeAllListeners(event);
      }
      removeListener(event, listener) {
        return super.removeListener(event, listener);
      }
      eventNames() {
        return super.eventNames();
      }
      listeners(event) {
        return super.listeners(event);
      }
      listenerCount(event) {
        return super.listenerCount(event);
      }
      getMaxListeners() {
        return super.getMaxListeners();
      }
      setMaxListeners(maxListeners) {
        return super.setMaxListeners(maxListeners);
      }
    };
    exports.AsyncEventEmitter = AsyncEventEmitter;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/lock.js
var require_lock = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/lock.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lock = void 0;
    var Lock = class {
      constructor() {
        this.permits = 1;
        this.promiseResolverQueue = [];
      }
      /**
       * Returns a promise used to wait for a permit to become available. This method should be awaited on.
       * @returns  A promise that gets resolved when execution is allowed to proceed.
       */
      async acquire() {
        if (this.permits > 0) {
          this.permits -= 1;
          return Promise.resolve(true);
        }
        return new Promise((resolver) => this.promiseResolverQueue.push(resolver));
      }
      /**
       * Increases the number of permits by one. If there are other functions waiting, one of them will
       * continue to execute in a future iteration of the event loop.
       */
      release() {
        this.permits += 1;
        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {
          console.warn("Lock.permits should never be > 0 when there is someone waiting.");
        } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {
          this.permits -= 1;
          const nextResolver = this.promiseResolverQueue.shift();
          if (nextResolver) {
            nextResolver(true);
          }
        }
      }
    };
    exports.Lock = Lock;
  }
});

// browser-external:http
var require_http = __commonJS({
  "browser-external:http"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key2) {
        if (key2 !== "__esModule" && key2 !== "__proto__" && key2 !== "constructor" && key2 !== "splice") {
          console.warn(`Module "http" has been externalized for browser compatibility. Cannot access "http.${key2}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:https
var require_https = __commonJS({
  "browser-external:https"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key2) {
        if (key2 !== "__esModule" && key2 !== "__proto__" && key2 !== "constructor" && key2 !== "splice") {
          console.warn(`Module "https" has been externalized for browser compatibility. Cannot access "https.${key2}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:zlib
var require_zlib = __commonJS({
  "browser-external:zlib"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key2) {
        if (key2 !== "__esModule" && key2 !== "__proto__" && key2 !== "constructor" && key2 !== "splice") {
          console.warn(`Module "zlib" has been externalized for browser compatibility. Cannot access "zlib.${key2}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/.pnpm/util@0.11.1/node_modules/util/support/isBufferBrowser.js
var require_isBufferBrowser = __commonJS({
  "node_modules/.pnpm/util@0.11.1/node_modules/util/support/isBufferBrowser.js"(exports, module) {
    module.exports = function isBuffer(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }
});

// node_modules/.pnpm/util@0.11.1/node_modules/util/util.js
var require_util2 = __commonJS({
  "node_modules/.pnpm/util@0.11.1/node_modules/util/util.js"(exports) {
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i = 0; i < keys.length; i++) {
        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect4(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x2) {
        if (x2 === "%%") return "%";
        if (i >= len) return x2;
        switch (x2) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
          default:
            return x2;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += " " + x;
        } else {
          str += " " + inspect4(x);
        }
      }
      return str;
    };
    exports.deprecate = function(fn, msg) {
      if (typeof process !== "undefined" && process.noDeprecation === true) {
        return fn;
      }
      if (typeof process === "undefined") {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnviron;
    exports.debuglog = function(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = process.env.NODE_DEBUG || "";
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect4(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect4;
    inspect4.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect4.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect4.styles[styleType];
      if (style) {
        return "\x1B[" + inspect4.colors[style][0] + "m" + str + "\x1B[" + inspect4.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash3 = {};
      array.forEach(function(val, idx) {
        hash3[val] = true;
      });
      return hash3;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base2 = "", array = false, braces = ["{", "}"];
      if (isArray(value)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base2 = " [Function" + n + "]";
      }
      if (isRegExp(value)) {
        base2 = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base2 = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base2 = " " + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base2 + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key2) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key2, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base2, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize("undefined", "undefined");
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys.forEach(function(key2) {
        if (!key2.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key2,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key2, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key2) || { value: value[key2] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty(visibleKeys, key2)) {
        name = "[" + key2 + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").substr(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name)) {
        if (array && key2.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify("" + key2);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str;
    }
    function reduceToSingleString(output, base2, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base2 + " " + output.join(", ") + " " + braces[1];
    }
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d) {
      return isObject(d) && objectToString(d) === "[object Date]";
    }
    exports.isDate = isDate;
    function isError(e) {
      return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports.isError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require_isBufferBrowser();
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n) {
      return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d = /* @__PURE__ */ new Date();
      var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
      ].join(":");
      return [d.getDate(), months[d.getMonth()], time].join(" ");
    }
    exports.log = function() {
      console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
    };
    exports.inherits = require_inherits_browser2();
    exports._extend = function(origin, add3) {
      if (!add3 || !isObject(add3)) return origin;
      var keys = Object.keys(add3);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add3[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function(err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
      });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };
    exports.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            process.nextTick(cb, null, ret);
          },
          function(rej) {
            process.nextTick(callbackifyOnRejected, rej, cb);
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports.callbackify = callbackify;
  }
});

// node_modules/.pnpm/punycode@1.4.1/node_modules/punycode/punycode.js
var require_punycode = __commonJS({
  "node_modules/.pnpm/punycode@1.4.1/node_modules/punycode/punycode.js"(exports, module) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = typeof module == "object" && module && !module.nodeType && module;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode, maxInt = 2147483647, base2 = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      }, baseMinusTMin = base2 - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key2;
      function error(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map(array, function(value) {
          var output = "";
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
          return output;
        }).join("");
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base2;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base2) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode3(input) {
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i, w = 1, k = base2; ; k += base2) {
            if (index >= inputLength) {
              error("invalid-input");
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base2 || digit > floor((maxInt - i) / w)) {
              error("overflow");
            }
            i += digit * w;
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            baseMinusT = base2 - t;
            if (w > floor(maxInt / baseMinusT)) {
              error("overflow");
            }
            w *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return ucs2encode(output);
      }
      function encode4(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error("overflow");
            }
            if (currentValue == n) {
              for (q = delta, k = base2; ; k += base2) {
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                qMinusT = q - t;
                baseMinusT = base2 - t;
                output.push(
                  stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                );
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      }
      function toUnicode(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode3(string.slice(4).toLowerCase()) : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode4(string) : string;
        });
      }
      punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "1.4.1",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode3,
        "encode": encode4,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define("punycode", function() {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key2 in punycode) {
            punycode.hasOwnProperty(key2) && (freeExports[key2] = punycode[key2]);
          }
        }
      } else {
        root.punycode = punycode;
      }
    })(exports);
  }
});

// (disabled):node_modules/.pnpm/object-inspect@1.13.4/node_modules/object-inspect/util.inspect
var require_util3 = __commonJS({
  "(disabled):node_modules/.pnpm/object-inspect@1.13.4/node_modules/object-inspect/util.inspect"() {
  }
});

// node_modules/.pnpm/object-inspect@1.13.4/node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/.pnpm/object-inspect@1.13.4/node_modules/object-inspect/index.js"(exports, module) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util3();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    var quotes = {
      __proto__: null,
      "double": '"',
      single: "'"
    };
    var quoteREs = {
      __proto__: null,
      "double": /(["\\])/g,
      single: /(['\\])/g
    };
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && !has(quotes, opts.quoteStyle)) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect4(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect4);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect4);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect4);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect4(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key2) {
            mapParts.push(inspect4(key2, obj, true) + " => " + inspect4(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect4(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect4(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect4(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect4(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (typeof globalThis !== "undefined" && obj === globalThis || typeof global !== "undefined" && obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect4);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var style = opts.quoteStyle || defaultStyle;
      var quoteChar = quotes[style];
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function canTrustToString(obj) {
      return !toStringTag || !(typeof obj === "object" && (toStringTag in obj || typeof obj[toStringTag] !== "undefined"));
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && canTrustToString(obj);
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && canTrustToString(obj);
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && canTrustToString(obj);
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && canTrustToString(obj);
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && canTrustToString(obj);
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && canTrustToString(obj);
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && canTrustToString(obj);
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key2) {
      return key2 in this;
    };
    function has(obj, key2) {
      return hasOwn.call(obj, key2);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var quoteRE = quoteREs[opts.quoteStyle || "single"];
      quoteRE.lastIndex = 0;
      var s = $replace.call($replace.call(str, quoteRE, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect4) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect4(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key2 in obj) {
        if (!has(obj, key2)) {
          continue;
        }
        if (isArr && String(Number(key2)) === key2 && key2 < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key2] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key2)) {
          xs.push(inspect4(key2, obj) + ": " + inspect4(obj[key2], obj));
        } else {
          xs.push(key2 + ": " + inspect4(obj[key2], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect4(syms[j]) + "]: " + inspect4(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/.pnpm/side-channel-list@1.0.0/node_modules/side-channel-list/index.js
var require_side_channel_list = __commonJS({
  "node_modules/.pnpm/side-channel-list@1.0.0/node_modules/side-channel-list/index.js"(exports, module) {
    "use strict";
    var inspect4 = require_object_inspect();
    var $TypeError = require_type();
    var listGetNode = function(list, key2, isDelete) {
      var prev = list;
      var curr;
      for (; (curr = prev.next) != null; prev = curr) {
        if (curr.key === key2) {
          prev.next = curr.next;
          if (!isDelete) {
            curr.next = /** @type {NonNullable<typeof list.next>} */
            list.next;
            list.next = curr;
          }
          return curr;
        }
      }
    };
    var listGet = function(objects, key2) {
      if (!objects) {
        return void 0;
      }
      var node = listGetNode(objects, key2);
      return node && node.value;
    };
    var listSet = function(objects, key2, value) {
      var node = listGetNode(objects, key2);
      if (node) {
        node.value = value;
      } else {
        objects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */
        {
          // eslint-disable-line no-param-reassign, no-extra-parens
          key: key2,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key2) {
      if (!objects) {
        return false;
      }
      return !!listGetNode(objects, key2);
    };
    var listDelete = function(objects, key2) {
      if (objects) {
        return listGetNode(objects, key2, true);
      }
    };
    module.exports = function getSideChannelList() {
      var $o;
      var channel = {
        assert: function(key2) {
          if (!channel.has(key2)) {
            throw new $TypeError("Side channel does not contain " + inspect4(key2));
          }
        },
        "delete": function(key2) {
          var root = $o && $o.next;
          var deletedNode = listDelete($o, key2);
          if (deletedNode && root && root === deletedNode) {
            $o = void 0;
          }
          return !!deletedNode;
        },
        get: function(key2) {
          return listGet($o, key2);
        },
        has: function(key2) {
          return listHas($o, key2);
        },
        set: function(key2, value) {
          if (!$o) {
            $o = {
              next: void 0
            };
          }
          listSet(
            /** @type {NonNullable<typeof $o>} */
            $o,
            key2,
            value
          );
        }
      };
      return channel;
    };
  }
});

// node_modules/.pnpm/side-channel-map@1.0.1/node_modules/side-channel-map/index.js
var require_side_channel_map = __commonJS({
  "node_modules/.pnpm/side-channel-map@1.0.1/node_modules/side-channel-map/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_call_bound();
    var inspect4 = require_object_inspect();
    var $TypeError = require_type();
    var $Map = GetIntrinsic("%Map%", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var $mapDelete = callBound("Map.prototype.delete", true);
    var $mapSize = callBound("Map.prototype.size", true);
    module.exports = !!$Map && /** @type {Exclude<import('.'), false>} */
    function getSideChannelMap() {
      var $m;
      var channel = {
        assert: function(key2) {
          if (!channel.has(key2)) {
            throw new $TypeError("Side channel does not contain " + inspect4(key2));
          }
        },
        "delete": function(key2) {
          if ($m) {
            var result = $mapDelete($m, key2);
            if ($mapSize($m) === 0) {
              $m = void 0;
            }
            return result;
          }
          return false;
        },
        get: function(key2) {
          if ($m) {
            return $mapGet($m, key2);
          }
        },
        has: function(key2) {
          if ($m) {
            return $mapHas($m, key2);
          }
          return false;
        },
        set: function(key2, value) {
          if (!$m) {
            $m = new $Map();
          }
          $mapSet($m, key2, value);
        }
      };
      return channel;
    };
  }
});

// node_modules/.pnpm/side-channel-weakmap@1.0.2/node_modules/side-channel-weakmap/index.js
var require_side_channel_weakmap = __commonJS({
  "node_modules/.pnpm/side-channel-weakmap@1.0.2/node_modules/side-channel-weakmap/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_call_bound();
    var inspect4 = require_object_inspect();
    var getSideChannelMap = require_side_channel_map();
    var $TypeError = require_type();
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $weakMapDelete = callBound("WeakMap.prototype.delete", true);
    module.exports = $WeakMap ? (
      /** @type {Exclude<import('.'), false>} */
      function getSideChannelWeakMap() {
        var $wm;
        var $m;
        var channel = {
          assert: function(key2) {
            if (!channel.has(key2)) {
              throw new $TypeError("Side channel does not contain " + inspect4(key2));
            }
          },
          "delete": function(key2) {
            if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
              if ($wm) {
                return $weakMapDelete($wm, key2);
              }
            } else if (getSideChannelMap) {
              if ($m) {
                return $m["delete"](key2);
              }
            }
            return false;
          },
          get: function(key2) {
            if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
              if ($wm) {
                return $weakMapGet($wm, key2);
              }
            }
            return $m && $m.get(key2);
          },
          has: function(key2) {
            if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
              if ($wm) {
                return $weakMapHas($wm, key2);
              }
            }
            return !!$m && $m.has(key2);
          },
          set: function(key2, value) {
            if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
              if (!$wm) {
                $wm = new $WeakMap();
              }
              $weakMapSet($wm, key2, value);
            } else if (getSideChannelMap) {
              if (!$m) {
                $m = getSideChannelMap();
              }
              $m.set(key2, value);
            }
          }
        };
        return channel;
      }
    ) : getSideChannelMap;
  }
});

// node_modules/.pnpm/side-channel@1.1.0/node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/.pnpm/side-channel@1.1.0/node_modules/side-channel/index.js"(exports, module) {
    "use strict";
    var $TypeError = require_type();
    var inspect4 = require_object_inspect();
    var getSideChannelList = require_side_channel_list();
    var getSideChannelMap = require_side_channel_map();
    var getSideChannelWeakMap = require_side_channel_weakmap();
    var makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;
    module.exports = function getSideChannel() {
      var $channelData;
      var channel = {
        assert: function(key2) {
          if (!channel.has(key2)) {
            throw new $TypeError("Side channel does not contain " + inspect4(key2));
          }
        },
        "delete": function(key2) {
          return !!$channelData && $channelData["delete"](key2);
        },
        get: function(key2) {
          return $channelData && $channelData.get(key2);
        },
        has: function(key2) {
          return !!$channelData && $channelData.has(key2);
        },
        set: function(key2, value) {
          if (!$channelData) {
            $channelData = makeChannel();
          }
          $channelData.set(key2, value);
        }
      };
      return channel;
    };
  }
});

// node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/utils.js
var require_utils9 = __commonJS({
  "node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = (function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    })();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? { __proto__: null } : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object" && typeof source !== "function") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key2) {
        var value = source[key2];
        if (has.call(acc, key2)) {
          acc[key2] = merge2(acc[key2], value, options);
        } else {
          acc[key2] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key2) {
        acc[key2] = source[key2];
        return acc;
      }, target);
    };
    var decode3 = function(str, defaultDecoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var limit = 1024;
    var encode4 = function encode5(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var j = 0; j < string.length; j += limit) {
        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
        var arr = [];
        for (var i = 0; i < segment.length; ++i) {
          var c = segment.charCodeAt(i);
          if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
            arr[arr.length] = segment.charAt(i);
            continue;
          }
          if (c < 128) {
            arr[arr.length] = hexTable[c];
            continue;
          }
          if (c < 2048) {
            arr[arr.length] = hexTable[192 | c >> 6] + hexTable[128 | c & 63];
            continue;
          }
          if (c < 55296 || c >= 57344) {
            arr[arr.length] = hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
            continue;
          }
          i += 1;
          c = 65536 + ((c & 1023) << 10 | segment.charCodeAt(i) & 1023);
          arr[arr.length] = hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
        }
        out += arr.join("");
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key2 = keys[j];
          var val = obj[key2];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key2 });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode: decode3,
      encode: encode4,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils9();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key2) {
        return prefix + "[" + key2 + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      allowEmptyArrays: false,
      arrayFormat: "indices",
      charset: "utf-8",
      charsetSentinel: false,
      commaRoundTrip: false,
      delimiter: "&",
      encode: true,
      encodeDotInKeys: false,
      encoder: utils.encode,
      encodeValuesOnly: false,
      filter: void 0,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\./g, "%2E") : String(prefix);
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
      if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
        return adjustedPrefix + "[]";
      }
      for (var j = 0; j < objKeys.length; ++j) {
        var key2 = objKeys[j];
        var value = typeof key2 === "object" && key2 && typeof key2.value !== "undefined" ? key2.value : obj[key2];
        if (skipNulls && value === null) {
          continue;
        }
        var encodedKey = allowDots && encodeDotInKeys ? String(key2).replace(/\./g, "%2E") : String(key2);
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          allowEmptyArrays,
          strictNullHandling,
          skipNulls,
          encodeDotInKeys,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
        throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      var arrayFormat;
      if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if ("indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = defaults.arrayFormat;
      }
      if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: !!opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
      var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key2 = objKeys[i];
        var value = obj[key2];
        if (options.skipNulls && value === null) {
          continue;
        }
        pushToArray(keys, stringify(
          value,
          key2,
          generateArrayPrefix,
          commaRoundTrip,
          options.allowEmptyArrays,
          options.strictNullHandling,
          options.skipNulls,
          options.encodeDotInKeys,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils9();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowEmptyArrays: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decodeDotInKeys: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      duplicates: "combine",
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictDepth: false,
      strictNullHandling: false,
      throwOnLimitExceeded: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options, currentArrayLength) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      if (options.throwOnLimitExceeded && currentArrayLength >= options.arrayLimit) {
        throw new RangeError("Array limit exceeded. Only " + options.arrayLimit + " element" + (options.arrayLimit === 1 ? "" : "s") + " allowed in an array.");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      cleanStr = cleanStr.replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(
        options.delimiter,
        options.throwOnLimitExceeded ? limit + 1 : limit
      );
      if (options.throwOnLimitExceeded && parts.length > limit) {
        throw new RangeError("Parameter limit exceeded. Only " + limit + " parameter" + (limit === 1 ? "" : "s") + " allowed.");
      }
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key2;
        var val;
        if (pos === -1) {
          key2 = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key2 = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(
              part.slice(pos + 1),
              options,
              isArray(obj[key2]) ? obj[key2].length : 0
            ),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(String(val));
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        var existing = has.call(obj, key2);
        if (existing && options.duplicates === "combine") {
          obj[key2] = utils.combine(obj[key2], val);
        } else if (!existing || options.duplicates === "last") {
          obj[key2] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var currentArrayLength = 0;
      if (chain.length > 0 && chain[chain.length - 1] === "[]") {
        var parentKey = chain.slice(0, -1).join("");
        currentArrayLength = Array.isArray(val) && val[parentKey] ? val[parentKey].length : 0;
      }
      var leaf = valuesParsed ? val : parseArrayValue(val, options, currentArrayLength);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) {
          obj = options.allowEmptyArrays && (leaf === "" || options.strictNullHandling && leaf === null) ? [] : utils.combine([], leaf);
        } else {
          obj = options.plainObjects ? { __proto__: null } : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
          var index = parseInt(decodedRoot, 10);
          if (!options.parseArrays && decodedRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (decodedRoot !== "__proto__") {
            obj[decodedRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key2 = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key2);
      var parent = segment ? key2.slice(0, segment.index) : key2;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key2)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        if (options.strictDepth === true) {
          throw new RangeError("Input depth exceeded depth option of " + options.depth + " and strictDepth is true");
        }
        keys.push("[" + key2.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") {
        throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      if (typeof opts.throwOnLimitExceeded !== "undefined" && typeof opts.throwOnLimitExceeded !== "boolean") {
        throw new TypeError("`throwOnLimitExceeded` option must be a boolean");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
      if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") {
        throw new TypeError("The duplicates option must be either combine, first, or last");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictDepth: typeof opts.strictDepth === "boolean" ? !!opts.strictDepth : defaults.strictDepth,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling,
        throwOnLimitExceeded: typeof opts.throwOnLimitExceeded === "boolean" ? opts.throwOnLimitExceeded : false
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? { __proto__: null } : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? { __proto__: null } : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key2 = keys[i];
        var newObj = parseKeys(key2, tempObj[key2], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/.pnpm/qs@6.14.0/node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse2 = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse: parse2,
      stringify
    };
  }
});

// node_modules/.pnpm/url@0.11.4/node_modules/url/url.js
var require_url = __commonJS({
  "node_modules/.pnpm/url@0.11.4/node_modules/url/url.js"(exports) {
    "use strict";
    var punycode = require_punycode();
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/;
    var delims = [
      "<",
      ">",
      '"',
      "`",
      " ",
      "\r",
      "\n",
      "	"
    ];
    var unwise = [
      "{",
      "}",
      "|",
      "\\",
      "^",
      "`"
    ].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = [
      "%",
      "/",
      "?",
      ";",
      "#"
    ].concat(autoEscape);
    var hostEndingChars = [
      "/",
      "?",
      "#"
    ];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var unsafeProtocol = {
      javascript: true,
      "javascript:": true
    };
    var hostlessProtocol = {
      javascript: true,
      "javascript:": true
    };
    var slashedProtocol = {
      http: true,
      https: true,
      ftp: true,
      gopher: true,
      file: true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    var querystring = require_lib2();
    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && typeof url === "object" && url instanceof Url) {
        return url;
      }
      var u = new Url();
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      if (typeof url !== "string") {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      }
      var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, "/");
      url = uSplit.join(splitter);
      var rest = url;
      rest = rest.trim();
      if (!slashesDenoteHost && url.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString) {
            this.search = "";
            this.query = {};
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        if (hostEnd === -1) {
          hostEnd = rest.length;
        }
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost();
        this.hostname = this.hostname || "";
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) {
              continue;
            }
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = "/" + notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        } else {
          this.hostname = this.hostname.toLowerCase();
        }
        if (!ipv6Hostname) {
          this.hostname = punycode.toASCII(this.hostname);
        }
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== "/") {
            rest = "/" + rest;
          }
        }
      }
      if (!unsafeProtocol[lowerProto]) {
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1) {
            continue;
          }
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
      var hash3 = rest.indexOf("#");
      if (hash3 !== -1) {
        this.hash = rest.substr(hash3);
        rest = rest.slice(0, hash3);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        this.search = "";
        this.query = {};
      }
      if (rest) {
        this.pathname = rest;
      }
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "/";
      }
      if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
      }
      this.href = this.format();
      return this;
    };
    function urlFormat(obj) {
      if (typeof obj === "string") {
        obj = urlParse(obj);
      }
      if (!(obj instanceof Url)) {
        return Url.prototype.format.call(obj);
      }
      return obj.format();
    }
    Url.prototype.format = function() {
      var auth = this.auth || "";
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
      }
      var protocol = this.protocol || "", pathname = this.pathname || "", hash3 = this.hash || "", host = false, query = "";
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) {
          host += ":" + this.port;
        }
      }
      if (this.query && typeof this.query === "object" && Object.keys(this.query).length) {
        query = querystring.stringify(this.query, {
          arrayFormat: "repeat",
          addQueryPrefix: false
        });
      }
      var search = this.search || query && "?" + query || "";
      if (protocol && protocol.substr(-1) !== ":") {
        protocol += ":";
      }
      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") {
          pathname = "/" + pathname;
        }
      } else if (!host) {
        host = "";
      }
      if (hash3 && hash3.charAt(0) !== "#") {
        hash3 = "#" + hash3;
      }
      if (search && search.charAt(0) !== "?") {
        search = "?" + search;
      }
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace("#", "%23");
      return protocol + host + pathname + search + hash3;
    };
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    function urlResolveObject(source, relative) {
      if (!source) {
        return relative;
      }
      return urlParse(source, false, true).resolveObject(relative);
    }
    Url.prototype.resolveObject = function(relative) {
      if (typeof relative === "string") {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
      result.hash = relative.hash;
      if (relative.href === "") {
        result.href = result.format();
        return result;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol") {
            result[rkey] = relative[rkey];
          }
        }
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.pathname = "/";
          result.path = result.pathname;
        }
        result.href = result.format();
        return result;
      }
      if (relative.protocol && relative.protocol !== result.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || "").split("/");
          while (relPath.length && !(relative.host = relPath.shift())) {
          }
          if (!relative.host) {
            relative.host = "";
          }
          if (!relative.hostname) {
            relative.hostname = "";
          }
          if (relPath[0] !== "") {
            relPath.unshift("");
          }
          if (relPath.length < 2) {
            relPath.unshift("");
          }
          result.pathname = relPath.join("/");
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        if (result.pathname || result.search) {
          var p = result.pathname || "";
          var s = result.search || "";
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
      var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
      if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
          if (srcPath[0] === "") {
            srcPath[0] = result.host;
          } else {
            srcPath.unshift(result.host);
          }
        }
        result.host = "";
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === "") {
              relPath[0] = relative.host;
            } else {
              relPath.unshift(relative.host);
            }
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      if (isRelAbs) {
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath) {
          srcPath = [];
        }
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (relative.search != null) {
        if (psychotic) {
          result.host = srcPath.shift();
          result.hostname = result.host;
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.hostname = authInHost.shift();
            result.host = result.hostname;
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        if (result.pathname !== null || result.search !== null) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.href = result.format();
        return result;
      }
      if (!srcPath.length) {
        result.pathname = null;
        if (result.search) {
          result.path = "/" + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === ".") {
          srcPath.splice(i, 1);
        } else if (last === "..") {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result.hostname = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        result.host = result.hostname;
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.hostname = authInHost.shift();
          result.host = result.hostname;
        }
      }
      mustEndAbs = mustEndAbs || result.host && srcPath.length;
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
      }
      if (srcPath.length > 0) {
        result.pathname = srcPath.join("/");
      } else {
        result.pathname = null;
        result.path = null;
      }
      if (result.pathname !== null || result.search !== null) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    Url.prototype.parseHost = function() {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) {
        this.hostname = host;
      }
    };
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;
  }
});

// node_modules/.pnpm/micro-ftch@0.3.1/node_modules/micro-ftch/index.js
var require_micro_ftch = __commonJS({
  "node_modules/.pnpm/micro-ftch@0.3.1/node_modules/micro-ftch/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidStatusCodeError = exports.InvalidCertError = void 0;
    var DEFAULT_OPT = Object.freeze({
      redirect: true,
      expectStatusCode: 200,
      headers: {},
      full: false,
      keepAlive: true,
      cors: false,
      referrer: false,
      sslAllowSelfSigned: false,
      _redirectCount: 0
    });
    var InvalidCertError = class extends Error {
      constructor(msg, fingerprint256) {
        super(msg);
        this.fingerprint256 = fingerprint256;
      }
    };
    exports.InvalidCertError = InvalidCertError;
    var InvalidStatusCodeError = class extends Error {
      constructor(statusCode) {
        super(`Request Failed. Status Code: ${statusCode}`);
        this.statusCode = statusCode;
      }
    };
    exports.InvalidStatusCodeError = InvalidStatusCodeError;
    function detectType(b, type) {
      if (!type || type === "text" || type === "json") {
        try {
          let text = new TextDecoder("utf8", { fatal: true }).decode(b);
          if (type === "text")
            return text;
          try {
            return JSON.parse(text);
          } catch (err) {
            if (type === "json")
              throw err;
            return text;
          }
        } catch (err) {
          if (type === "text" || type === "json")
            throw err;
        }
      }
      return b;
    }
    var agents = {};
    function fetchNode(url, _options) {
      let options = { ...DEFAULT_OPT, ..._options };
      const http = require_http();
      const https = require_https();
      const zlib = require_zlib();
      const { promisify } = require_util2();
      const { resolve: urlResolve } = require_url();
      const isSecure = !!/^https/.test(url);
      let opts = {
        method: options.method || "GET",
        headers: { "Accept-Encoding": "gzip, deflate, br" }
      };
      const compactFP = (s) => s.replace(/:| /g, "").toLowerCase();
      if (options.keepAlive) {
        const agentOpt = {
          keepAlive: true,
          keepAliveMsecs: 30 * 1e3,
          maxFreeSockets: 1024,
          maxCachedSessions: 1024
        };
        const agentKey = [
          isSecure,
          isSecure && options.sslPinnedCertificates?.map((i) => compactFP(i)).sort()
        ].join();
        opts.agent = agents[agentKey] || (agents[agentKey] = new (isSecure ? https : http).Agent(agentOpt));
      }
      if (options.type === "json")
        opts.headers["Content-Type"] = "application/json";
      if (options.data) {
        if (!options.method)
          opts.method = "POST";
        opts.body = options.type === "json" ? JSON.stringify(options.data) : options.data;
      }
      opts.headers = { ...opts.headers, ...options.headers };
      if (options.sslAllowSelfSigned)
        opts.rejectUnauthorized = false;
      const handleRes = async (res) => {
        const status = res.statusCode;
        if (options.redirect && 300 <= status && status < 400 && res.headers["location"]) {
          if (options._redirectCount == 10)
            throw new Error("Request failed. Too much redirects.");
          options._redirectCount += 1;
          return await fetchNode(urlResolve(url, res.headers["location"]), options);
        }
        if (options.expectStatusCode && status !== options.expectStatusCode) {
          res.resume();
          throw new InvalidStatusCodeError(status);
        }
        let buf = [];
        for await (const chunk of res)
          buf.push(chunk);
        let bytes = Buffer.concat(buf);
        const encoding = res.headers["content-encoding"];
        if (encoding === "br")
          bytes = await promisify(zlib.brotliDecompress)(bytes);
        if (encoding === "gzip" || encoding === "deflate")
          bytes = await promisify(zlib.unzip)(bytes);
        const body = detectType(bytes, options.type);
        if (options.full)
          return { headers: res.headers, status, body };
        return body;
      };
      return new Promise((resolve, reject) => {
        const handleError = async (err) => {
          if (err && err.code === "DEPTH_ZERO_SELF_SIGNED_CERT") {
            try {
              await fetchNode(url, { ...options, sslAllowSelfSigned: true, sslPinnedCertificates: [] });
            } catch (e) {
              if (e && e.fingerprint256) {
                err = new InvalidCertError(`Self-signed SSL certificate: ${e.fingerprint256}`, e.fingerprint256);
              }
            }
          }
          reject(err);
        };
        const req = (isSecure ? https : http).request(url, opts, (res) => {
          res.on("error", handleError);
          (async () => {
            try {
              resolve(await handleRes(res));
            } catch (error) {
              reject(error);
            }
          })();
        });
        req.on("error", handleError);
        const pinned = options.sslPinnedCertificates?.map((i) => compactFP(i));
        const mfetchSecureConnect = (socket) => {
          const fp256 = compactFP(socket.getPeerCertificate()?.fingerprint256 || "");
          if (!fp256 && socket.isSessionReused())
            return;
          if (pinned.includes(fp256))
            return;
          req.emit("error", new InvalidCertError(`Invalid SSL certificate: ${fp256} Expected: ${pinned}`, fp256));
          return req.abort();
        };
        if (options.sslPinnedCertificates) {
          req.on("socket", (socket) => {
            const hasListeners = socket.listeners("secureConnect").map((i) => (i.name || "").replace("bound ", "")).includes("mfetchSecureConnect");
            if (hasListeners)
              return;
            socket.on("secureConnect", mfetchSecureConnect.bind(null, socket));
          });
        }
        if (options.keepAlive)
          req.setNoDelay(true);
        if (opts.body)
          req.write(opts.body);
        req.end();
      });
    }
    var SAFE_HEADERS = new Set(["Accept", "Accept-Language", "Content-Language", "Content-Type"].map((i) => i.toLowerCase()));
    var FORBIDDEN_HEADERS = new Set([
      "Accept-Charset",
      "Accept-Encoding",
      "Access-Control-Request-Headers",
      "Access-Control-Request-Method",
      "Connection",
      "Content-Length",
      "Cookie",
      "Cookie2",
      "Date",
      "DNT",
      "Expect",
      "Host",
      "Keep-Alive",
      "Origin",
      "Referer",
      "TE",
      "Trailer",
      "Transfer-Encoding",
      "Upgrade",
      "Via"
    ].map((i) => i.toLowerCase()));
    async function fetchBrowser(url, _options) {
      let options = { ...DEFAULT_OPT, ..._options };
      const headers = new Headers();
      if (options.type === "json")
        headers.set("Content-Type", "application/json");
      let parsed = new URL(url);
      if (parsed.username) {
        const auth = btoa(`${parsed.username}:${parsed.password}`);
        headers.set("Authorization", `Basic ${auth}`);
        parsed.username = "";
        parsed.password = "";
      }
      url = "" + parsed;
      for (let k in options.headers) {
        const name = k.toLowerCase();
        if (SAFE_HEADERS.has(name) || options.cors && !FORBIDDEN_HEADERS.has(name))
          headers.set(k, options.headers[k]);
      }
      let opts = { headers, redirect: options.redirect ? "follow" : "manual" };
      if (!options.referrer)
        opts.referrerPolicy = "no-referrer";
      if (options.cors)
        opts.mode = "cors";
      if (options.data) {
        if (!options.method)
          opts.method = "POST";
        opts.body = options.type === "json" ? JSON.stringify(options.data) : options.data;
      }
      const res = await fetch(url, opts);
      if (options.expectStatusCode && res.status !== options.expectStatusCode)
        throw new InvalidStatusCodeError(res.status);
      const body = detectType(new Uint8Array(await res.arrayBuffer()), options.type);
      if (options.full)
        return { headers: Object.fromEntries(res.headers.entries()), status: res.status, body };
      return body;
    }
    var IS_NODE = !!(typeof process == "object" && process.versions && process.versions.node && process.versions.v8);
    function fetchUrl(url, options) {
      const fn = IS_NODE ? fetchNode : fetchBrowser;
      return fn(url, options);
    }
    exports.default = fetchUrl;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/provider.js
var require_provider = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProvider = exports.fetchFromProvider = void 0;
    var micro_ftch_1 = require_micro_ftch();
    var fetchFromProvider = async (url, params) => {
      const res = await (0, micro_ftch_1.default)(url, {
        headers: {
          "content-type": "application/json"
        },
        type: "json",
        data: {
          method: params.method,
          params: params.params,
          jsonrpc: "2.0",
          id: 1
        }
      });
      return res.result;
    };
    exports.fetchFromProvider = fetchFromProvider;
    var getProvider = (provider) => {
      if (typeof provider === "string") {
        return provider;
      } else if (provider?.connection?.url !== void 0) {
        return provider.connection.url;
      } else {
        throw new Error("Must provide valid provider URL or Web3Provider");
      }
    };
    exports.getProvider = getProvider;
  }
});

// node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/.pnpm/@ethereumjs+util@8.1.0/node_modules/@ethereumjs/util/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toAscii = exports.stripHexPrefix = exports.padToEven = exports.isHexString = exports.isHexPrefixed = exports.getKeys = exports.getBinarySize = exports.fromUtf8 = exports.fromAscii = exports.arrayContainsArray = void 0;
    __exportStar(require_constants(), exports);
    __exportStar(require_units(), exports);
    __exportStar(require_account(), exports);
    __exportStar(require_address(), exports);
    __exportStar(require_withdrawal(), exports);
    __exportStar(require_signature(), exports);
    __exportStar(require_bytes(), exports);
    __exportStar(require_types3(), exports);
    __exportStar(require_encoding(), exports);
    __exportStar(require_asyncEventEmitter(), exports);
    var internal_1 = require_internal();
    Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function() {
      return internal_1.arrayContainsArray;
    } });
    Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function() {
      return internal_1.fromAscii;
    } });
    Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function() {
      return internal_1.fromUtf8;
    } });
    Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function() {
      return internal_1.getBinarySize;
    } });
    Object.defineProperty(exports, "getKeys", { enumerable: true, get: function() {
      return internal_1.getKeys;
    } });
    Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function() {
      return internal_1.isHexPrefixed;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return internal_1.isHexString;
    } });
    Object.defineProperty(exports, "padToEven", { enumerable: true, get: function() {
      return internal_1.padToEven;
    } });
    Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function() {
      return internal_1.stripHexPrefix;
    } });
    Object.defineProperty(exports, "toAscii", { enumerable: true, get: function() {
      return internal_1.toAscii;
    } });
    __exportStar(require_lock(), exports);
    __exportStar(require_provider(), exports);
  }
});

// node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/_u64.js
var require_u642 = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/_u64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBig = exports.shrSL = exports.shrSH = exports.rotrSL = exports.rotrSH = exports.rotrBL = exports.rotrBH = exports.rotr32L = exports.rotr32H = exports.rotlSL = exports.rotlSH = exports.rotlBL = exports.rotlBH = exports.add5L = exports.add5H = exports.add4L = exports.add4H = exports.add3L = exports.add3H = void 0;
    exports.add = add3;
    exports.fromBig = fromBig;
    exports.split = split;
    var U32_MASK64 = BigInt(2 ** 32 - 1);
    var _32n = BigInt(32);
    function fromBig(n, le = false) {
      if (le)
        return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
      return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    function split(lst, le = false) {
      const len = lst.length;
      let Ah = new Uint32Array(len);
      let Al = new Uint32Array(len);
      for (let i = 0; i < len; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
    exports.toBig = toBig;
    var shrSH = (h, _l, s) => h >>> s;
    exports.shrSH = shrSH;
    var shrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports.shrSL = shrSL;
    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
    exports.rotrSH = rotrSH;
    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports.rotrSL = rotrSL;
    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports.rotrBH = rotrBH;
    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports.rotrBL = rotrBL;
    var rotr32H = (_h, l) => l;
    exports.rotr32H = rotr32H;
    var rotr32L = (h, _l) => h;
    exports.rotr32L = rotr32L;
    var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
    exports.rotlSH = rotlSH;
    var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
    exports.rotlSL = rotlSL;
    var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports.rotlBH = rotlBH;
    var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports.rotlBL = rotlBL;
    function add3(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports.add5H = add5H;
    var u64 = {
      fromBig,
      split,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add: add3,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports.default = u64;
  }
});

// node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = void 0;
    exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/utils.js
var require_utils10 = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.Hash = exports.nextTick = exports.swap32IfBE = exports.byteSwapIfBE = exports.swap8IfBE = exports.isLE = void 0;
    exports.isBytes = isBytes2;
    exports.anumber = anumber;
    exports.abytes = abytes;
    exports.ahash = ahash;
    exports.aexists = aexists;
    exports.aoutput = aoutput;
    exports.u8 = u8;
    exports.u32 = u32;
    exports.clean = clean;
    exports.createView = createView;
    exports.rotr = rotr;
    exports.rotl = rotl;
    exports.byteSwap = byteSwap;
    exports.byteSwap32 = byteSwap32;
    exports.bytesToHex = bytesToHex;
    exports.hexToBytes = hexToBytes;
    exports.asyncLoop = asyncLoop;
    exports.utf8ToBytes = utf8ToBytes;
    exports.bytesToUtf8 = bytesToUtf8;
    exports.toBytes = toBytes;
    exports.kdfInputToBytes = kdfInputToBytes;
    exports.concatBytes = concatBytes;
    exports.checkOpts = checkOpts;
    exports.createHasher = createHasher;
    exports.createOptHasher = createOptHasher;
    exports.createXOFer = createXOFer;
    exports.randomBytes = randomBytes2;
    var crypto_1 = require_crypto2();
    function isBytes2(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function anumber(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error("positive integer expected, got " + n);
    }
    function abytes(b, ...lengths) {
      if (!isBytes2(b))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
    }
    function ahash(h) {
      if (typeof h !== "function" || typeof h.create !== "function")
        throw new Error("Hash should be wrapped by utils.createHasher");
      anumber(h.outputLen);
      anumber(h.blockLen);
    }
    function aexists(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    function aoutput(out, instance) {
      abytes(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error("digestInto() expects output buffer of length at least " + min);
      }
    }
    function u8(arr) {
      return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function u32(arr) {
      return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    }
    function clean(...arrays) {
      for (let i = 0; i < arrays.length; i++) {
        arrays[i].fill(0);
      }
    }
    function createView(arr) {
      return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function rotr(word, shift) {
      return word << 32 - shift | word >>> shift;
    }
    function rotl(word, shift) {
      return word << shift | word >>> 32 - shift >>> 0;
    }
    exports.isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
    function byteSwap(word) {
      return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    }
    exports.swap8IfBE = exports.isLE ? (n) => n : (n) => byteSwap(n);
    exports.byteSwapIfBE = exports.swap8IfBE;
    function byteSwap32(arr) {
      for (let i = 0; i < arr.length; i++) {
        arr[i] = byteSwap(arr[i]);
      }
      return arr;
    }
    exports.swap32IfBE = exports.isLE ? (u) => u : byteSwap32;
    var hasHexBuiltin = (() => (
      // @ts-ignore
      typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
    ))();
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      abytes(bytes);
      if (hasHexBuiltin)
        return bytes.toHex();
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
    function asciiToBase16(ch) {
      if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0;
      if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10);
      if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      if (hasHexBuiltin)
        return Uint8Array.fromHex(hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    var nextTick = async () => {
    };
    exports.nextTick = nextTick;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error("string expected");
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function bytesToUtf8(bytes) {
      return new TextDecoder().decode(bytes);
    }
    function toBytes(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      abytes(data);
      return data;
    }
    function kdfInputToBytes(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      abytes(data);
      return data;
    }
    function concatBytes(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
        throw new Error("options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    var Hash = class {
    };
    exports.Hash = Hash;
    function createHasher(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    function createOptHasher(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function createXOFer(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructor = createHasher;
    exports.wrapConstructorWithOpts = createOptHasher;
    exports.wrapXOFConstructorWithOpts = createXOFer;
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === "function") {
        return Uint8Array.from(crypto_1.crypto.randomBytes(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
  }
});

// node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/sha3.js
var require_sha33 = __commonJS({
  "node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/sha3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = void 0;
    exports.keccakP = keccakP;
    var _u64_ts_1 = require_u642();
    var utils_ts_1 = require_utils10();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _7n = BigInt(7);
    var _256n = BigInt(256);
    var _0x71n = BigInt(113);
    var SHA3_PI = [];
    var SHA3_ROTL = [];
    var _SHA3_IOTA = [];
    for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n)
          t ^= _1n << (_1n << BigInt(j)) - _1n;
      }
      _SHA3_IOTA.push(t);
    }
    var IOTAS = (0, _u64_ts_1.split)(_SHA3_IOTA, true);
    var SHA3_IOTA_H = IOTAS[0];
    var SHA3_IOTA_L = IOTAS[1];
    var rotlH = (h, l, s) => s > 32 ? (0, _u64_ts_1.rotlBH)(h, l, s) : (0, _u64_ts_1.rotlSH)(h, l, s);
    var rotlL = (h, l, s) => s > 32 ? (0, _u64_ts_1.rotlBL)(h, l, s) : (0, _u64_ts_1.rotlSL)(h, l, s);
    function keccakP(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL[t];
          const Th = rotlH(curH, curL, shift);
          const Tl = rotlL(curH, curL, shift);
          const PI = SHA3_PI[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
      }
      (0, utils_ts_1.clean)(B);
    }
    var Keccak = class _Keccak extends utils_ts_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        this.enableXOF = false;
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        (0, utils_ts_1.anumber)(outputLen);
        if (!(0 < blockLen && blockLen < 200))
          throw new Error("only keccak-f1600 function is supported");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_ts_1.u32)(this.state);
      }
      clone() {
        return this._cloneInto();
      }
      keccak() {
        (0, utils_ts_1.swap32IfBE)(this.state32);
        keccakP(this.state32, this.rounds);
        (0, utils_ts_1.swap32IfBE)(this.state32);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, utils_ts_1.aexists)(this);
        data = (0, utils_ts_1.toBytes)(data);
        (0, utils_ts_1.abytes)(data);
        const { blockLen, state } = this;
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, utils_ts_1.aexists)(this, false);
        (0, utils_ts_1.abytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes) {
        (0, utils_ts_1.anumber)(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
        (0, utils_ts_1.aoutput)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        (0, utils_ts_1.clean)(this.state);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports.Keccak = Keccak;
    var gen = (suffix, blockLen, outputLen) => (0, utils_ts_1.createHasher)(() => new Keccak(blockLen, suffix, outputLen));
    exports.sha3_224 = (() => gen(6, 144, 224 / 8))();
    exports.sha3_256 = (() => gen(6, 136, 256 / 8))();
    exports.sha3_384 = (() => gen(6, 104, 384 / 8))();
    exports.sha3_512 = (() => gen(6, 72, 512 / 8))();
    exports.keccak_224 = (() => gen(1, 144, 224 / 8))();
    exports.keccak_256 = (() => gen(1, 136, 256 / 8))();
    exports.keccak_384 = (() => gen(1, 104, 384 / 8))();
    exports.keccak_512 = (() => gen(1, 72, 512 / 8))();
    var genShake = (suffix, blockLen, outputLen) => (0, utils_ts_1.createXOFer)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports.shake128 = (() => genShake(31, 168, 128 / 8))();
    exports.shake256 = (() => genShake(31, 136, 256 / 8))();
  }
});

// node_modules/.pnpm/ethereum-bloom-filters@1.2.0/node_modules/ethereum-bloom-filters/dist/utils.js
var require_utils11 = __commonJS({
  "node_modules/.pnpm/ethereum-bloom-filters@1.2.0/node_modules/ethereum-bloom-filters/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sha3_1 = require_sha33();
    var utils_12 = require_utils10();
    function keccak2563(data) {
      return bytesToHex(sha3_1.keccak_256(toByteArray(data)));
    }
    exports.keccak256 = keccak2563;
    exports.padLeft = (value, chars) => {
      const hasPrefix = /^0x/i.test(value) || typeof value === "number";
      value = value.toString().replace(/^0x/i, "");
      const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + new Array(padding).join("0") + value;
    };
    function bytesToHex(bytes) {
      return "0x" + utils_12.bytesToHex(bytes);
    }
    exports.bytesToHex = bytesToHex;
    function toByteArray(value) {
      if (value == null) {
        throw new Error("cannot convert null value to array");
      }
      if (typeof value === "string") {
        const match = value.match(/^(0x)?[0-9a-fA-F]*$/);
        if (!match) {
          throw new Error("invalid hexidecimal string");
        }
        if (match[1] !== "0x") {
          throw new Error("hex string must have 0x prefix");
        }
        value = value.substring(2);
        if (value.length % 2) {
          value = "0" + value;
        }
        const result = [];
        for (let i = 0; i < value.length; i += 2) {
          result.push(parseInt(value.substr(i, 2), 16));
        }
        return addSlice2(new Uint8Array(result));
      }
      if (isByteArray(value)) {
        return addSlice2(new Uint8Array(value));
      }
      throw new Error("invalid arrayify value");
    }
    exports.toByteArray = toByteArray;
    function isByteArray(value) {
      if (!value || // tslint:disable-next-line: radix
      parseInt(String(value.length)) != value.length || typeof value === "string") {
        return false;
      }
      for (let i = 0; i < value.length; i++) {
        const v = value[i];
        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
          return false;
        }
      }
      return true;
    }
    function addSlice2(array) {
      if (array.slice !== void 0) {
        return array;
      }
      array.slice = () => {
        const args = Array.prototype.slice.call(arguments);
        return addSlice2(new Uint8Array(Array.prototype.slice.apply(array, args)));
      };
      return array;
    }
  }
});

// node_modules/.pnpm/ethereum-bloom-filters@1.2.0/node_modules/ethereum-bloom-filters/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/.pnpm/ethereum-bloom-filters@1.2.0/node_modules/ethereum-bloom-filters/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_12 = require_utils11();
    function isBloom(bloom) {
      if (typeof bloom !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
        return false;
      }
      if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
        return true;
      }
      return false;
    }
    exports.isBloom = isBloom;
    function isInBloom(bloom, value) {
      if (typeof value === "object" && value.constructor === Uint8Array) {
        value = utils_12.bytesToHex(value);
      }
      const hash3 = utils_12.keccak256(value).replace("0x", "");
      for (let i = 0; i < 12; i += 4) {
        const bitpos = (parseInt(hash3.substr(i, 2), 16) << 8) + parseInt(hash3.substr(i + 2, 2), 16) & 2047;
        const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
        const offset = 1 << bitpos % 4;
        if ((code & offset) !== offset) {
          return false;
        }
      }
      return true;
    }
    exports.isInBloom = isInBloom;
    function codePointToInt(codePoint) {
      if (codePoint >= 48 && codePoint <= 57) {
        return codePoint - 48;
      }
      if (codePoint >= 65 && codePoint <= 70) {
        return codePoint - 55;
      }
      if (codePoint >= 97 && codePoint <= 102) {
        return codePoint - 87;
      }
      throw new Error("invalid bloom");
    }
    function isUserEthereumAddressInBloom(bloom, ethereumAddress) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isAddress2(ethereumAddress)) {
        throw new Error(`Invalid ethereum address given: "${ethereumAddress}"`);
      }
      const address = utils_12.padLeft(ethereumAddress, 64);
      return isInBloom(bloom, address);
    }
    exports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;
    function isContractAddressInBloom(bloom, contractAddress) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isAddress2(contractAddress)) {
        throw new Error(`Invalid contract address given: "${contractAddress}"`);
      }
      return isInBloom(bloom, contractAddress);
    }
    exports.isContractAddressInBloom = isContractAddressInBloom;
    function isTopicInBloom(bloom, topic) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isTopic(topic)) {
        throw new Error("Invalid topic");
      }
      return isInBloom(bloom, topic);
    }
    exports.isTopicInBloom = isTopicInBloom;
    function isTopic(topic) {
      if (typeof topic !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
        return false;
      } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
        return true;
      }
      return false;
    }
    exports.isTopic = isTopic;
    function isAddress2(address) {
      if (typeof address !== "string") {
        return false;
      }
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        return true;
      }
      if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        return true;
      }
      return false;
    }
    exports.isAddress = isAddress2;
  }
});

// node_modules/.pnpm/web3-utils@1.10.4/node_modules/web3-utils/lib/utils.js
var require_utils12 = __commonJS({
  "node_modules/.pnpm/web3-utils@1.10.4/node_modules/web3-utils/lib/utils.js"(exports, module) {
    var BN3 = require_bn();
    var numberToBN = require_src5();
    var utf8 = require_utf8();
    var ethereumjsUtil = require_dist4();
    var ethereumBloomFilters = require_dist5();
    var { keccak256: keccak2563 } = require_keccak();
    var isBN = function(object) {
      return BN3.isBN(object);
    };
    var isBigNumber = function(object) {
      return object && object.constructor && object.constructor.name === "BigNumber";
    };
    var toBN2 = function(number) {
      try {
        return numberToBN.apply(null, arguments);
      } catch (e) {
        throw new Error(e + ' Given value: "' + number + '"');
      }
    };
    var toTwosComplement = function(number) {
      return "0x" + toBN2(number).toTwos(256).toString(16, 64);
    };
    var isAddress2 = function(address) {
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        return false;
      } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
        return true;
      } else {
        return checkAddressChecksum(address);
      }
    };
    var checkAddressChecksum = function(address) {
      address = address.replace(/^0x/i, "");
      var addressHash = sha32(address.toLowerCase()).replace(/^0x/i, "");
      for (var i = 0; i < 40; i++) {
        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {
          return false;
        }
      }
      return true;
    };
    var leftPad = function(string, chars, sign3) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + new Array(padding).join(sign3 ? sign3 : "0") + string;
    };
    var rightPad = function(string, chars, sign3) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + string + new Array(padding).join(sign3 ? sign3 : "0");
    };
    var utf8ToHex = function(str) {
      str = utf8.encode(str);
      var hex = "";
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var hexToUtf8 = function(hex) {
      if (!isHexStrict(hex))
        throw new Error('The parameter "' + hex + '" must be a valid HEX string.');
      var str = "";
      var code = 0;
      hex = hex.replace(/^0x/i, "");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      var l = hex.length;
      for (var i = 0; i < l; i += 2) {
        code = parseInt(hex.slice(i, i + 2), 16);
        str += String.fromCharCode(code);
      }
      return utf8.decode(str);
    };
    var hexToNumber = function(value, bigIntOnOverflow = false) {
      if (!value) {
        return value;
      }
      if (typeof value === "string" && !isHexStrict(value)) {
        throw new Error('Given value "' + value + '" is not a valid hex string.');
      }
      const n = toBN2(value);
      if (bigIntOnOverflow && (n > Number.MAX_SAFE_INTEGER || n < Number.MIN_SAFE_INTEGER)) {
        return BigInt(n);
      }
      return n.toNumber();
    };
    var hexToNumberString = function(value) {
      if (!value)
        return value;
      if (typeof value === "string" && !isHexStrict(value)) {
        throw new Error('Given value "' + value + '" is not a valid hex string.');
      }
      return toBN2(value).toString(10);
    };
    var numberToHex = function(value) {
      if (value === null || value === void 0) {
        return value;
      }
      if (!isFinite(value) && !isHexStrict(value)) {
        throw new Error('Given input "' + value + '" is not a number.');
      }
      var number = toBN2(value);
      var result = number.toString(16);
      return number.lt(new BN3(0)) ? "-0x" + result.slice(1) : "0x" + result;
    };
    var bytesToHex = function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 15).toString(16));
      }
      return "0x" + hex.join("");
    };
    var hexToBytes = function(hex) {
      hex = hex.toString(16);
      if (!isHexStrict(hex)) {
        throw new Error('Given value "' + hex + '" is not a valid hex string.');
      }
      hex = hex.replace(/^0x/i, "");
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.slice(c, c + 2), 16));
      return bytes;
    };
    var toHex2 = function(value, returnType) {
      if (isAddress2(value)) {
        return returnType ? "address" : "0x" + value.toLowerCase().replace(/^0x/i, "");
      }
      if (typeof value === "boolean") {
        return returnType ? "bool" : value ? "0x01" : "0x00";
      }
      if (Buffer.isBuffer(value)) {
        return "0x" + value.toString("hex");
      }
      if (typeof value === "object" && !!value && !isBigNumber(value) && !isBN(value)) {
        return returnType ? "string" : utf8ToHex(JSON.stringify(value));
      }
      if (typeof value === "string") {
        if (value.indexOf("-0x") === 0 || value.indexOf("-0X") === 0) {
          return returnType ? "int256" : numberToHex(value);
        } else if (value.indexOf("0x") === 0 || value.indexOf("0X") === 0) {
          return returnType ? "bytes" : value;
        } else if (!isFinite(value)) {
          return returnType ? "string" : utf8ToHex(value);
        }
      }
      return returnType ? value < 0 ? "int256" : "uint256" : numberToHex(value);
    };
    var isHexStrict = function(hex) {
      return (typeof hex === "string" || typeof hex === "number") && /^(-)?0x[0-9a-f]*$/i.test(hex);
    };
    var isHex = function(hex) {
      return (typeof hex === "string" || typeof hex === "number") && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);
    };
    var stripHexPrefix = function(str) {
      if (str !== 0 && isHex(str))
        return str.replace(/^(-)?0x/i, "$1");
      return str;
    };
    var isBloom = function(bloom) {
      return ethereumBloomFilters.isBloom(bloom);
    };
    var isUserEthereumAddressInBloom = function(bloom, ethereumAddress) {
      return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);
    };
    var isContractAddressInBloom = function(bloom, contractAddress) {
      return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);
    };
    var isTopic = function(topic) {
      return ethereumBloomFilters.isTopic(topic);
    };
    var isTopicInBloom = function(bloom, topic) {
      return ethereumBloomFilters.isTopicInBloom(bloom, topic);
    };
    var isInBloom = function(bloom, topic) {
      return ethereumBloomFilters.isInBloom(bloom, topic);
    };
    var SHA3_NULL_S = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    var sha32 = function(value) {
      if (isBN(value)) {
        value = value.toString();
      }
      if (isHexStrict(value) && /^0x/i.test(value.toString())) {
        value = ethereumjsUtil.toBuffer(value);
      } else if (typeof value === "string") {
        value = Buffer.from(value, "utf-8");
      }
      var returnValue = ethereumjsUtil.bufferToHex(keccak2563(value));
      if (returnValue === SHA3_NULL_S) {
        return null;
      } else {
        return returnValue;
      }
    };
    sha32._Hash = keccak2563;
    var sha3Raw = function(value) {
      value = sha32(value);
      if (value === null) {
        return SHA3_NULL_S;
      }
      return value;
    };
    var toNumber = function(value, bigIntOnOverflow = false) {
      return typeof value === "number" ? value : hexToNumber(toHex2(value), bigIntOnOverflow);
    };
    var BNwrapped = function(value) {
      if (typeof value == "string" && value.includes("0x")) {
        const [negative, hexValue2] = value.toLocaleLowerCase().startsWith("-") ? ["-", value.slice(3)] : ["", value.slice(2)];
        return new BN3(negative + hexValue2, 16);
      } else {
        return new BN3(value);
      }
    };
    Object.setPrototypeOf(BNwrapped, BN3);
    Object.setPrototypeOf(BNwrapped.prototype, BN3.prototype);
    module.exports = {
      BN: BNwrapped,
      isBN,
      isBigNumber,
      toBN: toBN2,
      isAddress: isAddress2,
      isBloom,
      isUserEthereumAddressInBloom,
      isContractAddressInBloom,
      isTopic,
      isTopicInBloom,
      isInBloom,
      checkAddressChecksum,
      utf8ToHex,
      hexToUtf8,
      hexToNumber,
      hexToNumberString,
      numberToHex,
      toHex: toHex2,
      hexToBytes,
      bytesToHex,
      isHex,
      isHexStrict,
      stripHexPrefix,
      leftPad,
      rightPad,
      toTwosComplement,
      sha3: sha32,
      sha3Raw,
      toNumber
    };
  }
});

// node_modules/.pnpm/web3-utils@1.10.4/node_modules/web3-utils/lib/soliditySha3.js
var require_soliditySha3 = __commonJS({
  "node_modules/.pnpm/web3-utils@1.10.4/node_modules/web3-utils/lib/soliditySha3.js"(exports, module) {
    var BN3 = require_bn();
    var utils = require_utils12();
    var _elementaryName = function(name) {
      if (name.startsWith("int[")) {
        return "int256" + name.slice(3);
      } else if (name === "int") {
        return "int256";
      } else if (name.startsWith("uint[")) {
        return "uint256" + name.slice(4);
      } else if (name === "uint") {
        return "uint256";
      } else if (name.startsWith("fixed[")) {
        return "fixed128x128" + name.slice(5);
      } else if (name === "fixed") {
        return "fixed128x128";
      } else if (name.startsWith("ufixed[")) {
        return "ufixed128x128" + name.slice(6);
      } else if (name === "ufixed") {
        return "ufixed128x128";
      }
      return name;
    };
    var _parseTypeN = function(type) {
      var typesize = /^\D+(\d+).*$/.exec(type);
      return typesize ? parseInt(typesize[1], 10) : null;
    };
    var _parseTypeNArray = function(type) {
      var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
      return arraySize ? parseInt(arraySize[1], 10) : null;
    };
    var _parseNumber = function(arg) {
      var type = typeof arg;
      if (type === "string") {
        if (utils.isHexStrict(arg)) {
          return new BN3(arg.replace(/0x/i, ""), 16);
        } else {
          return new BN3(arg, 10);
        }
      } else if (type === "number") {
        return new BN3(arg);
      } else if (utils.isBigNumber(arg)) {
        return new BN3(arg.toString(10));
      } else if (utils.isBN(arg)) {
        return arg;
      } else {
        throw new Error(arg + " is not a number");
      }
    };
    var _solidityPack = function(type, value, arraySize) {
      var size, num;
      type = _elementaryName(type);
      if (type === "bytes") {
        if (value.replace(/^0x/i, "").length % 2 !== 0) {
          throw new Error("Invalid bytes characters " + value.length);
        }
        return value;
      } else if (type === "string") {
        return utils.utf8ToHex(value);
      } else if (type === "bool") {
        return value ? "01" : "00";
      } else if (type.startsWith("address")) {
        if (arraySize) {
          size = 64;
        } else {
          size = 40;
        }
        if (!utils.isAddress(value)) {
          throw new Error(value + " is not a valid address, or the checksum is invalid.");
        }
        return utils.leftPad(value.toLowerCase(), size);
      }
      size = _parseTypeN(type);
      if (type.startsWith("bytes")) {
        if (!size) {
          throw new Error("bytes[] not yet supported in solidity");
        }
        if (arraySize) {
          size = 32;
        }
        if (size < 1 || size > 32 || size < value.replace(/^0x/i, "").length / 2) {
          throw new Error("Invalid bytes" + size + " for " + value);
        }
        return utils.rightPad(value, size * 2);
      } else if (type.startsWith("uint")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid uint" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied uint exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN3(0))) {
          throw new Error("Supplied uint " + num.toString() + " is negative");
        }
        return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
      } else if (type.startsWith("int")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid int" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied int exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN3(0))) {
          return num.toTwos(size).toString("hex");
        } else {
          return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
        }
      } else {
        throw new Error("Unsupported or invalid type: " + type);
      }
    };
    var _processSolidityEncodePackedArgs = function(arg) {
      if (Array.isArray(arg)) {
        throw new Error("Autodetection of array types is not supported.");
      }
      var type, value = "";
      var hexArg, arraySize;
      if (!!arg && typeof arg === "object" && (arg.hasOwnProperty("v") || arg.hasOwnProperty("t") || arg.hasOwnProperty("value") || arg.hasOwnProperty("type"))) {
        type = arg.hasOwnProperty("t") ? arg.t : arg.type;
        value = arg.hasOwnProperty("v") ? arg.v : arg.value;
      } else {
        type = utils.toHex(arg, true);
        value = utils.toHex(arg);
        if (!type.startsWith("int") && !type.startsWith("uint")) {
          type = "bytes";
        }
      }
      if ((type.startsWith("int") || type.startsWith("uint")) && typeof value === "string" && !/^(-)?0x/i.test(value)) {
        value = new BN3(value);
      }
      if (Array.isArray(value)) {
        arraySize = _parseTypeNArray(type);
        if (arraySize && value.length !== arraySize) {
          throw new Error(type + " is not matching the given array " + JSON.stringify(value));
        } else {
          arraySize = value.length;
        }
      }
      if (Array.isArray(value)) {
        hexArg = value.map(function(val) {
          return _solidityPack(type, val, arraySize).toString("hex").replace("0x", "");
        });
        return hexArg.join("");
      } else {
        hexArg = _solidityPack(type, value, arraySize);
        return hexArg.toString("hex").replace("0x", "");
      }
    };
    var soliditySha3 = function() {
      var args = Array.prototype.slice.call(arguments);
      var hexArgs = args.map(_processSolidityEncodePackedArgs);
      return utils.sha3("0x" + hexArgs.join(""));
    };
    var soliditySha3Raw = function() {
      return utils.sha3Raw("0x" + Array.prototype.slice.call(arguments).map(_processSolidityEncodePackedArgs).join(""));
    };
    var encodePacked = function() {
      var args = Array.prototype.slice.call(arguments);
      var hexArgs = args.map(_processSolidityEncodePackedArgs);
      return "0x" + hexArgs.join("").toLowerCase();
    };
    module.exports = {
      soliditySha3,
      soliditySha3Raw,
      encodePacked
    };
  }
});

// node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/browser.js
var require_browser2 = __commonJS({
  "node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/browser.js"(exports, module) {
    "use strict";
    var MAX_BYTES = 65536;
    var MAX_UINT32 = 4294967295;
    function oldBrowser() {
      throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
    }
    var Buffer2 = require_safe_buffer().Buffer;
    var crypto2 = global.crypto || global.msCrypto;
    if (crypto2 && crypto2.getRandomValues) {
      module.exports = randomBytes2;
    } else {
      module.exports = oldBrowser;
    }
    function randomBytes2(size, cb) {
      if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
      var bytes = Buffer2.allocUnsafe(size);
      if (size > 0) {
        if (size > MAX_BYTES) {
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            crypto2.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
          }
        } else {
          crypto2.getRandomValues(bytes);
        }
      }
      if (typeof cb === "function") {
        return process.nextTick(function() {
          cb(null, bytes);
        });
      }
      return bytes;
    }
  }
});

// node_modules/.pnpm/web3-utils@1.10.4/node_modules/web3-utils/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/.pnpm/web3-utils@1.10.4/node_modules/web3-utils/lib/index.js"(exports, module) {
    var ethjsUnit = require_lib();
    var utils = require_utils12();
    var soliditySha3 = require_soliditySha3();
    var randombytes = require_browser2();
    var BN3 = require_bn();
    var _fireError = function(error, emitter, reject, callback, optionalData) {
      if (!!error && typeof error === "object" && !(error instanceof Error) && error.data) {
        if (!!error.data && typeof error.data === "object" || Array.isArray(error.data)) {
          error.data = JSON.stringify(error.data, null, 2);
        }
        error = error.message + "\n" + error.data;
      }
      if (typeof error === "string") {
        error = new Error(error);
      }
      if (typeof callback === "function") {
        callback(error, optionalData);
      }
      if (typeof reject === "function") {
        if (emitter && (typeof emitter.listeners === "function" && emitter.listeners("error").length) || typeof callback === "function") {
          emitter.catch(function() {
          });
        }
        setTimeout(function() {
          reject(error);
        }, 1);
      }
      if (emitter && typeof emitter.emit === "function") {
        setTimeout(function() {
          emitter.emit("error", error, optionalData);
          emitter.removeAllListeners();
        }, 1);
      }
      return emitter;
    };
    var _jsonInterfaceMethodToString = function(json) {
      if (!!json && typeof json === "object" && json.name && json.name.indexOf("(") !== -1) {
        return json.name;
      }
      return json.name + "(" + _flattenTypes(false, json.inputs).join(",") + ")";
    };
    var _flattenTypes = function(includeTuple, puts) {
      var types = [];
      puts.forEach(function(param) {
        if (typeof param.components === "object") {
          if (param.type.substring(0, 5) !== "tuple") {
            throw new Error("components found but type is not tuple; report on GitHub");
          }
          var suffix = "";
          var arrayBracket = param.type.indexOf("[");
          if (arrayBracket >= 0) {
            suffix = param.type.substring(arrayBracket);
          }
          var result = _flattenTypes(includeTuple, param.components);
          if (Array.isArray(result) && includeTuple) {
            types.push("tuple(" + result.join(",") + ")" + suffix);
          } else if (!includeTuple) {
            types.push("(" + result.join(",") + ")" + suffix);
          } else {
            types.push("(" + result + ")");
          }
        } else {
          types.push(param.type);
        }
      });
      return types;
    };
    var randomHex = function(size) {
      return "0x" + randombytes(size).toString("hex");
    };
    var hexToAscii = function(hex) {
      if (!utils.isHexStrict(hex))
        throw new Error("The parameter must be a valid HEX string.");
      var str = "";
      var i = 0, l = hex.length;
      if (hex.substring(0, 2) === "0x") {
        i = 2;
      }
      for (; i < l; i += 2) {
        var code = parseInt(hex.slice(i, i + 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    };
    var asciiToHex = function(str) {
      if (!str)
        return "0x00";
      var hex = "";
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var getUnitValue = function(unit) {
      unit = unit ? unit.toLowerCase() : "ether";
      if (!ethjsUnit.unitMap[unit]) {
        throw new Error('This unit "' + unit + `" doesn't exist, please use the one of the following units` + JSON.stringify(ethjsUnit.unitMap, null, 2));
      }
      return unit;
    };
    var fromWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !(typeof number === "string")) {
        throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
    };
    var toWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !(typeof number === "string")) {
        throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
    };
    var toChecksumAddress = function(address) {
      if (typeof address === "undefined")
        return "";
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
        throw new Error('Given address "' + address + '" is not a valid Ethereum address.');
      address = address.toLowerCase().replace(/^0x/i, "");
      var addressHash = utils.sha3(address).replace(/^0x/i, "");
      var checksumAddress = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(addressHash[i], 16) > 7) {
          checksumAddress += address[i].toUpperCase();
        } else {
          checksumAddress += address[i];
        }
      }
      return checksumAddress;
    };
    var compareBlockNumbers = function(a, b) {
      if (a === b) {
        return 0;
      } else if (("genesis" === a || "earliest" === a || 0 === a) && ("genesis" === b || "earliest" === b || 0 === b)) {
        return 0;
      } else if ("genesis" === a || "earliest" === a || a === 0) {
        return -1;
      } else if ("genesis" === b || "earliest" === b || b === 0) {
        return 1;
      } else if (a === "latest" || a === "finalized") {
        if (b === "pending") {
          return -1;
        } else {
          return 1;
        }
      } else if (b === "latest" || b === "finalized") {
        if (a === "pending") {
          return 1;
        } else {
          return -1;
        }
      } else if (a === "pending") {
        return 1;
      } else if (b === "pending") {
        return -1;
      } else if (a === "safe" || b === "safe") {
        return void 0;
      } else {
        let bnA = new BN3(a);
        let bnB = new BN3(b);
        if (bnA.lt(bnB)) {
          return -1;
        } else if (bnA.eq(bnB)) {
          return 0;
        } else {
          return 1;
        }
      }
    };
    module.exports = {
      _fireError,
      _jsonInterfaceMethodToString,
      _flattenTypes,
      // extractDisplayName: extractDisplayName,
      // extractTypeName: extractTypeName,
      randomHex,
      BN: utils.BN,
      isBN: utils.isBN,
      isBigNumber: utils.isBigNumber,
      isHex: utils.isHex,
      isHexStrict: utils.isHexStrict,
      sha3: utils.sha3,
      sha3Raw: utils.sha3Raw,
      keccak256: utils.sha3,
      soliditySha3: soliditySha3.soliditySha3,
      soliditySha3Raw: soliditySha3.soliditySha3Raw,
      encodePacked: soliditySha3.encodePacked,
      isAddress: utils.isAddress,
      checkAddressChecksum: utils.checkAddressChecksum,
      toChecksumAddress,
      toHex: utils.toHex,
      toBN: utils.toBN,
      bytesToHex: utils.bytesToHex,
      hexToBytes: utils.hexToBytes,
      hexToNumberString: utils.hexToNumberString,
      hexToNumber: utils.hexToNumber,
      toDecimal: utils.hexToNumber,
      numberToHex: utils.numberToHex,
      fromDecimal: utils.numberToHex,
      hexToUtf8: utils.hexToUtf8,
      hexToString: utils.hexToUtf8,
      toUtf8: utils.hexToUtf8,
      stripHexPrefix: utils.stripHexPrefix,
      utf8ToHex: utils.utf8ToHex,
      stringToHex: utils.utf8ToHex,
      fromUtf8: utils.utf8ToHex,
      hexToAscii,
      toAscii: hexToAscii,
      asciiToHex,
      fromAscii: asciiToHex,
      unitMap: ethjsUnit.unitMap,
      toWei,
      fromWei,
      padLeft: utils.leftPad,
      leftPad: utils.leftPad,
      padRight: utils.rightPad,
      rightPad: utils.rightPad,
      toTwosComplement: utils.toTwosComplement,
      isBloom: utils.isBloom,
      isUserEthereumAddressInBloom: utils.isUserEthereumAddressInBloom,
      isContractAddressInBloom: utils.isContractAddressInBloom,
      isTopic: utils.isTopic,
      isTopicInBloom: utils.isTopicInBloom,
      isInBloom: utils.isInBloom,
      compareBlockNumbers,
      toNumber: utils.toNumber
    };
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-3770/config.js
var require_config2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-3770/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.networks = void 0;
    exports.networks = [
      { chainId: 1, shortName: "eth" },
      { chainId: 3, shortName: "rop" },
      { chainId: 4, shortName: "rin" },
      { chainId: 5, shortName: "gor" },
      { chainId: 10, shortName: "oeth" },
      { chainId: 11, shortName: "meta" },
      { chainId: 12, shortName: "kal" },
      { chainId: 18, shortName: "tst" },
      { chainId: 25, shortName: "cro" },
      { chainId: 28, shortName: "bobarinkeby" },
      { chainId: 39, shortName: "u2u" },
      { chainId: 40, shortName: "telosevm" },
      { chainId: 41, shortName: "telosevmtestnet" },
      { chainId: 42, shortName: "kov" },
      { chainId: 50, shortName: "xdc" },
      { chainId: 51, shortName: "txdc" },
      { chainId: 56, shortName: "bnb" },
      { chainId: 61, shortName: "etc" },
      { chainId: 63, shortName: "metc" },
      { chainId: 69, shortName: "okov" },
      { chainId: 82, shortName: "meter" },
      { chainId: 83, shortName: "meter-test" },
      { chainId: 97, shortName: "bnbt" },
      { chainId: 100, shortName: "gno" },
      { chainId: 106, shortName: "vlx" },
      { chainId: 108, shortName: "tt" },
      { chainId: 111, shortName: "etl" },
      { chainId: 122, shortName: "fuse" },
      { chainId: 123, shortName: "spark" },
      { chainId: 137, shortName: "matic" },
      { chainId: 155, shortName: "tenet-testnet" },
      { chainId: 246, shortName: "ewt" },
      { chainId: 250, shortName: "ftm" },
      { chainId: 280, shortName: "zksync-goerli" },
      { chainId: 288, shortName: "boba" },
      { chainId: 300, shortName: "ogn" },
      { chainId: 321, shortName: "kcs" },
      { chainId: 322, shortName: "kcst" },
      { chainId: 324, shortName: "zksync" },
      { chainId: 336, shortName: "sdn" },
      { chainId: 338, shortName: "tcro" },
      { chainId: 420, shortName: "ogor" },
      { chainId: 588, shortName: "metis-stardust" },
      { chainId: 592, shortName: "astr" },
      { chainId: 595, shortName: "maca" },
      { chainId: 599, shortName: "metis-goerli" },
      { chainId: 686, shortName: "kar" },
      { chainId: 787, shortName: "aca" },
      { chainId: 1001, shortName: "baobab" },
      { chainId: 1008, shortName: "eun" },
      { chainId: 1088, shortName: "metis-andromeda" },
      { chainId: 1101, shortName: "zkevm" },
      { chainId: 1111, shortName: "wemix" },
      { chainId: 1112, shortName: "twemix" },
      { chainId: 1115, shortName: "tcore" },
      { chainId: 1116, shortName: "core" },
      { chainId: 1284, shortName: "mbeam" },
      { chainId: 1285, shortName: "mriver" },
      { chainId: 1287, shortName: "mbase" },
      { chainId: 1294, shortName: "bobabeam" },
      { chainId: 1559, shortName: "tenet" },
      { chainId: 1807, shortName: "rana" },
      { chainId: 1984, shortName: "euntest" },
      { chainId: 2001, shortName: "milkada" },
      { chainId: 2002, shortName: "milkalgo" },
      { chainId: 2008, shortName: "cloudwalk_testnet" },
      { chainId: 2019, shortName: "pmint_test" },
      { chainId: 2020, shortName: "pmint" },
      { chainId: 2221, shortName: "tkava" },
      { chainId: 2222, shortName: "kava" },
      { chainId: 3737, shortName: "csb" },
      { chainId: 4002, shortName: "tftm" },
      { chainId: 4689, shortName: "iotex-mainnet" },
      { chainId: 4918, shortName: "txvm" },
      { chainId: 4919, shortName: "xvm" },
      { chainId: 5001, shortName: "mantle-testnet" },
      { chainId: 7341, shortName: "shyft" },
      { chainId: 7700, shortName: "canto" },
      { chainId: 8217, shortName: "cypress" },
      { chainId: 8453, shortName: "base" },
      { chainId: 9e3, shortName: "evmos-testnet" },
      { chainId: 9001, shortName: "evmos" },
      { chainId: 9728, shortName: "boba-testnet" },
      { chainId: 1e4, shortName: "smartbch" },
      { chainId: 10001, shortName: "smartbchtest" },
      { chainId: 10200, shortName: "chi" },
      { chainId: 11235, shortName: "islm" },
      { chainId: 11437, shortName: "shyftt" },
      { chainId: 12357, shortName: "rei-testnet" },
      { chainId: 23294, shortName: "sapphire" },
      { chainId: 23295, shortName: "sapphire-testnet" },
      { chainId: 42161, shortName: "arb1" },
      { chainId: 42170, shortName: "arb-nova" },
      { chainId: 42220, shortName: "celo" },
      { chainId: 43113, shortName: "fuji" },
      { chainId: 43114, shortName: "avax" },
      { chainId: 43288, shortName: "boba-avax" },
      { chainId: 44787, shortName: "alfa" },
      { chainId: 45e3, shortName: "autobahnnetwork" },
      { chainId: 47805, shortName: "rei" },
      { chainId: 54211, shortName: "islmt" },
      { chainId: 56288, shortName: "boba-bnb" },
      { chainId: 59140, shortName: "linea-testnet" },
      { chainId: 71401, shortName: "gw-testnet-v1" },
      { chainId: 71402, shortName: "gw-mainnet-v1" },
      { chainId: 73799, shortName: "vt" },
      { chainId: 80001, shortName: "maticmum" },
      { chainId: 84531, shortName: "base-gor" },
      { chainId: 200101, shortName: "milktada" },
      { chainId: 200202, shortName: "milktalgo" },
      { chainId: 333999, shortName: "olympus" },
      { chainId: 421611, shortName: "arb-rinkeby" },
      { chainId: 421613, shortName: "arb-goerli" },
      { chainId: 534353, shortName: "scr-alpha" },
      { chainId: 11155111, shortName: "sep" },
      { chainId: 245022926, shortName: "neonevm-devnet" },
      { chainId: 1313161554, shortName: "aurora" },
      { chainId: 1313161555, shortName: "aurora-testnet" },
      { chainId: 16666e5, shortName: "hmy-s0" },
      { chainId: 16667e5, shortName: "hmy-b-s0" },
      { chainId: 11297108099, shortName: "tpalm" },
      { chainId: 11297108109, shortName: "palm" }
    ];
    if (process.env.TEST_NETWORK === "hardhat") {
      exports.networks.push({ shortName: "local", chainId: 31337 });
    } else if (process.env.TEST_NETWORK === "ganache") {
      exports.networks.push({ shortName: "local", chainId: 1337 });
    }
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-3770/index.js
var require_eip_3770 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-3770/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateEip3770Address = exports.validateEthereumAddress = exports.validateEip3770NetworkPrefix = exports.isValidEip3770NetworkPrefix = exports.getEip3770NetworkPrefixFromChainId = exports.parseEip3770Address = void 0;
    var web3_utils_1 = require_lib3();
    var config_1 = require_config2();
    function parseEip3770Address(fullAddress) {
      const parts = fullAddress.split(":");
      const address = parts.length > 1 ? parts[1] : parts[0];
      const prefix = parts.length > 1 ? parts[0] : "";
      return { prefix, address };
    }
    exports.parseEip3770Address = parseEip3770Address;
    function getEip3770NetworkPrefixFromChainId(chainId) {
      const network = config_1.networks.find((network2) => chainId === network2.chainId);
      if (!network) {
        throw new Error("No network prefix supported for the current chainId");
      }
      return network.shortName;
    }
    exports.getEip3770NetworkPrefixFromChainId = getEip3770NetworkPrefixFromChainId;
    function isValidEip3770NetworkPrefix(prefix) {
      return config_1.networks.some(({ shortName }) => shortName === prefix);
    }
    exports.isValidEip3770NetworkPrefix = isValidEip3770NetworkPrefix;
    function validateEip3770NetworkPrefix(prefix, currentChainId) {
      const isCurrentNetworkPrefix = prefix === getEip3770NetworkPrefixFromChainId(currentChainId);
      if (!isValidEip3770NetworkPrefix(prefix) || !isCurrentNetworkPrefix) {
        throw new Error("The network prefix must match the current network");
      }
    }
    exports.validateEip3770NetworkPrefix = validateEip3770NetworkPrefix;
    function validateEthereumAddress(address) {
      const isValidAddress = (0, web3_utils_1.isHexStrict)(address) && (0, web3_utils_1.isAddress)(address);
      if (!isValidAddress) {
        throw new Error(`Invalid Ethereum address ${address}`);
      }
    }
    exports.validateEthereumAddress = validateEthereumAddress;
    function validateEip3770Address(fullAddress, currentChainId) {
      const { address, prefix } = parseEip3770Address(fullAddress);
      validateEthereumAddress(address);
      if (prefix) {
        validateEip3770NetworkPrefix(prefix, currentChainId);
      }
      return { address, prefix };
    }
    exports.validateEip3770Address = validateEip3770Address;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-712/index.js
var require_eip_712 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-712/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateTypedData = exports.getEip712MessageTypes = exports.EIP712_DOMAIN = exports.EIP712_DOMAIN_BEFORE_V130 = void 0;
    var satisfies_1 = __importDefault(require_satisfies());
    var EQ_OR_GT_1_3_0 = ">=1.3.0";
    exports.EIP712_DOMAIN_BEFORE_V130 = [
      {
        type: "address",
        name: "verifyingContract"
      }
    ];
    exports.EIP712_DOMAIN = [
      {
        type: "uint256",
        name: "chainId"
      },
      {
        type: "address",
        name: "verifyingContract"
      }
    ];
    function getEip712MessageTypes(safeVersion) {
      const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);
      return {
        EIP712Domain: eip712WithChainId ? exports.EIP712_DOMAIN : exports.EIP712_DOMAIN_BEFORE_V130,
        SafeTx: [
          { type: "address", name: "to" },
          { type: "uint256", name: "value" },
          { type: "bytes", name: "data" },
          { type: "uint8", name: "operation" },
          { type: "uint256", name: "safeTxGas" },
          { type: "uint256", name: "baseGas" },
          { type: "uint256", name: "gasPrice" },
          { type: "address", name: "gasToken" },
          { type: "address", name: "refundReceiver" },
          { type: "uint256", name: "nonce" }
        ]
      };
    }
    exports.getEip712MessageTypes = getEip712MessageTypes;
    function generateTypedData({ safeAddress, safeVersion, chainId, safeTransactionData }) {
      const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);
      const typedData = {
        types: getEip712MessageTypes(safeVersion),
        domain: {
          verifyingContract: safeAddress
        },
        primaryType: "SafeTx",
        message: {
          ...safeTransactionData,
          value: safeTransactionData.value,
          safeTxGas: safeTransactionData.safeTxGas,
          baseGas: safeTransactionData.baseGas,
          gasPrice: safeTransactionData.gasPrice,
          nonce: safeTransactionData.nonce
        }
      };
      if (eip712WithChainId) {
        typedData.domain.chainId = chainId;
      }
      return typedData;
    }
    exports.generateTypedData = generateTypedData;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/safeVersions.js
var require_safeVersions = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/safeVersions.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasSafeFeature = exports.SAFE_FEATURES = void 0;
    var satisfies_1 = __importDefault(require_satisfies());
    var SAFE_FEATURES;
    (function(SAFE_FEATURES2) {
      SAFE_FEATURES2["SAFE_TX_GAS_OPTIONAL"] = "SAFE_TX_GAS_OPTIONAL";
      SAFE_FEATURES2["SAFE_TX_GUARDS"] = "SAFE_TX_GUARDS";
      SAFE_FEATURES2["SAFE_FALLBACK_HANDLER"] = "SAFE_FALLBACK_HANDLER";
      SAFE_FEATURES2["ETH_SIGN"] = "ETH_SIGN";
    })(SAFE_FEATURES = exports.SAFE_FEATURES || (exports.SAFE_FEATURES = {}));
    var SAFE_FEATURES_BY_VERSION = {
      [SAFE_FEATURES.SAFE_TX_GAS_OPTIONAL]: ">=1.3.0",
      [SAFE_FEATURES.SAFE_TX_GUARDS]: ">=1.3.0",
      [SAFE_FEATURES.SAFE_FALLBACK_HANDLER]: ">=1.1.1",
      [SAFE_FEATURES.ETH_SIGN]: ">=1.1.0"
    };
    var hasSafeFeature = (feature, version25) => {
      if (!(feature in SAFE_FEATURES_BY_VERSION)) {
        return false;
      }
      return (0, satisfies_1.default)(version25, SAFE_FEATURES_BY_VERSION[feature]);
    };
    exports.hasSafeFeature = hasSafeFeature;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/index.js
var require_src6 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_eip_3770(), exports);
    __exportStar(require_eip_712(), exports);
    __exportStar(require_safeVersions(), exports);
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js
var require_constants2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENTINEL_ADDRESS = exports.EMPTY_DATA = exports.ZERO_ADDRESS = void 0;
    exports.ZERO_ADDRESS = `0x${"0".repeat(40)}`;
    exports.EMPTY_DATA = "0x";
    exports.SENTINEL_ADDRESS = "0x0000000000000000000000000000000000000001";
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js
var require_utils13 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSafeMultisigTransactionResponse = exports.isMetaTransactionArray = exports.isRestrictedAddress = exports.isZeroAddress = exports.sameString = void 0;
    var constants_1 = require_constants2();
    function sameString(str1, str2) {
      return str1.toLowerCase() === str2.toLowerCase();
    }
    exports.sameString = sameString;
    function isZeroAddress(address) {
      return sameString(address, constants_1.ZERO_ADDRESS);
    }
    exports.isZeroAddress = isZeroAddress;
    function isSentinelAddress(address) {
      return sameString(address, constants_1.SENTINEL_ADDRESS);
    }
    function isRestrictedAddress(address) {
      return isZeroAddress(address) || isSentinelAddress(address);
    }
    exports.isRestrictedAddress = isRestrictedAddress;
    function isMetaTransactionArray(safeTransactions) {
      return (safeTransactions === null || safeTransactions === void 0 ? void 0 : safeTransactions.length) !== void 0;
    }
    exports.isMetaTransactionArray = isMetaTransactionArray;
    function isSafeMultisigTransactionResponse(safeTransaction) {
      return safeTransaction.isExecuted !== void 0;
    }
    exports.isSafeMultisigTransactionResponse = isSafeMultisigTransactionResponse;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/fallbackHandlerManager.js
var require_fallbackHandlerManager = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/fallbackHandlerManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _FallbackHandlerManager_ethAdapter;
    var _FallbackHandlerManager_safeContract;
    var _FallbackHandlerManager_slot;
    Object.defineProperty(exports, "__esModule", { value: true });
    var safe_core_sdk_utils_1 = require_src6();
    var utils_12 = require_utils13();
    var constants_1 = require_constants2();
    var FallbackHandlerManager = class {
      constructor(ethAdapter, safeContract) {
        _FallbackHandlerManager_ethAdapter.set(this, void 0);
        _FallbackHandlerManager_safeContract.set(this, void 0);
        _FallbackHandlerManager_slot.set(this, "0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5");
        __classPrivateFieldSet(this, _FallbackHandlerManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _FallbackHandlerManager_safeContract, safeContract, "f");
      }
      validateFallbackHandlerAddress(fallbackHandlerAddress) {
        const isValidAddress = __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, "f").isAddress(fallbackHandlerAddress);
        if (!isValidAddress || (0, utils_12.isZeroAddress)(fallbackHandlerAddress)) {
          throw new Error("Invalid fallback handler address provided");
        }
      }
      validateFallbackHandlerIsNotEnabled(currentFallbackHandler, newFallbackHandlerAddress) {
        if ((0, utils_12.sameString)(currentFallbackHandler, newFallbackHandlerAddress)) {
          throw new Error("Fallback handler provided is already enabled");
        }
      }
      validateFallbackHandlerIsEnabled(fallbackHandlerAddress) {
        if ((0, utils_12.isZeroAddress)(fallbackHandlerAddress)) {
          throw new Error("There is no fallback handler enabled yet");
        }
      }
      async getFallbackHandler() {
        const safeVersion = await __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").getVersion();
        if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_FALLBACK_HANDLER, safeVersion)) {
          return __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, "f").getStorageAt(__classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").getAddress(), __classPrivateFieldGet(this, _FallbackHandlerManager_slot, "f"));
        } else {
          throw new Error("Current version of the Safe does not support the fallback handler functionality");
        }
      }
      async encodeEnableFallbackHandlerData(fallbackHandlerAddress) {
        this.validateFallbackHandlerAddress(fallbackHandlerAddress);
        const currentFallbackHandler = await this.getFallbackHandler();
        this.validateFallbackHandlerIsNotEnabled(currentFallbackHandler, fallbackHandlerAddress);
        return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").encode("setFallbackHandler", [fallbackHandlerAddress]);
      }
      async encodeDisableFallbackHandlerData() {
        const currentFallbackHandler = await this.getFallbackHandler();
        this.validateFallbackHandlerIsEnabled(currentFallbackHandler);
        return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").encode("setFallbackHandler", [constants_1.ZERO_ADDRESS]);
      }
    };
    _FallbackHandlerManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _FallbackHandlerManager_safeContract = /* @__PURE__ */ new WeakMap(), _FallbackHandlerManager_slot = /* @__PURE__ */ new WeakMap();
    exports.default = FallbackHandlerManager;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/guardManager.js
var require_guardManager = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/guardManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _GuardManager_ethAdapter;
    var _GuardManager_safeContract;
    var _GuardManager_slot;
    Object.defineProperty(exports, "__esModule", { value: true });
    var safe_core_sdk_utils_1 = require_src6();
    var utils_12 = require_utils13();
    var constants_1 = require_constants2();
    var GuardManager = class {
      constructor(ethAdapter, safeContract) {
        _GuardManager_ethAdapter.set(this, void 0);
        _GuardManager_safeContract.set(this, void 0);
        _GuardManager_slot.set(this, "0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8");
        __classPrivateFieldSet(this, _GuardManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _GuardManager_safeContract, safeContract, "f");
      }
      validateGuardAddress(guardAddress) {
        const isValidAddress = __classPrivateFieldGet(this, _GuardManager_ethAdapter, "f").isAddress(guardAddress);
        if (!isValidAddress || (0, utils_12.isZeroAddress)(guardAddress)) {
          throw new Error("Invalid guard address provided");
        }
      }
      validateGuardIsNotEnabled(currentGuard, newGuardAddress) {
        if ((0, utils_12.sameString)(currentGuard, newGuardAddress)) {
          throw new Error("Guard provided is already enabled");
        }
      }
      validateGuardIsEnabled(guardAddress) {
        if ((0, utils_12.isZeroAddress)(guardAddress)) {
          throw new Error("There is no guard enabled yet");
        }
      }
      async getGuard() {
        const safeVersion = await __classPrivateFieldGet(this, _GuardManager_safeContract, "f").getVersion();
        if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_TX_GUARDS, safeVersion)) {
          return __classPrivateFieldGet(this, _GuardManager_ethAdapter, "f").getStorageAt(__classPrivateFieldGet(this, _GuardManager_safeContract, "f").getAddress(), __classPrivateFieldGet(this, _GuardManager_slot, "f"));
        } else {
          throw new Error("Current version of the Safe does not support Safe transaction guards functionality");
        }
      }
      async encodeEnableGuardData(guardAddress) {
        this.validateGuardAddress(guardAddress);
        const currentGuard = await this.getGuard();
        this.validateGuardIsNotEnabled(currentGuard, guardAddress);
        return __classPrivateFieldGet(this, _GuardManager_safeContract, "f").encode("setGuard", [guardAddress]);
      }
      async encodeDisableGuardData() {
        const currentGuard = await this.getGuard();
        this.validateGuardIsEnabled(currentGuard);
        return __classPrivateFieldGet(this, _GuardManager_safeContract, "f").encode("setGuard", [constants_1.ZERO_ADDRESS]);
      }
    };
    _GuardManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _GuardManager_safeContract = /* @__PURE__ */ new WeakMap(), _GuardManager_slot = /* @__PURE__ */ new WeakMap();
    exports.default = GuardManager;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/moduleManager.js
var require_moduleManager = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/moduleManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _ModuleManager_ethAdapter;
    var _ModuleManager_safeContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_12 = require_utils13();
    var constants_1 = require_constants2();
    var ModuleManager = class {
      constructor(ethAdapter, safeContract) {
        _ModuleManager_ethAdapter.set(this, void 0);
        _ModuleManager_safeContract.set(this, void 0);
        __classPrivateFieldSet(this, _ModuleManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _ModuleManager_safeContract, safeContract, "f");
      }
      validateModuleAddress(moduleAddress) {
        const isValidAddress = __classPrivateFieldGet(this, _ModuleManager_ethAdapter, "f").isAddress(moduleAddress);
        if (!isValidAddress || (0, utils_12.isRestrictedAddress)(moduleAddress)) {
          throw new Error("Invalid module address provided");
        }
      }
      validateModuleIsNotEnabled(moduleAddress, modules) {
        const moduleIndex = modules.findIndex((module2) => (0, utils_12.sameString)(module2, moduleAddress));
        const isEnabled = moduleIndex >= 0;
        if (isEnabled) {
          throw new Error("Module provided is already enabled");
        }
      }
      validateModuleIsEnabled(moduleAddress, modules) {
        const moduleIndex = modules.findIndex((module2) => (0, utils_12.sameString)(module2, moduleAddress));
        const isEnabled = moduleIndex >= 0;
        if (!isEnabled) {
          throw new Error("Module provided is not enabled yet");
        }
        return moduleIndex;
      }
      async getModules() {
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").getModules();
      }
      async isModuleEnabled(moduleAddress) {
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").isModuleEnabled(moduleAddress);
      }
      async encodeEnableModuleData(moduleAddress) {
        this.validateModuleAddress(moduleAddress);
        const modules = await this.getModules();
        this.validateModuleIsNotEnabled(moduleAddress, modules);
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").encode("enableModule", [moduleAddress]);
      }
      async encodeDisableModuleData(moduleAddress) {
        this.validateModuleAddress(moduleAddress);
        const modules = await this.getModules();
        const moduleIndex = this.validateModuleIsEnabled(moduleAddress, modules);
        const prevModuleAddress = moduleIndex === 0 ? constants_1.SENTINEL_ADDRESS : modules[moduleIndex - 1];
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").encode("disableModule", [prevModuleAddress, moduleAddress]);
      }
    };
    _ModuleManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _ModuleManager_safeContract = /* @__PURE__ */ new WeakMap();
    exports.default = ModuleManager;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/ownerManager.js
var require_ownerManager = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/managers/ownerManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _OwnerManager_ethAdapter;
    var _OwnerManager_safeContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_12 = require_utils13();
    var constants_1 = require_constants2();
    var OwnerManager = class {
      constructor(ethAdapter, safeContract) {
        _OwnerManager_ethAdapter.set(this, void 0);
        _OwnerManager_safeContract.set(this, void 0);
        __classPrivateFieldSet(this, _OwnerManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _OwnerManager_safeContract, safeContract, "f");
      }
      validateOwnerAddress(ownerAddress, errorMessage) {
        const isValidAddress = __classPrivateFieldGet(this, _OwnerManager_ethAdapter, "f").isAddress(ownerAddress);
        if (!isValidAddress || (0, utils_12.isRestrictedAddress)(ownerAddress)) {
          throw new Error(errorMessage || "Invalid owner address provided");
        }
      }
      validateThreshold(threshold, numOwners) {
        if (threshold <= 0) {
          throw new Error("Threshold needs to be greater than 0");
        }
        if (threshold > numOwners) {
          throw new Error("Threshold cannot exceed owner count");
        }
      }
      validateAddressIsNotOwner(ownerAddress, owners, errorMessage) {
        const ownerIndex = owners.findIndex((owner) => (0, utils_12.sameString)(owner, ownerAddress));
        const isOwner = ownerIndex >= 0;
        if (isOwner) {
          throw new Error(errorMessage || "Address provided is already an owner");
        }
      }
      validateAddressIsOwner(ownerAddress, owners, errorMessage) {
        const ownerIndex = owners.findIndex((owner) => (0, utils_12.sameString)(owner, ownerAddress));
        const isOwner = ownerIndex >= 0;
        if (!isOwner) {
          throw new Error(errorMessage || "Address provided is not an owner");
        }
        return ownerIndex;
      }
      async getOwners() {
        const owners = await __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").getOwners();
        return [...owners];
      }
      async getThreshold() {
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").getThreshold();
      }
      async isOwner(ownerAddress) {
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").isOwner(ownerAddress);
      }
      async encodeAddOwnerWithThresholdData(ownerAddress, threshold) {
        this.validateOwnerAddress(ownerAddress);
        const owners = await this.getOwners();
        this.validateAddressIsNotOwner(ownerAddress, owners);
        const newThreshold = threshold !== null && threshold !== void 0 ? threshold : await this.getThreshold();
        this.validateThreshold(newThreshold, owners.length + 1);
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("addOwnerWithThreshold", [ownerAddress, newThreshold]);
      }
      async encodeRemoveOwnerData(ownerAddress, threshold) {
        this.validateOwnerAddress(ownerAddress);
        const owners = await this.getOwners();
        const ownerIndex = this.validateAddressIsOwner(ownerAddress, owners);
        const newThreshold = threshold !== null && threshold !== void 0 ? threshold : await this.getThreshold() - 1;
        this.validateThreshold(newThreshold, owners.length - 1);
        const prevOwnerAddress = ownerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[ownerIndex - 1];
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("removeOwner", [prevOwnerAddress, ownerAddress, newThreshold]);
      }
      async encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress) {
        this.validateOwnerAddress(newOwnerAddress, "Invalid new owner address provided");
        this.validateOwnerAddress(oldOwnerAddress, "Invalid old owner address provided");
        const owners = await this.getOwners();
        this.validateAddressIsNotOwner(newOwnerAddress, owners, "New address provided is already an owner");
        const oldOwnerIndex = this.validateAddressIsOwner(oldOwnerAddress, owners, "Old address provided is not an owner");
        const prevOwnerAddress = oldOwnerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[oldOwnerIndex - 1];
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("swapOwner", [
          prevOwnerAddress,
          oldOwnerAddress,
          newOwnerAddress
        ]);
      }
      async encodeChangeThresholdData(threshold) {
        const owners = await this.getOwners();
        this.validateThreshold(threshold, owners.length);
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("changeThreshold", [threshold]);
      }
    };
    _OwnerManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _OwnerManager_safeContract = /* @__PURE__ */ new WeakMap();
    exports.default = OwnerManager;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/externals.js
var require_externals = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/externals.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlp = exports.BN = void 0;
    var bn_js_1 = __importDefault(require_bn());
    exports.BN = bn_js_1.default;
    var rlp = __importStar(require_dist());
    exports.rlp = rlp;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/constants.js
var require_constants3 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
    var buffer_1 = require_buffer();
    var externals_1 = require_externals();
    exports.MAX_UINT64 = new externals_1.BN("ffffffffffffffff", 16);
    exports.MAX_INTEGER = new externals_1.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
    exports.TWO_POW256 = new externals_1.BN("10000000000000000000000000000000000000000000000000000000000000000", 16);
    exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, "hex");
    exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
    exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, "hex");
  }
});

// node_modules/.pnpm/secp256k1@4.0.4/node_modules/secp256k1/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/.pnpm/secp256k1@4.0.4/node_modules/secp256k1/lib/index.js"(exports, module) {
    var errors = {
      IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
      TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
      TWEAK_MUL: "The tweak was out of range or equal to zero",
      CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
      SECKEY_INVALID: "Private Key is invalid",
      PUBKEY_PARSE: "Public Key could not be parsed",
      PUBKEY_SERIALIZE: "Public Key serialization error",
      PUBKEY_COMBINE: "The sum of the public keys is not valid",
      SIG_PARSE: "Signature could not be parsed",
      SIGN: "The nonce generation function failed, or the private key was invalid",
      RECOVER: "Public key could not be recover",
      ECDH: "Scalar was invalid (zero or overflow)"
    };
    function assert2(cond, msg) {
      if (!cond) throw new Error(msg);
    }
    function isUint8Array(name, value, length) {
      assert2(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);
      if (length !== void 0) {
        if (Array.isArray(length)) {
          const numbers = length.join(", ");
          const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
          assert2(length.includes(value.length), msg);
        } else {
          const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
          assert2(value.length === length, msg);
        }
      }
    }
    function isCompressed(value) {
      assert2(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
    }
    function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
      if (typeof output === "function") output = output(length);
      isUint8Array("output", output, length);
      return output;
    }
    function toTypeString(value) {
      return Object.prototype.toString.call(value).slice(8, -1);
    }
    module.exports = (secp256k1) => {
      return {
        contextRandomize(seed) {
          assert2(
            seed === null || seed instanceof Uint8Array,
            "Expected seed to be an Uint8Array or null"
          );
          if (seed !== null) isUint8Array("seed", seed, 32);
          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
          }
        },
        privateKeyVerify(seckey) {
          isUint8Array("private key", seckey, 32);
          return secp256k1.privateKeyVerify(seckey) === 0;
        },
        privateKeyNegate(seckey) {
          isUint8Array("private key", seckey, 32);
          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        privateKeyTweakAdd(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        privateKeyTweakMul(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        publicKeyVerify(pubkey) {
          isUint8Array("public key", pubkey, [33, 65]);
          return secp256k1.publicKeyVerify(pubkey) === 0;
        },
        publicKeyCreate(seckey, compressed = true, output) {
          isUint8Array("private key", seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SECKEY_INVALID);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyConvert(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyNegate(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyCombine(pubkeys, compressed = true, output) {
          assert2(Array.isArray(pubkeys), "Expected public keys to be an Array");
          assert2(pubkeys.length > 0, "Expected public keys array will have more than zero items");
          for (const pubkey of pubkeys) {
            isUint8Array("public key", pubkey, [33, 65]);
          }
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_COMBINE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        signatureNormalize(sig) {
          isUint8Array("signature", sig, 64);
          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig;
            case 1:
              throw new Error(errors.SIG_PARSE);
          }
        },
        signatureExport(sig, output) {
          isUint8Array("signature", sig, 64);
          output = getAssertedOutput(output, 72);
          const obj = { output, outputlen: 72 };
          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen);
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        signatureImport(sig, output) {
          isUint8Array("signature", sig);
          output = getAssertedOutput(output, 64);
          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaSign(msg32, seckey, options = {}, output) {
          isUint8Array("message", msg32, 32);
          isUint8Array("private key", seckey, 32);
          assert2(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0) isUint8Array("options.data", options.data);
          if (options.noncefn !== void 0) assert2(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
          output = getAssertedOutput(output, 64);
          const obj = { signature: output, recid: null };
          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj;
            case 1:
              throw new Error(errors.SIGN);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaVerify(sig, msg32, pubkey) {
          isUint8Array("signature", sig, 64);
          isUint8Array("message", msg32, 32);
          isUint8Array("public key", pubkey, [33, 65]);
          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true;
            case 3:
              return false;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_PARSE);
          }
        },
        ecdsaRecover(sig, recid, msg32, compressed = true, output) {
          isUint8Array("signature", sig, 64);
          assert2(
            toTypeString(recid) === "Number" && recid >= 0 && recid <= 3,
            "Expected recovery id to be a Number within interval [0, 3]"
          );
          isUint8Array("message", msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.RECOVER);
            case 3:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdh(pubkey, seckey, options = {}, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("private key", seckey, 32);
          assert2(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0) isUint8Array("options.data", options.data);
          if (options.hashfn !== void 0) {
            assert2(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
            if (options.xbuf !== void 0) isUint8Array("options.xbuf", options.xbuf, 32);
            if (options.ybuf !== void 0) isUint8Array("options.ybuf", options.ybuf, 32);
            isUint8Array("output", output);
          } else {
            output = getAssertedOutput(output, 32);
          }
          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.ECDH);
          }
        }
      };
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/package.json
var require_package = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/package.json"(exports, module) {
    module.exports = {
      name: "elliptic",
      version: "6.6.1",
      description: "EC cryptography",
      main: "lib/elliptic.js",
      files: [
        "lib"
      ],
      scripts: {
        lint: "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        test: "npm run lint && npm run unit",
        version: "grunt dist && git add dist/"
      },
      repository: {
        type: "git",
        url: "git@github.com:indutny/elliptic"
      },
      keywords: [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      author: "Fedor Indutny <fedor@indutny.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      homepage: "https://github.com/indutny/elliptic",
      devDependencies: {
        brfs: "^2.0.2",
        coveralls: "^3.1.0",
        eslint: "^7.6.0",
        grunt: "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        istanbul: "^0.4.5",
        mocha: "^8.0.1"
      },
      dependencies: {
        "bn.js": "^4.11.9",
        brorand: "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        inherits: "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/utils.js
var require_utils14 = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/utils.js"(exports) {
    "use strict";
    var utils = exports;
    var BN3 = require_bn2();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils2();
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF2(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      var i;
      for (i = 0; i < naf.length; i += 1) {
        naf[i] = 0;
      }
      var ws = 1 << w + 1;
      var k = num.clone();
      for (i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils.getNAF = getNAF2;
    function getJSF2(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF2;
    function cachedProperty(obj, name, computer) {
      var key2 = "_" + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN3(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/base.js
var require_base = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/base.js"(exports, module) {
    "use strict";
    var BN3 = require_bn2();
    var utils = require_utils14();
    var getNAF2 = utils.getNAF;
    var getJSF2 = utils.getJSF;
    var assert2 = utils.assert;
    function BaseCurve2(type, conf) {
      this.type = type;
      this.p = new BN3(conf.p, 16);
      this.red = conf.prime ? BN3.red(conf.prime) : BN3.mont(this.p);
      this.zero = new BN3(0).toRed(this.red);
      this.one = new BN3(1).toRed(this.red);
      this.two = new BN3(2).toRed(this.red);
      this.n = conf.n && new BN3(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve2;
    BaseCurve2.prototype.point = function point3() {
      throw new Error("Not implemented");
    };
    BaseCurve2.prototype.validate = function validate5() {
      throw new Error("Not implemented");
    };
    BaseCurve2.prototype._fixedNafMul = function _fixedNafMul2(p, k) {
      assert2(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF2(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve2.prototype._wnafMul = function _wnafMul2(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF2(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);
        if (i < 0)
          break;
        var z = naf[i];
        assert2(z !== 0);
        if (p.type === "affine") {
          if (z > 0)
            acc = acc.mixedAdd(wnd[z - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0)
            acc = acc.add(wnd[z - 1 >> 1]);
          else
            acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve2.prototype._wnafMulAdd = function _wnafMulAdd2(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF2(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF2(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [
          points[a],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b]
          /* 7 */
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF2(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][z - 1 >> 1];
          else if (z < 0)
            p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === "affine")
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      for (i = 0; i < len; i++)
        wnd[i] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint2(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve2.BasePoint = BasePoint2;
    BasePoint2.prototype.eq = function eq4() {
      throw new Error("Not implemented");
    };
    BasePoint2.prototype.validate = function validate5() {
      return this.curve.validate(this);
    };
    BaseCurve2.prototype.decodePoint = function decodePoint2(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert2(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert2(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint2.prototype.encodeCompressed = function encodeCompressed2(enc) {
      return this.encode(enc, true);
    };
    BasePoint2.prototype._encode = function _encode3(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len));
    };
    BasePoint2.prototype.encode = function encode4(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint2.prototype.precompute = function precompute2(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint2.prototype._hasDoubles = function _hasDoubles2(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint2.prototype._getDoubles = function _getDoubles2(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint2.prototype._getNAFPoints = function _getNAFPoints2(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl3 = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl3);
      return {
        wnd,
        points: res
      };
    };
    BasePoint2.prototype._getBeta = function _getBeta3() {
      return null;
    };
    BasePoint2.prototype.dblp = function dblp3(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/short.js"(exports, module) {
    "use strict";
    var utils = require_utils14();
    var BN3 = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert2 = utils.assert;
    function ShortCurve2(conf) {
      Base.call(this, "short", conf);
      this.a = new BN3(conf.a, 16).toRed(this.red);
      this.b = new BN3(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve2, Base);
    module.exports = ShortCurve2;
    ShortCurve2.prototype._getEndomorphism = function _getEndomorphism2(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN3(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN3(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN3(vec.a, 16),
            b: new BN3(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve2.prototype._getEndoRoots = function _getEndoRoots2(num) {
      var red = num === this.p ? this.red : BN3.mont(num);
      var tinv = new BN3(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN3(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve2.prototype._getEndoBasis = function _getEndoBasis2(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN3(1);
      var y1 = new BN3(0);
      var x2 = new BN3(0);
      var y2 = new BN3(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve2.prototype._endoSplit = function _endoSplit2(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve2.prototype.pointFromX = function pointFromX2(x, odd) {
      x = new BN3(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve2.prototype.validate = function validate5(point3) {
      if (point3.inf)
        return true;
      var x = point3.x;
      var y = point3.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve2.prototype._endoWnafMulAdd = function _endoWnafMulAdd2(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point2(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN3(x, 16);
        this.y = new BN3(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point2, Base.BasePoint);
    ShortCurve2.prototype.point = function point3(x, y, isRed) {
      return new Point2(this, x, y, isRed);
    };
    ShortCurve2.prototype.pointFromJSON = function pointFromJSON2(obj, red) {
      return Point2.fromJSON(this, obj, red);
    };
    Point2.prototype._getBeta = function _getBeta3() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point2.prototype.toJSON = function toJSON2() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point2.fromJSON = function fromJSON2(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity3() {
      return this.inf;
    };
    Point2.prototype.add = function add3(p) {
      if (this.inf)
        return p;
      if (p.inf)
        return this;
      if (this.eq(p))
        return this.dbl();
      if (this.neg().eq(p))
        return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point2.prototype.dbl = function dbl3() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point2.prototype.getX = function getX2() {
      return this.x.fromRed();
    };
    Point2.prototype.getY = function getY2() {
      return this.y.fromRed();
    };
    Point2.prototype.mul = function mul3(k) {
      k = new BN3(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point2.prototype.mulAdd = function mulAdd2(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point2.prototype.jmulAdd = function jmulAdd2(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point2.prototype.eq = function eq4(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    Point2.prototype.neg = function neg3(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point2.prototype.toJ = function toJ2() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint2(curve, x, y, z) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN3(0);
      } else {
        this.x = new BN3(x, 16);
        this.y = new BN3(y, 16);
        this.z = new BN3(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint2, Base.BasePoint);
    ShortCurve2.prototype.jpoint = function jpoint2(x, y, z) {
      return new JPoint2(this, x, y, z);
    };
    JPoint2.prototype.toP = function toP2() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint2.prototype.neg = function neg3() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint2.prototype.add = function add3(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.mixedAdd = function mixedAdd2(p) {
      if (this.isInfinity())
        return p.toJ();
      if (p.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.dblp = function dblp3(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint2.prototype.dbl = function dbl3() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint2.prototype._zeroDbl = function _zeroDbl2() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype._threeDbl = function _threeDbl2() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype._dbl = function _dbl2() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.trpl = function trpl2() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.mul = function mul3(k, kbase) {
      k = new BN3(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint2.prototype.eq = function eq4(p) {
      if (p.type === "affine")
        return this.eq(p.toJ());
      if (this === p)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint2.prototype.eqXToP = function eqXToP2(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint2.prototype.isInfinity = function isInfinity3() {
      return this.z.cmpn(0) === 0;
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/mont.js"(exports, module) {
    "use strict";
    var BN3 = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var utils = require_utils14();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN3(conf.a, 16).toRed(this.red);
      this.b = new BN3(conf.b, 16).toRed(this.red);
      this.i4 = new BN3(4).toRed(this.red).redInvm();
      this.two = new BN3(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    MontCurve.prototype.validate = function validate5(point3) {
      var x = point3.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return y.redSqr().cmp(rhs) === 0;
    };
    function Point2(curve, x, z) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN3(x, 16);
        this.z = new BN3(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point2, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint2(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point3(x, z) {
      return new Point2(this, x, z);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON2(obj) {
      return Point2.fromJSON(this, obj);
    };
    Point2.prototype.precompute = function precompute2() {
    };
    Point2.prototype._encode = function _encode3() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point2.fromJSON = function fromJSON2(curve, obj) {
      return new Point2(curve, obj[0], obj[1] || curve.one);
    };
    Point2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity3() {
      return this.z.cmpn(0) === 0;
    };
    Point2.prototype.dbl = function dbl3() {
      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    Point2.prototype.add = function add3() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.diffAdd = function diffAdd(p, diff) {
      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point2.prototype.mul = function mul3(k) {
      var t = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          a = a.diffAdd(b, c);
          b = b.dbl();
        } else {
          b = a.diffAdd(b, c);
          a = a.dbl();
        }
      }
      return b;
    };
    Point2.prototype.mulAdd = function mulAdd2() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.eq = function eq4(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point2.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point2.prototype.getX = function getX2() {
      this.normalize();
      return this.x.fromRed();
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports, module) {
    "use strict";
    var utils = require_utils14();
    var BN3 = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert2 = utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN3(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN3(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN3(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert2(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint2(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX2(x, odd) {
      x = new BN3(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN3(y, 16);
      if (!y.red)
        y = y.toRed(this.red);
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y);
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.validate = function validate5(point3) {
      if (point3.isInfinity())
        return true;
      point3.normalize();
      var x2 = point3.x.redSqr();
      var y2 = point3.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };
    function Point2(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN3(x, 16);
        this.y = new BN3(y, 16);
        this.z = z ? new BN3(z, 16) : this.curve.one;
        this.t = t && new BN3(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point2, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON2(obj) {
      return Point2.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point3(x, y, z, t) {
      return new Point2(this, x, y, z, t);
    };
    Point2.fromJSON = function fromJSON2(curve, obj) {
      return new Point2(curve, obj[0], obj[1], obj[2]);
    };
    Point2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity3() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point2.prototype._extDbl = function _extDbl() {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point2.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        e = this.curve._mulA(c);
        var f = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          ny = f.redMul(e.redSub(d));
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          h = this.z.redSqr();
          j = f.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f.redMul(e.redSub(d));
          nz = f.redMul(j);
        }
      } else {
        e = c.redAdd(d);
        h = this.curve._mulC(this.z).redSqr();
        j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point2.prototype.dbl = function dbl3() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point2.prototype._extAdd = function _extAdd(p) {
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point2.prototype._projAdd = function _projAdd(p) {
      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point2.prototype.add = function add3(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };
    Point2.prototype.mul = function mul3(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    Point2.prototype.mulAdd = function mulAdd2(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };
    Point2.prototype.jmulAdd = function jmulAdd2(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };
    Point2.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point2.prototype.neg = function neg3() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point2.prototype.getX = function getX2() {
      this.normalize();
      return this.x.fromRed();
    };
    Point2.prototype.getY = function getY2() {
      this.normalize();
      return this.y.fromRed();
    };
    Point2.prototype.eq = function eq4(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point2.prototype.eqXToP = function eqXToP2(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point2.prototype.toP = Point2.prototype.normalize;
    Point2.prototype.mixedAdd = Point2.prototype.add;
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve2 = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curve/index.js"(exports) {
    "use strict";
    var curve = exports;
    curve.base = require_base();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k13 = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports, module) {
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curves.js
var require_curves = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/curves.js"(exports) {
    "use strict";
    var curves = exports;
    var hash3 = require_hash();
    var curve = require_curve2();
    var utils = require_utils14();
    var assert2 = utils.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve.short(options);
      else if (options.type === "edwards")
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert2(this.g.validate(), "Invalid curve");
      assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash3.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash3.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash3.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash3.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash3.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash3.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash3.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = require_secp256k13();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash3.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/ec/key.js"(exports, module) {
    "use strict";
    var BN3 = require_bn2();
    var utils = require_utils14();
    var assert2 = utils.assert;
    function KeyPair2(ec2, options) {
      this.ec = ec2;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair2;
    KeyPair2.fromPublic = function fromPublic2(ec2, pub, enc) {
      if (pub instanceof KeyPair2)
        return pub;
      return new KeyPair2(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair2.fromPrivate = function fromPrivate2(ec2, priv, enc) {
      if (priv instanceof KeyPair2)
        return priv;
      return new KeyPair2(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair2.prototype.validate = function validate5() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair2.prototype.getPublic = function getPublic2(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair2.prototype.getPrivate = function getPrivate2(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair2.prototype._importPrivate = function _importPrivate2(key2, enc) {
      this.priv = new BN3(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair2.prototype._importPublic = function _importPublic2(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert2(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert2(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair2.prototype.derive = function derive2(pub) {
      if (!pub.validate()) {
        assert2(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair2.prototype.sign = function sign3(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair2.prototype.verify = function verify3(msg, signature2, options) {
      return this.ec.verify(msg, signature2, this, void 0, options);
    };
    KeyPair2.prototype.inspect = function inspect4() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature2 = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/ec/signature.js"(exports, module) {
    "use strict";
    var BN3 = require_bn2();
    var utils = require_utils14();
    var assert2 = utils.assert;
    function Signature2(options, enc) {
      if (options instanceof Signature2)
        return options;
      if (this._importDER(options, enc))
        return;
      assert2(options.r && options.s, "Signature without r or s");
      this.r = new BN3(options.r, 16);
      this.s = new BN3(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature2;
    function Position2() {
      this.place = 0;
    }
    function getLength2(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      if (buf[p.place] === 0) {
        return false;
      }
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p.place = off;
      return val;
    }
    function rmPadding2(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }
    Signature2.prototype._importDER = function _importDER2(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position2();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len = getLength2(data, p);
      if (len === false) {
        return false;
      }
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength2(data, p);
      if (rlen === false) {
        return false;
      }
      if ((data[p.place] & 128) !== 0) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength2(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      if ((data[p.place] & 128) !== 0) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 128) {
          r = r.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN3(r);
      this.s = new BN3(s);
      this.recoveryParam = null;
      return true;
    };
    function constructLength2(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature2.prototype.toDER = function toDER2(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
      if (r[0] & 128)
        r = [0].concat(r);
      if (s[0] & 128)
        s = [0].concat(s);
      r = rmPadding2(r);
      s = rmPadding2(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength2(arr, r.length);
      arr = arr.concat(r);
      arr.push(2);
      constructLength2(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength2(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/ec/index.js"(exports, module) {
    "use strict";
    var BN3 = require_bn2();
    var HmacDRBG2 = require_hmac_drbg();
    var utils = require_utils14();
    var curves = require_curves();
    var rand2 = require_brorand();
    var assert2 = utils.assert;
    var KeyPair2 = require_key();
    var Signature2 = require_signature2();
    function EC2(options) {
      if (!(this instanceof EC2))
        return new EC2(options);
      if (typeof options === "string") {
        assert2(
          Object.prototype.hasOwnProperty.call(curves, options),
          "Unknown curve " + options
        );
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC2;
    EC2.prototype.keyPair = function keyPair2(options) {
      return new KeyPair2(this, options);
    };
    EC2.prototype.keyFromPrivate = function keyFromPrivate2(priv, enc) {
      return KeyPair2.fromPrivate(this, priv, enc);
    };
    EC2.prototype.keyFromPublic = function keyFromPublic2(pub, enc) {
      return KeyPair2.fromPublic(this, pub, enc);
    };
    EC2.prototype.genKeyPair = function genKeyPair2(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG2({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand2(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN3(2));
      for (; ; ) {
        var priv = new BN3(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC2.prototype._truncateToN = function _truncateToN2(msg, truncOnly, bitLength) {
      var byteLength;
      if (BN3.isBN(msg) || typeof msg === "number") {
        msg = new BN3(msg, 16);
        byteLength = msg.byteLength();
      } else if (typeof msg === "object") {
        byteLength = msg.length;
        msg = new BN3(msg, 16);
      } else {
        var str = msg.toString();
        byteLength = str.length + 1 >>> 1;
        msg = new BN3(str, 16);
      }
      if (typeof bitLength !== "number") {
        bitLength = byteLength * 8;
      }
      var delta = bitLength - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC2.prototype.sign = function sign3(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      if (typeof msg !== "string" && typeof msg !== "number" && !BN3.isBN(msg)) {
        assert2(
          typeof msg === "object" && msg && typeof msg.length === "number",
          "Expected message to be an array-like, a hex string, or a BN instance"
        );
        assert2(msg.length >>> 0 === msg.length);
        for (var i = 0; i < msg.length; i++) assert2((msg[i] & 255) === msg[i]);
      }
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(msg, false, options.msgBitLength);
      assert2(!msg.isNeg(), "Can not sign a negative message");
      var bytes = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      assert2(new BN3(nonce).eq(msg), "Can not sign message");
      var drbg = new HmacDRBG2({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN3(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new BN3(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;
        var s = k.invm(this.n).mul(r.mul(key2.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new Signature2({ r, s, recoveryParam });
      }
    };
    EC2.prototype.verify = function verify3(msg, signature2, key2, enc, options) {
      if (!options)
        options = {};
      msg = this._truncateToN(msg, false, options.msgBitLength);
      key2 = this.keyFromPublic(key2, enc);
      signature2 = new Signature2(signature2, "hex");
      var r = signature2.r;
      var s = signature2.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key2.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.getX().umod(this.n).cmp(r) === 0;
      }
      p = this.g.jmulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.eqXToP(r);
    };
    EC2.prototype.recoverPubKey = function(msg, signature2, j, enc) {
      assert2((3 & j) === j, "The recovery param is more than two bits");
      signature2 = new Signature2(signature2, enc);
      var n = this.n;
      var e = new BN3(msg);
      var r = signature2.r;
      var s = signature2.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature2.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r, s2);
    };
    EC2.prototype.getKeyRecoveryParam = function(e, signature2, Q, enc) {
      signature2 = new Signature2(signature2, enc);
      if (signature2.recoveryParam !== null)
        return signature2.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature2, i);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports, module) {
    "use strict";
    var utils = require_utils14();
    var assert2 = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair2(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair2.fromPublic = function fromPublic2(eddsa, pub) {
      if (pub instanceof KeyPair2)
        return pub;
      return new KeyPair2(eddsa, { pub });
    };
    KeyPair2.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair2)
        return secret;
      return new KeyPair2(eddsa, { secret });
    };
    KeyPair2.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair2, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair2, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair2, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash3 = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash3.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair2, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair2, "hash", function hash3() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair2, "messagePrefix", function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair2.prototype.sign = function sign3(message) {
      assert2(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair2.prototype.verify = function verify3(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair2.prototype.getSecret = function getSecret(enc) {
      assert2(this._secret, "KeyPair is public only");
      return utils.encode(this.secret(), enc);
    };
    KeyPair2.prototype.getPublic = function getPublic2(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module.exports = KeyPair2;
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature3 = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports, module) {
    "use strict";
    var BN3 = require_bn2();
    var utils = require_utils14();
    var assert2 = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature2(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        assert2(sig.length === eddsa.encodingLength * 2, "Signature has invalid size");
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert2(sig.R && sig.S, "Signature without R or S");
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN3)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature2, "S", function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature2, "R", function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature2, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature2, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature2.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature2.prototype.toHex = function toHex2() {
      return utils.encode(this.toBytes(), "hex").toUpperCase();
    };
    module.exports = Signature2;
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports, module) {
    "use strict";
    var hash3 = require_hash();
    var curves = require_curves();
    var utils = require_utils14();
    var assert2 = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair2 = require_key2();
    var Signature2 = require_signature3();
    function EDDSA(curve) {
      assert2(curve === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash3.sha512;
    }
    module.exports = EDDSA;
    EDDSA.prototype.sign = function sign3(message, secret) {
      message = parseBytes(message);
      var key2 = this.keyFromSecret(secret);
      var r = this.hashInt(key2.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key2.pubBytes(), message).mul(key2.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R, S, Rencoded });
    };
    EDDSA.prototype.verify = function verify3(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
        return false;
      }
      var key2 = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key2.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key2.pub().mul(h));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash4 = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash4.update(arguments[i]);
      return utils.intFromLE(hash4.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic2(pub) {
      return KeyPair2.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair2.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature2)
        return sig;
      return new Signature2(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point3) {
      var enc = point3.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point3.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint2(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }
});

// node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  "node_modules/.pnpm/elliptic@6.6.1/node_modules/elliptic/lib/elliptic.js"(exports) {
    "use strict";
    var elliptic = exports;
    elliptic.version = require_package().version;
    elliptic.utils = require_utils14();
    elliptic.rand = require_brorand();
    elliptic.curve = require_curve2();
    elliptic.curves = require_curves();
    elliptic.ec = require_ec();
    elliptic.eddsa = require_eddsa();
  }
});

// node_modules/.pnpm/secp256k1@4.0.4/node_modules/secp256k1/lib/elliptic.js
var require_elliptic2 = __commonJS({
  "node_modules/.pnpm/secp256k1@4.0.4/node_modules/secp256k1/lib/elliptic.js"(exports, module) {
    var EC2 = require_elliptic().ec;
    var ec2 = new EC2("secp256k1");
    var ecparams = ec2.curve;
    var BN3 = ecparams.n.constructor;
    function loadCompressedPublicKey(first, xbuf) {
      let x = new BN3(xbuf);
      if (x.cmp(ecparams.p) >= 0) return null;
      x = x.toRed(ecparams.red);
      let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if (first === 3 !== y.isOdd()) y = y.redNeg();
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
      return ec2.keyPair({ pub: { x, y } });
    }
    function loadUncompressedPublicKey(first, xbuf, ybuf) {
      let x = new BN3(xbuf);
      let y = new BN3(ybuf);
      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
      x = x.toRed(ecparams.red);
      y = y.toRed(ecparams.red);
      if ((first === 6 || first === 7) && y.isOdd() !== (first === 7)) return null;
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
      return ec2.keyPair({ pub: { x, y } });
    }
    function loadPublicKey(pubkey) {
      const first = pubkey[0];
      switch (first) {
        case 2:
        case 3:
          if (pubkey.length !== 33) return null;
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
        case 4:
        case 6:
        case 7:
          if (pubkey.length !== 65) return null;
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
        default:
          return null;
      }
    }
    function savePublicKey(output, point3) {
      const pubkey = point3.encode(null, output.length === 33);
      for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];
    }
    module.exports = {
      contextRandomize() {
        return 0;
      },
      privateKeyVerify(seckey) {
        const bn = new BN3(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
      },
      privateKeyNegate(seckey) {
        const bn = new BN3(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
        seckey.set(negate);
        return 0;
      },
      privateKeyTweakAdd(seckey, tweak) {
        const bn = new BN3(tweak);
        if (bn.cmp(ecparams.n) >= 0) return 1;
        bn.iadd(new BN3(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
        if (bn.isZero()) return 1;
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      privateKeyTweakMul(seckey, tweak) {
        let bn = new BN3(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        bn.imul(new BN3(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      publicKeyVerify(pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0;
      },
      publicKeyCreate(output, seckey) {
        const bn = new BN3(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        const point3 = ec2.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyConvert(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point3 = pair.getPublic();
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyNegate(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point3 = pair.getPublic();
        point3.y = point3.y.redNeg();
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyCombine(output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for (let i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i]);
          if (pairs[i] === null) return 1;
        }
        let point3 = pairs[0].getPublic();
        for (let i = 1; i < pairs.length; ++i) point3 = point3.add(pairs[i].pub);
        if (point3.isInfinity()) return 2;
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyTweakAdd(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN3(tweak);
        if (tweak.cmp(ecparams.n) >= 0) return 2;
        const point3 = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point3.isInfinity()) return 2;
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyTweakMul(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN3(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
        const point3 = pair.getPublic().mul(tweak);
        savePublicKey(output, point3);
        return 0;
      },
      signatureNormalize(sig) {
        const r = new BN3(sig.subarray(0, 32));
        const s = new BN3(sig.subarray(32, 64));
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;
        if (s.cmp(ec2.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, "be", 32), 32);
        }
        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureExport(obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN3(sigR).cmp(ecparams.n) >= 0) return 1;
        if (new BN3(sigS).cmp(ecparams.n) >= 0) return 1;
        const { output } = obj;
        let r = output.subarray(4, 4 + 33);
        r[0] = 0;
        r.set(sigR, 1);
        let lenR = 33;
        let posR = 0;
        for (; lenR > 1 && r[posR] === 0 && !(r[posR + 1] & 128); --lenR, ++posR) ;
        r = r.subarray(posR);
        if (r[0] & 128) return 1;
        if (lenR > 1 && r[0] === 0 && !(r[1] & 128)) return 1;
        let s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0;
        s.set(sigS, 1);
        let lenS = 33;
        let posS = 0;
        for (; lenS > 1 && s[posS] === 0 && !(s[posS + 1] & 128); --lenS, ++posS) ;
        s = s.subarray(posS);
        if (s[0] & 128) return 1;
        if (lenS > 1 && s[0] === 0 && !(s[1] & 128)) return 1;
        obj.outputlen = 6 + lenR + lenS;
        output[0] = 48;
        output[1] = obj.outputlen - 2;
        output[2] = 2;
        output[3] = r.length;
        output.set(r, 4);
        output[4 + lenR] = 2;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);
        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureImport(output, sig) {
        if (sig.length < 8) return 1;
        if (sig.length > 72) return 1;
        if (sig[0] !== 48) return 1;
        if (sig[1] !== sig.length - 2) return 1;
        if (sig[2] !== 2) return 1;
        const lenR = sig[3];
        if (lenR === 0) return 1;
        if (5 + lenR >= sig.length) return 1;
        if (sig[4 + lenR] !== 2) return 1;
        const lenS = sig[5 + lenR];
        if (lenS === 0) return 1;
        if (6 + lenR + lenS !== sig.length) return 1;
        if (sig[4] & 128) return 1;
        if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128)) return 1;
        if (sig[lenR + 6] & 128) return 1;
        if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128)) return 1;
        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0) sigR = sigR.subarray(1);
        if (sigR.length > 32) return 1;
        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0) sigS = sigS.slice(1);
        if (sigS.length > 32) throw new Error("S length is too long");
        let r = new BN3(sigR);
        if (r.cmp(ecparams.n) >= 0) r = new BN3(0);
        let s = new BN3(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0) s = new BN3(0);
        output.set(r.toArrayLike(Uint8Array, "be", 32), 0);
        output.set(s.toArrayLike(Uint8Array, "be", 32), 32);
        return 0;
      },
      ecdsaSign(obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn;
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter);
            const isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid) throw new Error("This is the way");
            return new BN3(nonce);
          };
        }
        const d = new BN3(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
        let sig;
        try {
          sig = ec2.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
        } catch (err) {
          return 1;
        }
        obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
        obj.recid = sig.recoveryParam;
        return 0;
      },
      ecdsaVerify(sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };
        const sigr = new BN3(sigObj.r);
        const sigs = new BN3(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigs.cmp(ec2.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 2;
        const point3 = pair.getPublic();
        const isValid = ec2.verify(msg32, sigObj, point3);
        return isValid ? 0 : 3;
      },
      ecdsaRecover(output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
        const sigr = new BN3(sigObj.r);
        const sigs = new BN3(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigr.isZero() || sigs.isZero()) return 2;
        let point3;
        try {
          point3 = ec2.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2;
        }
        savePublicKey(output, point3);
        return 0;
      },
      ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const scalar = new BN3(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
        const point3 = pair.getPublic().mul(scalar);
        if (hashfn === void 0) {
          const data2 = point3.encode(null, true);
          const sha2563 = ec2.hash().update(data2).digest();
          for (let i = 0; i < 32; ++i) output[i] = sha2563[i];
        } else {
          if (!xbuf) xbuf = new Uint8Array(32);
          const x = point3.getX().toArray("be", 32);
          for (let i = 0; i < 32; ++i) xbuf[i] = x[i];
          if (!ybuf) ybuf = new Uint8Array(32);
          const y = point3.getY().toArray("be", 32);
          for (let i = 0; i < 32; ++i) ybuf[i] = y[i];
          const hash3 = hashfn(xbuf, ybuf, data);
          const isValid = hash3 instanceof Uint8Array && hash3.length === output.length;
          if (!isValid) return 2;
          output.set(hash3);
        }
        return 0;
      }
    };
  }
});

// node_modules/.pnpm/secp256k1@4.0.4/node_modules/secp256k1/elliptic.js
var require_elliptic3 = __commonJS({
  "node_modules/.pnpm/secp256k1@4.0.4/node_modules/secp256k1/elliptic.js"(exports, module) {
    module.exports = require_lib4()(require_elliptic2());
  }
});

// node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/random.js
var require_random = __commonJS({
  "node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var randombytes = require_browser2();
    function getRandomBytes(bytes) {
      return new Promise(function(resolve, reject) {
        randombytes(bytes, function(err, resp) {
          if (err) {
            reject(err);
            return;
          }
          resolve(resp);
        });
      });
    }
    exports.getRandomBytes = getRandomBytes;
    function getRandomBytesSync(bytes) {
      return randombytes(bytes);
    }
    exports.getRandomBytesSync = getRandomBytesSync;
  }
});

// node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/secp256k1.js
var require_secp256k14 = __commonJS({
  "node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/secp256k1.js"(exports) {
    "use strict";
    var __awaiter16 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    function __export2(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    var secp256k1_1 = require_elliptic3();
    var random_1 = require_random();
    var SECP256K1_PRIVATE_KEY_SIZE = 32;
    function createPrivateKey() {
      return __awaiter16(this, void 0, void 0, function() {
        var pk;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (false) return [3, 2];
              return [4, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
            case 1:
              pk = _a.sent();
              if (secp256k1_1.privateKeyVerify(pk)) {
                return [2, pk];
              }
              return [3, 0];
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    exports.createPrivateKey = createPrivateKey;
    function createPrivateKeySync() {
      while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
          return pk;
        }
      }
    }
    exports.createPrivateKeySync = createPrivateKeySync;
    __export2(require_elliptic3());
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/internal.js
var require_internal2 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/internal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));
      }
      return str[0] === "0" && str[1] === "x";
    }
    exports.isHexPrefixed = isHexPrefixed;
    var stripHexPrefix = function(str) {
      if (typeof str !== "string")
        throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
    exports.stripHexPrefix = stripHexPrefix;
    function padToEven(value) {
      var a = value;
      if (typeof a !== "string") {
        throw new Error("[padToEven] value must be type 'string', received ".concat(typeof a));
      }
      if (a.length % 2)
        a = "0".concat(a);
      return a;
    }
    exports.padToEven = padToEven;
    function getBinarySize(str) {
      if (typeof str !== "string") {
        throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));
      }
      return Buffer.byteLength(str, "utf8");
    }
    exports.getBinarySize = getBinarySize;
    function arrayContainsArray(superset, subset, some) {
      if (Array.isArray(superset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset, "'"));
      }
      if (Array.isArray(subset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset, "'"));
      }
      return subset[some ? "some" : "every"](function(value) {
        return superset.indexOf(value) >= 0;
      });
    }
    exports.arrayContainsArray = arrayContainsArray;
    function toAscii(hex) {
      var str = "";
      var i = 0;
      var l = hex.length;
      if (hex.substring(0, 2) === "0x")
        i = 2;
      for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    }
    exports.toAscii = toAscii;
    function fromUtf8(stringValue) {
      var str = Buffer.from(stringValue, "utf8");
      return "0x".concat(padToEven(str.toString("hex")).replace(/^0+|0+$/g, ""));
    }
    exports.fromUtf8 = fromUtf8;
    function fromAscii(stringValue) {
      var hex = "";
      for (var i = 0; i < stringValue.length; i++) {
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0".concat(n) : n;
      }
      return "0x".concat(hex);
    }
    exports.fromAscii = fromAscii;
    function getKeys(params, key2, allowEmpty) {
      if (!Array.isArray(params)) {
        throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));
      }
      if (typeof key2 !== "string") {
        throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));
      }
      var result = [];
      for (var i = 0; i < params.length; i++) {
        var value = params[i][key2];
        if (allowEmpty && !value) {
          value = "";
        } else if (typeof value !== "string") {
          throw new Error("invalid abi - expected type 'string', received ".concat(typeof value));
        }
        result.push(value);
      }
      return result;
    }
    exports.getKeys = getKeys;
    function isHexString2(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
        return false;
      if (length && value.length !== 2 + 2 * length)
        return false;
      return true;
    }
    exports.isHexString = isHexString2;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/helpers.js
var require_helpers2 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;
    var internal_1 = require_internal2();
    var assertIsHexString = function(input) {
      if (!(0, internal_1.isHexString)(input)) {
        var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsHexString = assertIsHexString;
    var assertIsBuffer = function(input) {
      if (!Buffer.isBuffer(input)) {
        var msg = "This method only supports Buffer but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsBuffer = assertIsBuffer;
    var assertIsArray = function(input) {
      if (!Array.isArray(input)) {
        var msg = "This method only supports number arrays but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsArray = assertIsArray;
    var assertIsString = function(input) {
      if (typeof input !== "string") {
        var msg = "This method only supports strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsString = assertIsString;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/bytes.js
var require_bytes2 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/bytes.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal2();
    var helpers_1 = require_helpers2();
    var intToHex = function(i) {
      if (!Number.isSafeInteger(i) || i < 0) {
        throw new Error("Received an invalid integer type: ".concat(i));
      }
      return "0x".concat(i.toString(16));
    };
    exports.intToHex = intToHex;
    var intToBuffer = function(i) {
      var hex = (0, exports.intToHex)(i);
      return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), "hex");
    };
    exports.intToBuffer = intToBuffer;
    var zeros2 = function(bytes) {
      return Buffer.allocUnsafe(bytes).fill(0);
    };
    exports.zeros = zeros2;
    var setLength = function(msg, length, right) {
      var buf = (0, exports.zeros)(length);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    var setLengthLeft = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, false);
    };
    exports.setLengthLeft = setLengthLeft;
    var setLengthRight = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, true);
    };
    exports.setLengthRight = setLengthRight;
    var stripZeros2 = function(a) {
      var first = a[0];
      while (a.length > 0 && first.toString() === "0") {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    };
    var unpadBuffer = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return stripZeros2(a);
    };
    exports.unpadBuffer = unpadBuffer;
    var unpadArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return stripZeros2(a);
    };
    exports.unpadArray = unpadArray;
    var unpadHexString = function(a) {
      (0, helpers_1.assertIsHexString)(a);
      a = (0, internal_1.stripHexPrefix)(a);
      return stripZeros2(a);
    };
    exports.unpadHexString = unpadHexString;
    var toBuffer = function(v) {
      if (v === null || v === void 0) {
        return Buffer.allocUnsafe(0);
      }
      if (Buffer.isBuffer(v)) {
        return Buffer.from(v);
      }
      if (Array.isArray(v) || v instanceof Uint8Array) {
        return Buffer.from(v);
      }
      if (typeof v === "string") {
        if (!(0, internal_1.isHexString)(v)) {
          throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
        }
        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), "hex");
      }
      if (typeof v === "number") {
        return (0, exports.intToBuffer)(v);
      }
      if (externals_1.BN.isBN(v)) {
        if (v.isNeg()) {
          throw new Error("Cannot convert negative BN to buffer. Given: ".concat(v));
        }
        return v.toArrayLike(Buffer);
      }
      if (v.toArray) {
        return Buffer.from(v.toArray());
      }
      if (v.toBuffer) {
        return Buffer.from(v.toBuffer());
      }
      throw new Error("invalid type");
    };
    exports.toBuffer = toBuffer;
    var bufferToInt = function(buf) {
      return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();
    };
    exports.bufferToInt = bufferToInt;
    var bufferToHex = function(buf) {
      buf = (0, exports.toBuffer)(buf);
      return "0x" + buf.toString("hex");
    };
    exports.bufferToHex = bufferToHex;
    var fromSigned = function(num) {
      return new externals_1.BN(num).fromTwos(256);
    };
    exports.fromSigned = fromSigned;
    var toUnsigned = function(num) {
      return Buffer.from(num.toTwos(256).toArray());
    };
    exports.toUnsigned = toUnsigned;
    var addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return (0, internal_1.isHexPrefixed)(str) ? str : "0x" + str;
    };
    exports.addHexPrefix = addHexPrefix;
    var toUtf8 = function(hex) {
      var zerosRegexp = /^(00)+|(00)+$/g;
      hex = (0, internal_1.stripHexPrefix)(hex);
      if (hex.length % 2 !== 0) {
        throw new Error("Invalid non-even hex string input for toUtf8() provided");
      }
      var bufferVal = Buffer.from(hex.replace(zerosRegexp, ""), "hex");
      return bufferVal.toString("utf8");
    };
    exports.toUtf8 = toUtf8;
    var baToJSON = function(ba) {
      if (Buffer.isBuffer(ba)) {
        return "0x".concat(ba.toString("hex"));
      } else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
          array.push((0, exports.baToJSON)(ba[i]));
        }
        return array;
      }
    };
    exports.baToJSON = baToJSON;
    var validateNoLeadingZeroes = function(values) {
      var e_1, _a;
      try {
        for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
          if (v !== void 0 && v.length > 0 && v[0] === 0) {
            throw new Error("".concat(k, " cannot have leading zeroes, received: ").concat(v.toString("hex")));
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
    function arrToBufArr(arr) {
      if (!Array.isArray(arr)) {
        return Buffer.from(arr);
      }
      return arr.map(function(a) {
        return arrToBufArr(a);
      });
    }
    exports.arrToBufArr = arrToBufArr;
    function bufArrToArr(arr) {
      if (!Array.isArray(arr)) {
        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);
      }
      return arr.map(function(a) {
        return bufArrToArr(a);
      });
    }
    exports.bufArrToArr = bufArrToArr;
  }
});

// node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/hash-utils.js
var require_hash_utils = __commonJS({
  "node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/hash-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createHashFunction(hashConstructor) {
      return function(msg) {
        var hash3 = hashConstructor();
        hash3.update(msg);
        return Buffer.from(hash3.digest());
      };
    }
    exports.createHashFunction = createHashFunction;
  }
});

// node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/keccak.js
var require_keccak2 = __commonJS({
  "node_modules/.pnpm/ethereum-cryptography@0.1.3/node_modules/ethereum-cryptography/keccak.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var hash_utils_1 = require_hash_utils();
    var createKeccakHash = require_js();
    exports.keccak224 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak224");
    });
    exports.keccak256 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak256");
    });
    exports.keccak384 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak384");
    });
    exports.keccak512 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak512");
    });
  }
});

// node_modules/.pnpm/hash-base@3.1.2/node_modules/hash-base/to-buffer.js
var require_to_buffer2 = __commonJS({
  "node_modules/.pnpm/hash-base@3.1.2/node_modules/hash-base/to-buffer.js"(exports, module) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var toBuffer = require_to_buffer();
    var useUint8Array = typeof Uint8Array !== "undefined";
    var useArrayBuffer = useUint8Array && typeof ArrayBuffer !== "undefined";
    var isView = useArrayBuffer && ArrayBuffer.isView;
    module.exports = function(thing, encoding) {
      if (typeof thing === "string" || Buffer2.isBuffer(thing) || useUint8Array && thing instanceof Uint8Array || isView && isView(thing)) {
        return toBuffer(thing, encoding);
      }
      throw new TypeError('The "data" argument must be a string, a Buffer, a Uint8Array, or a DataView');
    };
  }
});

// node_modules/.pnpm/process-nextick-args@2.0.1/node_modules/process-nextick-args/index.js
var require_process_nextick_args = __commonJS({
  "node_modules/.pnpm/process-nextick-args@2.0.1/node_modules/process-nextick-args/index.js"(exports, module) {
    "use strict";
    if (typeof process === "undefined" || !process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
      module.exports = { nextTick };
    } else {
      module.exports = process;
    }
    function nextTick(fn, arg1, arg2, arg3) {
      if (typeof fn !== "function") {
        throw new TypeError('"callback" argument must be a function');
      }
      var len = arguments.length;
      var args, i;
      switch (len) {
        case 0:
        case 1:
          return process.nextTick(fn);
        case 2:
          return process.nextTick(function afterTickOne() {
            fn.call(null, arg1);
          });
        case 3:
          return process.nextTick(function afterTickTwo() {
            fn.call(null, arg1, arg2);
          });
        case 4:
          return process.nextTick(function afterTickThree() {
            fn.call(null, arg1, arg2, arg3);
          });
        default:
          args = new Array(len - 1);
          i = 0;
          while (i < args.length) {
            args[i++] = arguments[i];
          }
          return process.nextTick(function afterTick() {
            fn.apply(null, args);
          });
      }
    }
  }
});

// node_modules/.pnpm/isarray@1.0.0/node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/.pnpm/isarray@1.0.0/node_modules/isarray/index.js"(exports, module) {
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
    module.exports = require_events().EventEmitter;
  }
});

// node_modules/.pnpm/safe-buffer@5.1.2/node_modules/safe-buffer/index.js
var require_safe_buffer2 = __commonJS({
  "node_modules/.pnpm/safe-buffer@5.1.2/node_modules/safe-buffer/index.js"(exports, module) {
    var buffer = require_buffer();
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key2 in src) {
        dst[key2] = src[key2];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/.pnpm/core-util-is@1.0.3/node_modules/core-util-is/lib/util.js
var require_util4 = __commonJS({
  "node_modules/.pnpm/core-util-is@1.0.3/node_modules/core-util-is/lib/util.js"(exports) {
    function isArray(arg) {
      if (Array.isArray) {
        return Array.isArray(arg);
      }
      return objectToString(arg) === "[object Array]";
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re) {
      return objectToString(re) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d) {
      return objectToString(d) === "[object Date]";
    }
    exports.isDate = isDate;
    function isError(e) {
      return objectToString(e) === "[object Error]" || e instanceof Error;
    }
    exports.isError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require_buffer().Buffer.isBuffer;
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
  }
});

// node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/internal/streams/BufferList.js
var require_BufferList = __commonJS({
  "node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/internal/streams/BufferList.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Buffer2 = require_safe_buffer2().Buffer;
    var util = require_util();
    function copyBuffer(src, target, offset) {
      src.copy(target, offset);
    }
    module.exports = (function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      BufferList.prototype.push = function push(v) {
        var entry = { data: v, next: null };
        if (this.length > 0) this.tail.next = entry;
        else this.head = entry;
        this.tail = entry;
        ++this.length;
      };
      BufferList.prototype.unshift = function unshift(v) {
        var entry = { data: v, next: this.head };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };
      BufferList.prototype.shift = function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;
        else this.head = this.head.next;
        --this.length;
        return ret;
      };
      BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };
      BufferList.prototype.join = function join(s) {
        if (this.length === 0) return "";
        var p = this.head;
        var ret = "" + p.data;
        while (p = p.next) {
          ret += s + p.data;
        }
        return ret;
      };
      BufferList.prototype.concat = function concat2(n) {
        if (this.length === 0) return Buffer2.alloc(0);
        var ret = Buffer2.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      };
      return BufferList;
    })();
    if (util && util.inspect && util.inspect.custom) {
      module.exports.prototype[util.inspect.custom] = function() {
        var obj = util.inspect({ length: this.length });
        return this.constructor.name + " " + obj;
      };
    }
  }
});

// node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
    "use strict";
    var pna = require_process_nextick_args();
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            pna.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            pna.nextTick(emitErrorNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, _this, err2);
          }
        } else if (cb) {
          cb(err2);
        }
      });
      return this;
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    module.exports = {
      destroy,
      undestroy
    };
  }
});

// node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
    "use strict";
    var pna = require_process_nextick_args();
    module.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var asyncWrite = !process.browser && ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
    var Duplex;
    Writable.WritableState = WritableState;
    var util = Object.create(require_util4());
    util.inherits = require_inherits_browser();
    var internalUtil = {
      deprecate: require_browser()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_safe_buffer2().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    util.inherits(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      var isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
      var hwm = options.highWaterMark;
      var writableHwm = options.writableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;
      else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
      else this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
        return new Writable(options);
      }
      this._writableState = new WritableState(options, this);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      this.emit("error", new Error("Cannot pipe, not readable"));
    };
    function writeAfterEnd(stream, cb) {
      var er = new Error("write after end");
      stream.emit("error", er);
      pna.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
      if (chunk === null) {
        er = new TypeError("May not write null values to stream");
      } else if (typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      if (er) {
        stream.emit("error", er);
        pna.nextTick(cb, er);
        valid = false;
      }
      return valid;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf) encoding = "buffer";
      else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== "function") cb = nop;
      if (state.ended) writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      var state = this._writableState;
      state.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string") encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret) state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);
      else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        pna.nextTick(cb, er);
        pna.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      onwriteStateUpdate(state);
      if (er) onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state);
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          asyncWrite(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null) state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new Error("_write() is not implemented"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending) endWritable(this, state, cb);
    };
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          stream.emit("error", err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function") {
          state.pendingcb++;
          state.finalCalled = true;
          pna.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) pna.nextTick(cb);
        else stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      get: function() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      this.end();
      cb(err);
    };
  }
});

// node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
    "use strict";
    var pna = require_process_nextick_args();
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key2 in obj) {
        keys2.push(key2);
      }
      return keys2;
    };
    module.exports = Duplex;
    var util = Object.create(require_util4());
    util.inherits = require_inherits_browser();
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    util.inherits(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false) this.readable = false;
      if (options && options.writable === false) this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
      this.once("end", onend);
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function onend() {
      if (this.allowHalfOpen || this._writableState.ended) return;
      pna.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    Duplex.prototype._destroy = function(err, cb) {
      this.push(null);
      this.end();
      pna.nextTick(cb, err);
    };
  }
});

// node_modules/.pnpm/string_decoder@1.1.1/node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder2 = __commonJS({
  "node_modules/.pnpm/string_decoder@1.1.1/node_modules/string_decoder/lib/string_decoder.js"(exports) {
    "use strict";
    var Buffer2 = require_safe_buffer2().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc) return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried) return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0) return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127) return 0;
      else if (byte >> 5 === 6) return 2;
      else if (byte >> 4 === 14) return 3;
      else if (byte >> 3 === 30) return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;
          else self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "�";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "�";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "�";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r + "�";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
    "use strict";
    var pna = require_process_nextick_args();
    module.exports = Readable;
    var isArray = require_isarray();
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_safe_buffer2().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var util = Object.create(require_util4());
    util.inherits = require_inherits_browser();
    var debugUtil = require_util();
    var debug = void 0;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function() {
      };
    }
    var BufferList = require_BufferList();
    var destroyImpl = require_destroy();
    var StringDecoder;
    util.inherits(Readable, Stream);
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
      else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);
      else emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      var isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
      var hwm = options.highWaterMark;
      var readableHwm = options.readableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;
      else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
      else this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = require_string_decoder2().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable)) return new Readable(options);
      this._readableState = new ReadableState(options, this);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      this.push(null);
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) {
          stream.emit("error", er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted) stream.emit("error", new Error("stream.unshift() after end event"));
            else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            stream.emit("error", new Error("stream.push() after EOF"));
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
              else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
        }
      }
      return needMoreData(state);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit("data", chunk);
        stream.read(0);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      return er;
    }
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder) StringDecoder = require_string_decoder2().StringDecoder;
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };
    var MAX_HWM = 8388608;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
      }
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0) state.emittedReadable = false;
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0) state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0) ret = fromList(n, state);
      else ret = null;
      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }
      if (state.length === 0) {
        if (!state.ended) state.needReadable = true;
        if (nOrig !== n && state.ended) endReadable(this);
      }
      if (ret !== null) this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      emitReadable(stream);
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        if (state.sync) pna.nextTick(emitReadable_, stream);
        else emitReadable_(stream);
      }
    }
    function emitReadable_(stream) {
      debug("emit readable");
      stream.emit("readable");
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        pna.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
        else len = state.length;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      this.emit("error", new Error("_read() is not implemented"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) pna.nextTick(endFn);
      else src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }
      var increasedAwaitDrain = false;
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = { hasUnpiped: false };
      if (state.pipesCount === 0) return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) {
          dests[i].emit("unpipe", this, { hasUnpiped: false });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      if (ev === "data") {
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === "readable") {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            pna.nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        pna.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      if (!state.reading) {
        debug("resume read 0");
        stream.read(0);
      }
      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = /* @__PURE__ */ (function(method) {
            return function() {
              return stream[method].apply(stream, arguments);
            };
          })(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function() {
        return this._readableState.highWaterMark;
      }
    });
    Readable._fromList = fromList;
    function fromList(n, state) {
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.head.data;
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = fromListPartial(n, state.buffer, state.decoder);
      }
      return ret;
    }
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        ret = list.shift();
      } else {
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;
        else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;
            else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    function copyFromBuffer(n, list) {
      var ret = Buffer2.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;
            else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
      if (!state.endEmitted) {
        state.ended = true;
        pna.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
      }
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }
  }
});

// node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
    "use strict";
    module.exports = Transform;
    var Duplex = require_stream_duplex();
    var util = Object.create(require_util4());
    util.inherits = require_inherits_browser();
    util.inherits(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (!cb) {
        return this.emit("error", new Error("write callback called multiple times"));
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function") {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      throw new Error("_transform() is not implemented");
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      var _this2 = this;
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
        _this2.emit("close");
      });
    };
    function done(stream, er, data) {
      if (er) return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length) throw new Error("Calling transform done when ws.length != 0");
      if (stream._transformState.transforming) throw new Error("Calling transform done when still transforming");
      return stream.push(null);
    }
  }
});

// node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
    "use strict";
    module.exports = PassThrough;
    var Transform = require_stream_transform();
    var util = Object.create(require_util4());
    util.inherits = require_inherits_browser();
    util.inherits(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/.pnpm/readable-stream@2.3.8/node_modules/readable-stream/readable-browser.js"(exports, module) {
    exports = module.exports = require_stream_readable();
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require_stream_writable();
    exports.Duplex = require_stream_duplex();
    exports.Transform = require_stream_transform();
    exports.PassThrough = require_stream_passthrough();
  }
});

// node_modules/.pnpm/hash-base@3.1.2/node_modules/hash-base/index.js
var require_hash_base = __commonJS({
  "node_modules/.pnpm/hash-base@3.1.2/node_modules/hash-base/index.js"(exports, module) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var toBuffer = require_to_buffer2();
    var Transform = require_readable_browser().Transform;
    var inherits = require_inherits_browser();
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer2.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype.update = function(data, encoding) {
      if (this._finalized) {
        throw new Error("Digest already called");
      }
      var dataBuffer = toBuffer(data, encoding);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + dataBuffer.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; ) {
          block[i] = dataBuffer[offset];
          i += 1;
          offset += 1;
        }
        this._update();
        this._blockOffset = 0;
      }
      while (offset < dataBuffer.length) {
        block[this._blockOffset] = dataBuffer[offset];
        this._blockOffset += 1;
        offset += 1;
      }
      for (var j = 0, carry = dataBuffer.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) {
          this._length[j] -= 4294967296 * carry;
        }
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized) {
        throw new Error("Digest already called");
      }
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== void 0) {
        digest = digest.toString(encoding);
      }
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i) {
        this._length[i] = 0;
      }
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    module.exports = HashBase;
  }
});

// node_modules/.pnpm/md5.js@1.3.5/node_modules/md5.js/index.js
var require_md5 = __commonJS({
  "node_modules/.pnpm/md5.js@1.3.5/node_modules/md5.js/index.js"(exports, module) {
    "use strict";
    var inherits = require_inherits_browser();
    var HashBase = require_hash_base();
    var Buffer2 = require_safe_buffer().Buffer;
    var ARRAY16 = new Array(16);
    function MD5() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
    }
    inherits(MD5, HashBase);
    MD5.prototype._update = function() {
      var M = ARRAY16;
      for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);
      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      a = fnF(a, b, c, d, M[0], 3614090360, 7);
      d = fnF(d, a, b, c, M[1], 3905402710, 12);
      c = fnF(c, d, a, b, M[2], 606105819, 17);
      b = fnF(b, c, d, a, M[3], 3250441966, 22);
      a = fnF(a, b, c, d, M[4], 4118548399, 7);
      d = fnF(d, a, b, c, M[5], 1200080426, 12);
      c = fnF(c, d, a, b, M[6], 2821735955, 17);
      b = fnF(b, c, d, a, M[7], 4249261313, 22);
      a = fnF(a, b, c, d, M[8], 1770035416, 7);
      d = fnF(d, a, b, c, M[9], 2336552879, 12);
      c = fnF(c, d, a, b, M[10], 4294925233, 17);
      b = fnF(b, c, d, a, M[11], 2304563134, 22);
      a = fnF(a, b, c, d, M[12], 1804603682, 7);
      d = fnF(d, a, b, c, M[13], 4254626195, 12);
      c = fnF(c, d, a, b, M[14], 2792965006, 17);
      b = fnF(b, c, d, a, M[15], 1236535329, 22);
      a = fnG(a, b, c, d, M[1], 4129170786, 5);
      d = fnG(d, a, b, c, M[6], 3225465664, 9);
      c = fnG(c, d, a, b, M[11], 643717713, 14);
      b = fnG(b, c, d, a, M[0], 3921069994, 20);
      a = fnG(a, b, c, d, M[5], 3593408605, 5);
      d = fnG(d, a, b, c, M[10], 38016083, 9);
      c = fnG(c, d, a, b, M[15], 3634488961, 14);
      b = fnG(b, c, d, a, M[4], 3889429448, 20);
      a = fnG(a, b, c, d, M[9], 568446438, 5);
      d = fnG(d, a, b, c, M[14], 3275163606, 9);
      c = fnG(c, d, a, b, M[3], 4107603335, 14);
      b = fnG(b, c, d, a, M[8], 1163531501, 20);
      a = fnG(a, b, c, d, M[13], 2850285829, 5);
      d = fnG(d, a, b, c, M[2], 4243563512, 9);
      c = fnG(c, d, a, b, M[7], 1735328473, 14);
      b = fnG(b, c, d, a, M[12], 2368359562, 20);
      a = fnH(a, b, c, d, M[5], 4294588738, 4);
      d = fnH(d, a, b, c, M[8], 2272392833, 11);
      c = fnH(c, d, a, b, M[11], 1839030562, 16);
      b = fnH(b, c, d, a, M[14], 4259657740, 23);
      a = fnH(a, b, c, d, M[1], 2763975236, 4);
      d = fnH(d, a, b, c, M[4], 1272893353, 11);
      c = fnH(c, d, a, b, M[7], 4139469664, 16);
      b = fnH(b, c, d, a, M[10], 3200236656, 23);
      a = fnH(a, b, c, d, M[13], 681279174, 4);
      d = fnH(d, a, b, c, M[0], 3936430074, 11);
      c = fnH(c, d, a, b, M[3], 3572445317, 16);
      b = fnH(b, c, d, a, M[6], 76029189, 23);
      a = fnH(a, b, c, d, M[9], 3654602809, 4);
      d = fnH(d, a, b, c, M[12], 3873151461, 11);
      c = fnH(c, d, a, b, M[15], 530742520, 16);
      b = fnH(b, c, d, a, M[2], 3299628645, 23);
      a = fnI(a, b, c, d, M[0], 4096336452, 6);
      d = fnI(d, a, b, c, M[7], 1126891415, 10);
      c = fnI(c, d, a, b, M[14], 2878612391, 15);
      b = fnI(b, c, d, a, M[5], 4237533241, 21);
      a = fnI(a, b, c, d, M[12], 1700485571, 6);
      d = fnI(d, a, b, c, M[3], 2399980690, 10);
      c = fnI(c, d, a, b, M[10], 4293915773, 15);
      b = fnI(b, c, d, a, M[1], 2240044497, 21);
      a = fnI(a, b, c, d, M[8], 1873313359, 6);
      d = fnI(d, a, b, c, M[15], 4264355552, 10);
      c = fnI(c, d, a, b, M[6], 2734768916, 15);
      b = fnI(b, c, d, a, M[13], 1309151649, 21);
      a = fnI(a, b, c, d, M[4], 4149444226, 6);
      d = fnI(d, a, b, c, M[11], 3174756917, 10);
      c = fnI(c, d, a, b, M[2], 718787259, 15);
      b = fnI(b, c, d, a, M[9], 3951481745, 21);
      this._a = this._a + a | 0;
      this._b = this._b + b | 0;
      this._c = this._c + c | 0;
      this._d = this._d + d | 0;
    };
    MD5.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer2.allocUnsafe(16);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fnF(a, b, c, d, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
    }
    function fnG(a, b, c, d, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
    }
    function fnH(a, b, c, d, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
    }
    function fnI(a, b, c, d, m, k, s) {
      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
    }
    module.exports = MD5;
  }
});

// node_modules/.pnpm/ripemd160@2.0.3/node_modules/ripemd160/index.js
var require_ripemd160 = __commonJS({
  "node_modules/.pnpm/ripemd160@2.0.3/node_modules/ripemd160/index.js"(exports, module) {
    "use strict";
    var Buffer2 = require_buffer().Buffer;
    var inherits = require_inherits_browser();
    var HashBase = require_hash_base();
    var ARRAY16 = new Array(16);
    var zl = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var zr = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var sl = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sr = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
    var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
    var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fn1(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
    }
    function fn2(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
    }
    function fn3(a, b, c, d, e, m, k, s) {
      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
    }
    function fn4(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
    }
    function fn5(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
    }
    function RIPEMD160() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function() {
      var words2 = ARRAY16;
      for (var j = 0; j < 16; ++j) {
        words2[j] = this._block.readInt32LE(j * 4);
      }
      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0;
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words2[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words2[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words2[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words2[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words2[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words2[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words2[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words2[zr[i]], hr[3], sr[i]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words2[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words2[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      }
      var t = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t;
    };
    RIPEMD160.prototype._digest = function() {
      this._block[this._blockOffset] = 128;
      this._blockOffset += 1;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer;
    };
    module.exports = RIPEMD160;
  }
});

// browser-external:stream
var require_stream = __commonJS({
  "browser-external:stream"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key2) {
        if (key2 !== "__esModule" && key2 !== "__proto__" && key2 !== "constructor" && key2 !== "splice") {
          console.warn(`Module "stream" has been externalized for browser compatibility. Cannot access "stream.${key2}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/.pnpm/cipher-base@1.0.7/node_modules/cipher-base/index.js
var require_cipher_base = __commonJS({
  "node_modules/.pnpm/cipher-base@1.0.7/node_modules/cipher-base/index.js"(exports, module) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_stream().Transform;
    var StringDecoder = require_string_decoder().StringDecoder;
    var inherits = require_inherits_browser();
    var toBuffer = require_to_buffer();
    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === "string";
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this["final"] = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits(CipherBase, Transform);
    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
      var bufferData = toBuffer(data, inputEnc);
      var outData = this._update(bufferData);
      if (this.hashMode) {
        return this;
      }
      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }
      return outData;
    };
    CipherBase.prototype.setAutoPadding = function() {
    };
    CipherBase.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    CipherBase.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    CipherBase.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    CipherBase.prototype._transform = function(data, _, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function(done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }
      done(err);
    };
    CipherBase.prototype._finalOrDigest = function(outputEnc) {
      var outData = this.__final() || Buffer2.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData;
    };
    CipherBase.prototype._toString = function(value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc) {
        throw new Error("can’t switch encodings");
      }
      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }
      return out;
    };
    module.exports = CipherBase;
  }
});

// node_modules/.pnpm/create-hash@1.2.0/node_modules/create-hash/browser.js
var require_browser3 = __commonJS({
  "node_modules/.pnpm/create-hash@1.2.0/node_modules/create-hash/browser.js"(exports, module) {
    "use strict";
    var inherits = require_inherits_browser();
    var MD5 = require_md5();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha();
    var Base = require_cipher_base();
    function Hash(hash3) {
      Base.call(this, "digest");
      this._hash = hash3;
    }
    inherits(Hash, Base);
    Hash.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hash.prototype._final = function() {
      return this._hash.digest();
    };
    module.exports = function createHash(alg) {
      alg = alg.toLowerCase();
      if (alg === "md5") return new MD5();
      if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD160();
      return new Hash(sha(alg));
    };
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/hash.js
var require_hash2 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/hash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
    var keccak_1 = require_keccak2();
    var createHash = require_browser3();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes2();
    var helpers_1 = require_helpers2();
    var keccak = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsBuffer)(a);
      switch (bits) {
        case 224: {
          return (0, keccak_1.keccak224)(a);
        }
        case 256: {
          return (0, keccak_1.keccak256)(a);
        }
        case 384: {
          return (0, keccak_1.keccak384)(a);
        }
        case 512: {
          return (0, keccak_1.keccak512)(a);
        }
        default: {
          throw new Error("Invald algorithm: keccak".concat(bits));
        }
      }
    };
    exports.keccak = keccak;
    var keccak2563 = function(a) {
      return (0, exports.keccak)(a);
    };
    exports.keccak256 = keccak2563;
    var keccakFromString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsString)(a);
      var buf = Buffer.from(a, "utf8");
      return (0, exports.keccak)(buf, bits);
    };
    exports.keccakFromString = keccakFromString;
    var keccakFromHexString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsHexString)(a);
      return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports.keccakFromHexString = keccakFromHexString;
    var keccakFromArray = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsArray)(a);
      return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports.keccakFromArray = keccakFromArray;
    var _sha256 = function(a) {
      a = (0, bytes_1.toBuffer)(a);
      return createHash("sha256").update(a).digest();
    };
    var sha2563 = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return _sha256(a);
    };
    exports.sha256 = sha2563;
    var sha256FromString = function(a) {
      (0, helpers_1.assertIsString)(a);
      return _sha256(a);
    };
    exports.sha256FromString = sha256FromString;
    var sha256FromArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return _sha256(a);
    };
    exports.sha256FromArray = sha256FromArray;
    var _ripemd160 = function(a, padded) {
      a = (0, bytes_1.toBuffer)(a);
      var hash3 = createHash("rmd160").update(a).digest();
      if (padded === true) {
        return (0, bytes_1.setLengthLeft)(hash3, 32);
      } else {
        return hash3;
      }
    };
    var ripemd1602 = function(a, padded) {
      (0, helpers_1.assertIsBuffer)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160 = ripemd1602;
    var ripemd160FromString = function(a, padded) {
      (0, helpers_1.assertIsString)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160FromString = ripemd160FromString;
    var ripemd160FromArray = function(a, padded) {
      (0, helpers_1.assertIsArray)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160FromArray = ripemd160FromArray;
    var rlphash = function(a) {
      return (0, exports.keccak)(externals_1.rlp.encode(a));
    };
    exports.rlphash = rlphash;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/types.js
var require_types4 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal2();
    var bytes_1 = require_bytes2();
    function bnToHex(value) {
      return "0x".concat(value.toString(16));
    }
    exports.bnToHex = bnToHex;
    function bnToUnpaddedBuffer(value) {
      return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer));
    }
    exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
    function bnToRlp(value) {
      return bnToUnpaddedBuffer(value);
    }
    exports.bnToRlp = bnToRlp;
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BN"] = 1] = "BN";
      TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
    function toType(input, outputType) {
      if (input === null) {
        return null;
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input === "string" && !(0, internal_1.isHexString)(input)) {
        throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      var output = (0, bytes_1.toBuffer)(input);
      if (outputType === TypeOutput.Buffer) {
        return output;
      } else if (outputType === TypeOutput.BN) {
        return new externals_1.BN(output);
      } else if (outputType === TypeOutput.Number) {
        var bn = new externals_1.BN(output);
        var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());
        if (bn.gt(max)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
        }
        return bn.toNumber();
      } else {
        return "0x".concat(output.toString("hex"));
      }
    }
    exports.toType = toType;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/account.js
var require_account2 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/account.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var secp256k1_1 = require_secp256k14();
    var internal_1 = require_internal2();
    var constants_1 = require_constants3();
    var bytes_1 = require_bytes2();
    var hash_1 = require_hash2();
    var helpers_1 = require_helpers2();
    var types_1 = require_types4();
    var Account = (
      /** @class */
      (function() {
        function Account2(nonce, balance, stateRoot, codeHash) {
          if (nonce === void 0) {
            nonce = new externals_1.BN(0);
          }
          if (balance === void 0) {
            balance = new externals_1.BN(0);
          }
          if (stateRoot === void 0) {
            stateRoot = constants_1.KECCAK256_RLP;
          }
          if (codeHash === void 0) {
            codeHash = constants_1.KECCAK256_NULL;
          }
          this.nonce = nonce;
          this.balance = balance;
          this.stateRoot = stateRoot;
          this.codeHash = codeHash;
          this._validate();
        }
        Account2.fromAccountData = function(accountData) {
          var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
          return new Account2(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : void 0, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : void 0, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : void 0, codeHash ? (0, bytes_1.toBuffer)(codeHash) : void 0);
        };
        Account2.fromRlpSerializedAccount = function(serialized) {
          var values = externals_1.rlp.decode(serialized);
          if (!Array.isArray(values)) {
            throw new Error("Invalid serialized account input. Must be array");
          }
          return this.fromValuesArray(values);
        };
        Account2.fromValuesArray = function(values) {
          var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];
          return new Account2(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);
        };
        Account2.prototype._validate = function() {
          if (this.nonce.lt(new externals_1.BN(0))) {
            throw new Error("nonce must be greater than zero");
          }
          if (this.balance.lt(new externals_1.BN(0))) {
            throw new Error("balance must be greater than zero");
          }
          if (this.stateRoot.length !== 32) {
            throw new Error("stateRoot must have a length of 32");
          }
          if (this.codeHash.length !== 32) {
            throw new Error("codeHash must have a length of 32");
          }
        };
        Account2.prototype.raw = function() {
          return [
            (0, types_1.bnToUnpaddedBuffer)(this.nonce),
            (0, types_1.bnToUnpaddedBuffer)(this.balance),
            this.stateRoot,
            this.codeHash
          ];
        };
        Account2.prototype.serialize = function() {
          return externals_1.rlp.encode(this.raw());
        };
        Account2.prototype.isContract = function() {
          return !this.codeHash.equals(constants_1.KECCAK256_NULL);
        };
        Account2.prototype.isEmpty = function() {
          return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
        };
        return Account2;
      })()
    );
    exports.Account = Account;
    var isValidAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    };
    exports.isValidAddress = isValidAddress;
    var toChecksumAddress = function(hexAddress, eip1191ChainId) {
      (0, helpers_1.assertIsHexString)(hexAddress);
      var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
      var prefix = "";
      if (eip1191ChainId) {
        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
        prefix = chainId.toString() + "0x";
      }
      var hash3 = (0, hash_1.keccakFromString)(prefix + address).toString("hex");
      var ret = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(hash3[i], 16) >= 8) {
          ret += address[i].toUpperCase();
        } else {
          ret += address[i];
        }
      }
      return ret;
    };
    exports.toChecksumAddress = toChecksumAddress;
    var isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
      return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
    };
    exports.isValidChecksumAddress = isValidChecksumAddress;
    var generateAddress = function(from, nonce) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(nonce);
      var nonceBN = new externals_1.BN(nonce);
      if (nonceBN.isZero()) {
        return (0, hash_1.rlphash)([from, null]).slice(-20);
      }
      return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);
    };
    exports.generateAddress = generateAddress;
    var generateAddress2 = function(from, salt, initCode) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(salt);
      (0, helpers_1.assertIsBuffer)(initCode);
      (0, assert_1.default)(from.length === 20);
      (0, assert_1.default)(salt.length === 32);
      var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from("ff", "hex"), from, salt, (0, hash_1.keccak256)(initCode)]));
      return address.slice(-20);
    };
    exports.generateAddress2 = generateAddress2;
    var isValidPrivate = function(privateKey) {
      return (0, secp256k1_1.privateKeyVerify)(privateKey);
    };
    exports.isValidPrivate = isValidPrivate;
    var isValidPublic = function(publicKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length === 64) {
        return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));
      }
      if (!sanitize) {
        return false;
      }
      return (0, secp256k1_1.publicKeyVerify)(publicKey);
    };
    exports.isValidPublic = isValidPublic;
    var pubToAddress = function(pubKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
      }
      (0, assert_1.default)(pubKey.length === 64);
      return (0, hash_1.keccak)(pubKey).slice(-20);
    };
    exports.pubToAddress = pubToAddress;
    exports.publicToAddress = exports.pubToAddress;
    var privateToPublic = function(privateKey) {
      (0, helpers_1.assertIsBuffer)(privateKey);
      return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
    };
    exports.privateToPublic = privateToPublic;
    var privateToAddress = function(privateKey) {
      return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
    };
    exports.privateToAddress = privateToAddress;
    var importPublic = function(publicKey) {
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length !== 64) {
        publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
      }
      return publicKey;
    };
    exports.importPublic = importPublic;
    var zeroAddress = function() {
      var addressLength = 20;
      var addr = (0, bytes_1.zeros)(addressLength);
      return (0, bytes_1.bufferToHex)(addr);
    };
    exports.zeroAddress = zeroAddress;
    var isZeroAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      var zeroAddr = (0, exports.zeroAddress)();
      return zeroAddr === hexAddress;
    };
    exports.isZeroAddress = isZeroAddress;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/address.js
var require_address2 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/address.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Address = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var bytes_1 = require_bytes2();
    var account_1 = require_account2();
    var Address = (
      /** @class */
      (function() {
        function Address2(buf) {
          (0, assert_1.default)(buf.length === 20, "Invalid address length");
          this.buf = buf;
        }
        Address2.zero = function() {
          return new Address2((0, bytes_1.zeros)(20));
        };
        Address2.fromString = function(str) {
          (0, assert_1.default)((0, account_1.isValidAddress)(str), "Invalid address");
          return new Address2((0, bytes_1.toBuffer)(str));
        };
        Address2.fromPublicKey = function(pubKey) {
          (0, assert_1.default)(Buffer.isBuffer(pubKey), "Public key should be Buffer");
          var buf = (0, account_1.pubToAddress)(pubKey);
          return new Address2(buf);
        };
        Address2.fromPrivateKey = function(privateKey) {
          (0, assert_1.default)(Buffer.isBuffer(privateKey), "Private key should be Buffer");
          var buf = (0, account_1.privateToAddress)(privateKey);
          return new Address2(buf);
        };
        Address2.generate = function(from, nonce) {
          (0, assert_1.default)(externals_1.BN.isBN(nonce));
          return new Address2((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer)));
        };
        Address2.generate2 = function(from, salt, initCode) {
          (0, assert_1.default)(Buffer.isBuffer(salt));
          (0, assert_1.default)(Buffer.isBuffer(initCode));
          return new Address2((0, account_1.generateAddress2)(from.buf, salt, initCode));
        };
        Address2.prototype.equals = function(address) {
          return this.buf.equals(address.buf);
        };
        Address2.prototype.isZero = function() {
          return this.equals(Address2.zero());
        };
        Address2.prototype.isPrecompileOrSystemAddress = function() {
          var addressBN = new externals_1.BN(this.buf);
          var rangeMin = new externals_1.BN(0);
          var rangeMax = new externals_1.BN("ffff", "hex");
          return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
        };
        Address2.prototype.toString = function() {
          return "0x" + this.buf.toString("hex");
        };
        Address2.prototype.toBuffer = function() {
          return Buffer.from(this.buf);
        };
        return Address2;
      })()
    );
    exports.Address = Address;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/signature.js
var require_signature4 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
    var secp256k1_1 = require_secp256k14();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes2();
    var hash_1 = require_hash2();
    var helpers_1 = require_helpers2();
    var types_1 = require_types4();
    function ecsign(msgHash, privateKey, chainId) {
      var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature2 = _a.signature, recovery = _a.recid;
      var r = Buffer.from(signature2.slice(0, 32));
      var s = Buffer.from(signature2.slice(32, 64));
      if (!chainId || typeof chainId === "number") {
        if (chainId && !Number.isSafeInteger(chainId)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
        }
        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
        return { r, s, v: v_1 };
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);
      return { r, s, v };
    }
    exports.ecsign = ecsign;
    function calculateSigRecovery(v, chainId) {
      var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (vBN.eqn(0) || vBN.eqn(1))
        return (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (!chainId) {
        return vBN.subn(27);
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      return vBN.sub(chainIdBN.muln(2).addn(35));
    }
    function isValidSigRecovery(recovery) {
      var rec = new externals_1.BN(recovery);
      return rec.eqn(0) || rec.eqn(1);
    }
    var ecrecover = function(msgHash, v, r, s, chainId) {
      var signature2 = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature2, recovery.toNumber(), msgHash);
      return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
    };
    exports.ecrecover = ecrecover;
    var toRpcSig = function(v, r, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
    };
    exports.toRpcSig = toRpcSig;
    var toCompactSig = function(v, r, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
      var ss = s;
      if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {
        ss = Buffer.from(s);
        ss[0] |= 128;
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
    };
    exports.toCompactSig = toCompactSig;
    var fromRpcSig = function(sig) {
      var buf = (0, bytes_1.toBuffer)(sig);
      var r;
      var s;
      var v;
      if (buf.length >= 65) {
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(64));
      } else if (buf.length === 64) {
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;
        s[0] &= 127;
      } else {
        throw new Error("Invalid signature length");
      }
      if (v < 27) {
        v += 27;
      }
      return {
        v,
        r,
        s
      };
    };
    exports.fromRpcSig = fromRpcSig;
    var isValidSignature = function(v, r, s, homesteadOrLater, chainId) {
      if (homesteadOrLater === void 0) {
        homesteadOrLater = true;
      }
      var SECP256K1_N_DIV_2 = new externals_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
      var SECP256K1_N = new externals_1.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
      if (r.length !== 32 || s.length !== 32) {
        return false;
      }
      if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
      }
      var rBN = new externals_1.BN(r);
      var sBN = new externals_1.BN(s);
      if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
      }
      if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
      }
      return true;
    };
    exports.isValidSignature = isValidSignature;
    var hashPersonalMessage = function(message) {
      (0, helpers_1.assertIsBuffer)(message);
      var prefix = Buffer.from("Ethereum Signed Message:\n".concat(message.length), "utf-8");
      return (0, hash_1.keccak)(Buffer.concat([prefix, message]));
    };
    exports.hashPersonalMessage = hashPersonalMessage;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/object.js
var require_object = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/object.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defineProperties = void 0;
    var assert_1 = __importDefault(require_assert());
    var internal_1 = require_internal2();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes2();
    var defineProperties = function(self2, fields, data) {
      self2.raw = [];
      self2._fields = [];
      self2.toJSON = function(label) {
        if (label === void 0) {
          label = false;
        }
        if (label) {
          var obj_1 = {};
          self2._fields.forEach(function(field) {
            obj_1[field] = "0x".concat(self2[field].toString("hex"));
          });
          return obj_1;
        }
        return (0, bytes_1.baToJSON)(self2.raw);
      };
      self2.serialize = function serialize3() {
        return externals_1.rlp.encode(self2.raw);
      };
      fields.forEach(function(field, i) {
        self2._fields.push(field.name);
        function getter() {
          return self2.raw[i];
        }
        function setter(v) {
          v = (0, bytes_1.toBuffer)(v);
          if (v.toString("hex") === "00" && !field.allowZero) {
            v = Buffer.allocUnsafe(0);
          }
          if (field.allowLess && field.length) {
            v = (0, bytes_1.unpadBuffer)(v);
            (0, assert_1.default)(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
          } else if (!(field.allowZero && v.length === 0) && field.length) {
            (0, assert_1.default)(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
          }
          self2.raw[i] = v;
        }
        Object.defineProperty(self2, field.name, {
          enumerable: true,
          configurable: true,
          get: getter,
          set: setter
        });
        if (field.default) {
          self2[field.name] = field.default;
        }
        if (field.alias) {
          Object.defineProperty(self2, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
          });
        }
      });
      if (data) {
        if (typeof data === "string") {
          data = Buffer.from((0, internal_1.stripHexPrefix)(data), "hex");
        }
        if (Buffer.isBuffer(data)) {
          data = externals_1.rlp.decode(data);
        }
        if (Array.isArray(data)) {
          if (data.length > self2._fields.length) {
            throw new Error("wrong number of fields in data");
          }
          data.forEach(function(d, i) {
            self2[self2._fields[i]] = (0, bytes_1.toBuffer)(d);
          });
        } else if (typeof data === "object") {
          var keys_1 = Object.keys(data);
          fields.forEach(function(field) {
            if (keys_1.indexOf(field.name) !== -1)
              self2[field.name] = data[field.name];
            if (keys_1.indexOf(field.alias) !== -1)
              self2[field.alias] = data[field.alias];
          });
        } else {
          throw new Error("invalid data");
        }
      }
    };
    exports.defineProperties = defineProperties;
  }
});

// node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/index.js
var require_dist6 = __commonJS({
  "node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist.browser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    __exportStar(require_constants3(), exports);
    __exportStar(require_account2(), exports);
    __exportStar(require_address2(), exports);
    __exportStar(require_hash2(), exports);
    __exportStar(require_signature4(), exports);
    __exportStar(require_bytes2(), exports);
    __exportStar(require_object(), exports);
    __exportStar(require_externals(), exports);
    __exportStar(require_types4(), exports);
    var internal_1 = require_internal2();
    Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function() {
      return internal_1.isHexPrefixed;
    } });
    Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function() {
      return internal_1.stripHexPrefix;
    } });
    Object.defineProperty(exports, "padToEven", { enumerable: true, get: function() {
      return internal_1.padToEven;
    } });
    Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function() {
      return internal_1.getBinarySize;
    } });
    Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function() {
      return internal_1.arrayContainsArray;
    } });
    Object.defineProperty(exports, "toAscii", { enumerable: true, get: function() {
      return internal_1.toAscii;
    } });
    Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function() {
      return internal_1.fromUtf8;
    } });
    Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function() {
      return internal_1.fromAscii;
    } });
    Object.defineProperty(exports, "getKeys", { enumerable: true, get: function() {
      return internal_1.getKeys;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return internal_1.isHexString;
    } });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/SafeSignature.js
var require_SafeSignature = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/SafeSignature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EthSignSignature = class {
      /**
       * Creates an instance of a Safe signature.
       *
       * @param signer - Ethers signer
       * @param signature - The Safe signature
       * @returns The Safe signature instance
       */
      constructor(signer, signature2) {
        this.signer = signer;
        this.data = signature2;
      }
      /**
       * Returns the static part of the Safe signature.
       *
       * @returns The static part of the Safe signature
       */
      staticPart() {
        return this.data;
      }
      /**
       * Returns the dynamic part of the Safe signature.
       *
       * @returns The dynamic part of the Safe signature
       */
      dynamicPart() {
        return "";
      }
    };
    exports.default = EthSignSignature;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/index.js
var require_signatures = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateEIP712Signature = exports.generateSignature = exports.adjustVInSignature = exports.isTxHashSignedWithPrefix = exports.generatePreValidatedSignature = void 0;
    var ethereumjs_util_1 = require_dist6();
    var utils_12 = require_utils13();
    var SafeSignature_1 = __importDefault(require_SafeSignature());
    function generatePreValidatedSignature(ownerAddress) {
      const signature2 = "0x000000000000000000000000" + ownerAddress.slice(2) + "000000000000000000000000000000000000000000000000000000000000000001";
      return new SafeSignature_1.default(ownerAddress, signature2);
    }
    exports.generatePreValidatedSignature = generatePreValidatedSignature;
    function isTxHashSignedWithPrefix(txHash, signature2, ownerAddress) {
      let hasPrefix;
      try {
        const rsvSig = {
          r: Buffer.from(signature2.slice(2, 66), "hex"),
          s: Buffer.from(signature2.slice(66, 130), "hex"),
          v: parseInt(signature2.slice(130, 132), 16)
        };
        const recoveredData = (0, ethereumjs_util_1.ecrecover)(Buffer.from(txHash.slice(2), "hex"), rsvSig.v, rsvSig.r, rsvSig.s);
        const recoveredAddress = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.pubToAddress)(recoveredData));
        hasPrefix = !(0, utils_12.sameString)(recoveredAddress, ownerAddress);
      } catch (e) {
        hasPrefix = true;
      }
      return hasPrefix;
    }
    exports.isTxHashSignedWithPrefix = isTxHashSignedWithPrefix;
    var adjustVInSignature = (signingMethod, signature2, safeTxHash, signerAddress) => {
      const ETHEREUM_V_VALUES = [0, 1, 27, 28];
      const MIN_VALID_V_VALUE_FOR_SAFE_ECDSA = 27;
      let signatureV = parseInt(signature2.slice(-2), 16);
      if (!ETHEREUM_V_VALUES.includes(signatureV)) {
        throw new Error("Invalid signature");
      }
      if (signingMethod === "eth_sign") {
        if (signatureV < MIN_VALID_V_VALUE_FOR_SAFE_ECDSA) {
          signatureV += MIN_VALID_V_VALUE_FOR_SAFE_ECDSA;
        }
        const adjustedSignature = signature2.slice(0, -2) + signatureV.toString(16);
        const signatureHasPrefix = isTxHashSignedWithPrefix(safeTxHash, adjustedSignature, signerAddress);
        if (signatureHasPrefix) {
          signatureV += 4;
        }
      }
      if (signingMethod === "eth_signTypedData") {
        if (signatureV < MIN_VALID_V_VALUE_FOR_SAFE_ECDSA) {
          signatureV += MIN_VALID_V_VALUE_FOR_SAFE_ECDSA;
        }
      }
      signature2 = signature2.slice(0, -2) + signatureV.toString(16);
      return signature2;
    };
    exports.adjustVInSignature = adjustVInSignature;
    async function generateSignature(ethAdapter, hash3) {
      const signerAddress = await ethAdapter.getSignerAddress();
      if (!signerAddress) {
        throw new Error("EthAdapter must be initialized with a signer to use this method");
      }
      let signature2 = await ethAdapter.signMessage(hash3);
      signature2 = (0, exports.adjustVInSignature)("eth_sign", signature2, hash3, signerAddress);
      return new SafeSignature_1.default(signerAddress, signature2);
    }
    exports.generateSignature = generateSignature;
    async function generateEIP712Signature(ethAdapter, safeTransactionEIP712Args, methodVersion) {
      const signerAddress = await ethAdapter.getSignerAddress();
      if (!signerAddress) {
        throw new Error("EthAdapter must be initialized with a signer to use this method");
      }
      let signature2 = await ethAdapter.signTypedData(safeTransactionEIP712Args, methodVersion);
      signature2 = (0, exports.adjustVInSignature)("eth_signTypedData", signature2);
      return new SafeSignature_1.default(signerAddress, signature2);
    }
    exports.generateEIP712Signature = generateEIP712Signature;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/SafeTransaction.js
var require_SafeTransaction = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/SafeTransaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EthSafeTransaction = class {
      constructor(data) {
        this.signatures = /* @__PURE__ */ new Map();
        this.data = data;
      }
      addSignature(signature2) {
        this.signatures.set(signature2.signer.toLowerCase(), signature2);
      }
      encodedSignatures() {
        const signers = Array.from(this.signatures.keys()).sort();
        const baseOffset = signers.length * 65;
        let staticParts = "";
        let dynamicParts = "";
        signers.forEach((signerAddress) => {
          const signature2 = this.signatures.get(signerAddress);
          staticParts += signature2 === null || signature2 === void 0 ? void 0 : signature2.staticPart(
            /*baseOffset + dynamicParts.length / 2*/
          ).slice(2);
          dynamicParts += signature2 === null || signature2 === void 0 ? void 0 : signature2.dynamicPart();
        });
        return "0x" + staticParts + dynamicParts;
      }
    };
    exports.default = EthSafeTransaction;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/gas.js
var require_gas = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/gas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.estimateTxGas = void 0;
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_types_1 = require_src();
    function estimateDataGasCosts(data) {
      const reducer = (accumulator, currentValue) => {
        if (currentValue === "0x") {
          return accumulator + 0;
        }
        if (currentValue === "00") {
          return accumulator + 4;
        }
        return accumulator + 16;
      };
      return data.match(/.{2}/g).reduce(reducer, 0);
    }
    async function estimateTxGas(safeContract, ethAdapter, to, valueInWei, data, operation) {
      let txGasEstimation = 0;
      const safeAddress = safeContract.getAddress();
      const estimateData = safeContract.encode("requiredTxGas", [
        to,
        valueInWei,
        data,
        operation
      ]);
      try {
        const estimateResponse = (await ethAdapter.estimateGas({
          to: safeAddress,
          from: safeAddress,
          data: estimateData
        })).toString();
        txGasEstimation = bignumber_1.BigNumber.from("0x" + estimateResponse.substring(138)).toNumber() + 1e4;
      } catch (error) {
      }
      if (txGasEstimation > 0) {
        const dataGasEstimation = estimateDataGasCosts(estimateData);
        let additionalGas = 1e4;
        for (let i = 0; i < 10; i++) {
          try {
            const estimateResponse = await ethAdapter.call({
              to: safeAddress,
              from: safeAddress,
              data: estimateData,
              gasPrice: 0,
              gasLimit: txGasEstimation + dataGasEstimation + additionalGas
            });
            if (estimateResponse !== "0x") {
              break;
            }
          } catch (error) {
          }
          txGasEstimation += additionalGas;
          additionalGas *= 2;
        }
        return txGasEstimation + additionalGas;
      }
      try {
        const estimateGas = await ethAdapter.estimateGas({
          to,
          from: safeAddress,
          value: valueInWei,
          data
        });
        return estimateGas;
      } catch (error) {
        if (operation === safe_core_sdk_types_1.OperationType.DelegateCall) {
          return 0;
        }
        return Promise.reject(error);
      }
    }
    exports.estimateTxGas = estimateTxGas;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/utils.js
var require_utils15 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeMultiSendData = exports.standardizeSafeTransactionData = exports.standardizeMetaTransactionData = void 0;
    var bytes_1 = (init_lib(), __toCommonJS(lib_exports));
    var solidity_1 = (init_lib8(), __toCommonJS(lib_exports8));
    var safe_core_sdk_types_1 = require_src();
    var safe_core_sdk_utils_1 = require_src6();
    var constants_1 = require_constants2();
    var gas_1 = require_gas();
    function standardizeMetaTransactionData(tx) {
      var _a;
      const standardizedTxs = {
        ...tx,
        operation: (_a = tx.operation) !== null && _a !== void 0 ? _a : safe_core_sdk_types_1.OperationType.Call
      };
      return standardizedTxs;
    }
    exports.standardizeMetaTransactionData = standardizeMetaTransactionData;
    async function standardizeSafeTransactionData(safeContract, ethAdapter, tx) {
      var _a, _b, _c, _d;
      const standardizedTxs = {
        to: tx.to,
        value: tx.value,
        data: tx.data,
        operation: (_a = tx.operation) !== null && _a !== void 0 ? _a : safe_core_sdk_types_1.OperationType.Call,
        baseGas: (_b = tx.baseGas) !== null && _b !== void 0 ? _b : 0,
        gasPrice: (_c = tx.gasPrice) !== null && _c !== void 0 ? _c : 0,
        gasToken: tx.gasToken || constants_1.ZERO_ADDRESS,
        refundReceiver: tx.refundReceiver || constants_1.ZERO_ADDRESS,
        nonce: (_d = tx.nonce) !== null && _d !== void 0 ? _d : await safeContract.getNonce()
      };
      let safeTxGas;
      if (typeof tx.safeTxGas !== "undefined") {
        return {
          ...standardizedTxs,
          safeTxGas: tx.safeTxGas
        };
      }
      const safeVersion = await safeContract.getVersion();
      if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_TX_GAS_OPTIONAL, safeVersion) && standardizedTxs.gasPrice === 0) {
        safeTxGas = 0;
      } else {
        safeTxGas = await (0, gas_1.estimateTxGas)(safeContract, ethAdapter, standardizedTxs.to, standardizedTxs.value, standardizedTxs.data, standardizedTxs.operation);
      }
      return {
        ...standardizedTxs,
        safeTxGas
      };
    }
    exports.standardizeSafeTransactionData = standardizeSafeTransactionData;
    function encodeMetaTransaction(tx) {
      const data = (0, bytes_1.arrayify)(tx.data);
      const encoded = (0, solidity_1.pack)(["uint8", "address", "uint256", "uint256", "bytes"], [tx.operation, tx.to, tx.value, data.length, data]);
      return encoded.slice(2);
    }
    function encodeMultiSendData(txs) {
      return "0x" + txs.map((tx) => encodeMetaTransaction(tx)).join("");
    }
    exports.encodeMultiSendData = encodeMultiSendData;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/Safe.js
var require_Safe = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/Safe.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _Safe_ethAdapter;
    var _Safe_contractManager;
    var _Safe_ownerManager;
    var _Safe_moduleManager;
    var _Safe_guardManager;
    var _Safe_fallbackHandlerManager;
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_types_1 = require_src();
    var safe_core_sdk_utils_1 = require_src6();
    var contractManager_1 = __importDefault(require_contractManager());
    var fallbackHandlerManager_1 = __importDefault(require_fallbackHandlerManager());
    var guardManager_1 = __importDefault(require_guardManager());
    var moduleManager_1 = __importDefault(require_moduleManager());
    var ownerManager_1 = __importDefault(require_ownerManager());
    var utils_12 = require_utils13();
    var signatures_1 = require_signatures();
    var SafeSignature_1 = __importDefault(require_SafeSignature());
    var SafeTransaction_1 = __importDefault(require_SafeTransaction());
    var utils_2 = require_utils15();
    var Safe = class _Safe {
      constructor() {
        _Safe_ethAdapter.set(this, void 0);
        _Safe_contractManager.set(this, void 0);
        _Safe_ownerManager.set(this, void 0);
        _Safe_moduleManager.set(this, void 0);
        _Safe_guardManager.set(this, void 0);
        _Safe_fallbackHandlerManager.set(this, void 0);
      }
      /**
       * Creates an instance of the Safe Core SDK.
       * @param config - Ethers Safe configuration
       * @returns The Safe Core SDK instance
       * @throws "SafeProxy contract is not deployed on the current network"
       * @throws "MultiSend contract is not deployed on the current network"
       * @throws "MultiSendCallOnly contract is not deployed on the current network"
       */
      static async create({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        const safeSdk = new _Safe();
        await safeSdk.init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks });
        return safeSdk;
      }
      /**
       * Initializes the Safe Core SDK instance.
       * @param config - Safe configuration
       * @throws "Signer must be connected to a provider"
       * @throws "SafeProxy contract is not deployed on the current network"
       * @throws "MultiSend contract is not deployed on the current network"
       * @throws "MultiSendCallOnly contract is not deployed on the current network"
       */
      async init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        __classPrivateFieldSet(this, _Safe_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _Safe_contractManager, await contractManager_1.default.create({
          ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
          safeAddress,
          isL1SafeMasterCopy,
          contractNetworks
        }), "f");
        __classPrivateFieldSet(this, _Safe_ownerManager, new ownerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
        __classPrivateFieldSet(this, _Safe_moduleManager, new moduleManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
        __classPrivateFieldSet(this, _Safe_guardManager, new guardManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
        __classPrivateFieldSet(this, _Safe_fallbackHandlerManager, new fallbackHandlerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
      }
      /**
       * Returns a new instance of the Safe Core SDK.
       * @param config - Connect Safe configuration
       * @throws "SafeProxy contract is not deployed on the current network"
       * @throws "MultiSend contract is not deployed on the current network"
       * @throws "MultiSendCallOnly contract is not deployed on the current network"
       */
      async connect({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        return await _Safe.create({
          ethAdapter: ethAdapter || __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
          safeAddress: safeAddress || this.getAddress(),
          isL1SafeMasterCopy: isL1SafeMasterCopy || __classPrivateFieldGet(this, _Safe_contractManager, "f").isL1SafeMasterCopy,
          contractNetworks: contractNetworks || __classPrivateFieldGet(this, _Safe_contractManager, "f").contractNetworks
        });
      }
      /**
       * Returns the address of the current SafeProxy contract.
       *
       * @returns The address of the SafeProxy contract
       */
      getAddress() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getAddress();
      }
      /**
       * Returns the ContractManager
       *
       * @returns The current ContractManager
       * */
      getContractManager() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f");
      }
      /**
       * Returns the current EthAdapter.
       *
       * @returns The current EthAdapter
       */
      getEthAdapter() {
        return __classPrivateFieldGet(this, _Safe_ethAdapter, "f");
      }
      /**
       * Returns the address of the MultiSend contract.
       *
       * @returns The address of the MultiSend contract
       */
      getMultiSendAddress() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendContract.getAddress();
      }
      /**
       * Returns the address of the MultiSendCallOnly contract.
       *
       * @returns The address of the MultiSendCallOnly contract
       */
      getMultiSendCallOnlyAddress() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendCallOnlyContract.getAddress();
      }
      /**
       * Returns the Safe Master Copy contract version.
       *
       * @returns The Safe Master Copy contract version
       */
      async getContractVersion() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getVersion();
      }
      /**
       * Returns the list of Safe owner accounts.
       *
       * @returns The list of owners
       */
      async getOwners() {
        return __classPrivateFieldGet(this, _Safe_ownerManager, "f").getOwners();
      }
      /**
       * Returns the Safe nonce.
       *
       * @returns The Safe nonce
       */
      async getNonce() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getNonce();
      }
      /**
       * Returns the Safe threshold.
       *
       * @returns The Safe threshold
       */
      async getThreshold() {
        return __classPrivateFieldGet(this, _Safe_ownerManager, "f").getThreshold();
      }
      /**
       * Returns the chainId of the connected network.
       *
       * @returns The chainId of the connected network
       */
      async getChainId() {
        return __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getChainId();
      }
      /**
       * Returns the ETH balance of the Safe.
       *
       * @returns The ETH balance of the Safe
       */
      async getBalance() {
        return __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getBalance(this.getAddress());
      }
      /**
       * Returns the address of the FallbackHandler contract.
       *
       * @returns The address of the FallbackHandler contract
       */
      getFallbackHandler() {
        return __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, "f").getFallbackHandler();
      }
      /**
       * Returns the enabled Safe guard or 0x address if no guards are enabled.
       *
       * @returns The address of the enabled Safe guard
       * @throws "Current version of the Safe does not support Safe transaction guards functionality"
       */
      async getGuard() {
        return __classPrivateFieldGet(this, _Safe_guardManager, "f").getGuard();
      }
      /**
       * Returns the list of addresses of all the enabled Safe modules.
       *
       * @returns The list of addresses of all the enabled Safe modules
       */
      async getModules() {
        return __classPrivateFieldGet(this, _Safe_moduleManager, "f").getModules();
      }
      /**
       * Checks if a specific Safe module is enabled for the current Safe.
       *
       * @param moduleAddress - The desired module address
       * @returns TRUE if the module is enabled
       */
      async isModuleEnabled(moduleAddress) {
        return __classPrivateFieldGet(this, _Safe_moduleManager, "f").isModuleEnabled(moduleAddress);
      }
      /**
       * Checks if a specific address is an owner of the current Safe.
       *
       * @param ownerAddress - The account address
       * @returns TRUE if the account is an owner
       */
      async isOwner(ownerAddress) {
        return __classPrivateFieldGet(this, _Safe_ownerManager, "f").isOwner(ownerAddress);
      }
      /**
       * Returns a Safe transaction ready to be signed by the owners.
       *
       * @param createTransactionProps - The createTransaction props
       * @returns The Safe transaction
       * @throws "Invalid empty array of transactions"
       */
      async createTransaction({ safeTransactionData, onlyCalls = false, options }) {
        if ((0, utils_12.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length === 0) {
          throw new Error("Invalid empty array of transactions");
        }
        let newTransaction;
        if ((0, utils_12.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length > 1) {
          const multiSendContract = onlyCalls ? __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendCallOnlyContract : __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendContract;
          const multiSendData = (0, utils_2.encodeMultiSendData)(safeTransactionData.map(utils_2.standardizeMetaTransactionData));
          const multiSendTransaction = {
            ...options,
            to: multiSendContract.getAddress(),
            value: "0",
            data: multiSendContract.encode("multiSend", [multiSendData]),
            operation: safe_core_sdk_types_1.OperationType.DelegateCall
          };
          newTransaction = multiSendTransaction;
        } else {
          newTransaction = (0, utils_12.isMetaTransactionArray)(safeTransactionData) ? { ...options, ...safeTransactionData[0] } : safeTransactionData;
        }
        const standardizedTransaction = await (0, utils_2.standardizeSafeTransactionData)(__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract, __classPrivateFieldGet(this, _Safe_ethAdapter, "f"), newTransaction);
        return new SafeTransaction_1.default(standardizedTransaction);
      }
      /**
       * Returns a Safe transaction ready to be signed by the owners that invalidates the pending Safe transaction/s with a specific nonce.
       *
       * @param nonce - The nonce of the transaction/s that are going to be rejected
       * @returns The Safe transaction that invalidates the pending Safe transaction/s
       */
      async createRejectionTransaction(nonce) {
        const safeTransactionData = {
          to: this.getAddress(),
          nonce,
          value: "0",
          data: "0x",
          safeTxGas: 0
        };
        return this.createTransaction({ safeTransactionData });
      }
      /**
       * Copies a Safe transaction
       *
       * @param safeTransaction - The Safe transaction
       * @returns The new Safe transaction
       */
      async copyTransaction(safeTransaction) {
        const signedSafeTransaction = await this.createTransaction({
          safeTransactionData: safeTransaction.data
        });
        safeTransaction.signatures.forEach((signature2) => {
          signedSafeTransaction.addSignature(signature2);
        });
        return signedSafeTransaction;
      }
      /**
       * Returns the transaction hash of a Safe transaction.
       *
       * @param safeTransaction - The Safe transaction
       * @returns The transaction hash of the Safe transaction
       */
      async getTransactionHash(safeTransaction) {
        const safeTransactionData = safeTransaction.data;
        const txHash = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getTransactionHash(safeTransactionData);
        return txHash;
      }
      /**
       * Signs a hash using the current signer account.
       *
       * @param hash - The hash to sign
       * @returns The Safe signature
       */
      async signTransactionHash(hash3) {
        return (0, signatures_1.generateSignature)(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), hash3);
      }
      /**
       * Signs a transaction according to the EIP-712 using the current signer account.
       *
       * @param safeTransaction - The Safe transaction to be signed
       * @param methodVersion - EIP-712 version. Optional
       * @returns The Safe signature
       */
      async signTypedData(safeTransaction, methodVersion) {
        const safeTransactionEIP712Args = {
          safeAddress: this.getAddress(),
          safeVersion: await this.getContractVersion(),
          chainId: await this.getEthAdapter().getChainId(),
          safeTransactionData: safeTransaction.data
        };
        return (0, signatures_1.generateEIP712Signature)(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), safeTransactionEIP712Args, methodVersion);
      }
      /**
       * Adds the signature of the current signer to the Safe transaction object.
       *
       * @param safeTransaction - The Safe transaction to be signed
       * @param signingMethod - Method followed to sign a transaction. Optional. Default value is "eth_sign"
       * @returns The signed Safe transaction
       * @throws "Transactions can only be signed by Safe owners"
       */
      async signTransaction(safeTransaction, signingMethod = "eth_signTypedData_v4") {
        let transaction = (0, utils_12.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const addressIsOwner = owners.find((owner) => signerAddress && (0, utils_12.sameString)(owner, signerAddress));
        if (!addressIsOwner) {
          throw new Error("Transactions can only be signed by Safe owners");
        }
        let signature2;
        if (signingMethod === "eth_signTypedData_v4") {
          signature2 = await this.signTypedData(transaction, "v4");
        } else if (signingMethod === "eth_signTypedData_v3") {
          signature2 = await this.signTypedData(transaction, "v3");
        } else if (signingMethod === "eth_signTypedData") {
          signature2 = await this.signTypedData(transaction);
        } else {
          const safeVersion = await this.getContractVersion();
          if (!(0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.ETH_SIGN, safeVersion)) {
            throw new Error("eth_sign is only supported by Safes >= v1.1.0");
          }
          const txHash = await this.getTransactionHash(transaction);
          signature2 = await this.signTransactionHash(txHash);
        }
        const signedSafeTransaction = await this.createTransaction({
          safeTransactionData: transaction.data
        });
        transaction.signatures.forEach((signature3) => {
          signedSafeTransaction.addSignature(signature3);
        });
        signedSafeTransaction.addSignature(signature2);
        return signedSafeTransaction;
      }
      /**
       * Approves on-chain a hash using the current signer account.
       *
       * @param hash - The hash to approve
       * @param options - The Safe transaction execution options. Optional
       * @returns The Safe transaction response
       * @throws "Transaction hashes can only be approved by Safe owners"
       * @throws "Cannot specify gas and gasLimit together in transaction options"
       */
      async approveTransactionHash(hash3, options) {
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const addressIsOwner = owners.find((owner) => signerAddress && (0, utils_12.sameString)(owner, signerAddress));
        if (!addressIsOwner) {
          throw new Error("Transaction hashes can only be approved by Safe owners");
        }
        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {
          throw new Error("Cannot specify gas and gasLimit together in transaction options");
        }
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.approveHash(hash3, {
          from: signerAddress,
          ...options
        });
      }
      /**
       * Returns a list of owners who have approved a specific Safe transaction.
       *
       * @param txHash - The Safe transaction hash
       * @returns The list of owners
       */
      async getOwnersWhoApprovedTx(txHash) {
        const owners = await this.getOwners();
        let ownersWhoApproved = [];
        for (const owner of owners) {
          const approved = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.approvedHashes(owner, txHash);
          if (approved.gt(0)) {
            ownersWhoApproved.push(owner);
          }
        }
        return ownersWhoApproved;
      }
      /**
       * Returns the Safe transaction to enable the fallback handler.
       *
       * @param address - The new fallback handler address
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid fallback handler address provided"
       * @throws "Fallback handler provided is already enabled"
       * @throws "Current version of the Safe does not support the fallback handler functionality"
       */
      async createEnableFallbackHandlerTx(fallbackHandlerAddress, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, "f").encodeEnableFallbackHandlerData(fallbackHandlerAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to disable the fallback handler.
       *
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "There is no fallback handler enabled yet"
       * @throws "Current version of the Safe does not support the fallback handler functionality"
       */
      async createDisableFallbackHandlerTx(options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, "f").encodeDisableFallbackHandlerData(),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to enable a Safe guard.
       *
       * @param guardAddress - The desired guard address
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid guard address provided"
       * @throws "Guard provided is already enabled"
       * @throws "Current version of the Safe does not support Safe transaction guards functionality"
       */
      async createEnableGuardTx(guardAddress, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_guardManager, "f").encodeEnableGuardData(guardAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to disable a Safe guard.
       *
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "There is no guard enabled yet"
       * @throws "Current version of the Safe does not support Safe transaction guards functionality"
       */
      async createDisableGuardTx(options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_guardManager, "f").encodeDisableGuardData(),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to enable a Safe module.
       *
       * @param moduleAddress - The desired module address
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid module address provided"
       * @throws "Module provided is already enabled"
       */
      async createEnableModuleTx(moduleAddress, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_moduleManager, "f").encodeEnableModuleData(moduleAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to disable a Safe module.
       *
       * @param moduleAddress - The desired module address
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid module address provided"
       * @throws "Module provided is not enabled already"
       */
      async createDisableModuleTx(moduleAddress, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_moduleManager, "f").encodeDisableModuleData(moduleAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to add an owner and optionally change the threshold.
       *
       * @param params - The transaction params
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid owner address provided"
       * @throws "Address provided is already an owner"
       * @throws "Threshold needs to be greater than 0"
       * @throws "Threshold cannot exceed owner count"
       */
      async createAddOwnerTx({ ownerAddress, threshold }, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeAddOwnerWithThresholdData(ownerAddress, threshold),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to remove an owner and optionally change the threshold.
       *
       * @param params - The transaction params
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid owner address provided"
       * @throws "Address provided is not an owner"
       * @throws "Threshold needs to be greater than 0"
       * @throws "Threshold cannot exceed owner count"
       */
      async createRemoveOwnerTx({ ownerAddress, threshold }, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeRemoveOwnerData(ownerAddress, threshold),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to replace an owner of the Safe with a new one.
       *
       * @param params - The transaction params
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid new owner address provided"
       * @throws "Invalid old owner address provided"
       * @throws "New address provided is already an owner"
       * @throws "Old address provided is not an owner"
       */
      async createSwapOwnerTx({ oldOwnerAddress, newOwnerAddress }, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to change the threshold.
       *
       * @param threshold - The new threshold
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Threshold needs to be greater than 0"
       * @throws "Threshold cannot exceed owner count"
       */
      async createChangeThresholdTx(threshold, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeChangeThresholdData(threshold),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Converts a transaction from type SafeMultisigTransactionResponse to type SafeTransaction
       *
       * @param serviceTransactionResponse - The transaction to convert
       * @returns The converted transaction with type SafeTransaction
       */
      async toSafeTransactionType(serviceTransactionResponse) {
        var _a;
        const safeTransactionData = {
          to: serviceTransactionResponse.to,
          value: serviceTransactionResponse.value,
          data: serviceTransactionResponse.data || "0x",
          operation: serviceTransactionResponse.operation,
          safeTxGas: serviceTransactionResponse.safeTxGas,
          baseGas: serviceTransactionResponse.baseGas,
          gasPrice: Number(serviceTransactionResponse.gasPrice),
          gasToken: serviceTransactionResponse.gasToken,
          refundReceiver: serviceTransactionResponse.refundReceiver,
          nonce: serviceTransactionResponse.nonce
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        (_a = serviceTransactionResponse.confirmations) === null || _a === void 0 ? void 0 : _a.map((confirmation) => {
          const signature2 = new SafeSignature_1.default(confirmation.owner, confirmation.signature);
          safeTransaction.addSignature(signature2);
        });
        return safeTransaction;
      }
      /**
       * Checks if a Safe transaction can be executed successfully with no errors.
       *
       * @param safeTransaction - The Safe transaction to check
       * @param options - The Safe transaction execution options. Optional
       * @returns TRUE if the Safe transaction can be executed successfully with no errors
       */
      async isValidTransaction(safeTransaction, options) {
        let transaction = (0, utils_12.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;
        const signedSafeTransaction = await this.copyTransaction(transaction);
        const txHash = await this.getTransactionHash(signedSafeTransaction);
        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);
        for (const owner of ownersWhoApprovedTx) {
          signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));
        }
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        if (owners.includes(signerAddress)) {
          signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));
        }
        const isTxValid = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.isValidTransaction(signedSafeTransaction, {
          from: signerAddress,
          ...options
        });
        return isTxValid;
      }
      /**
       * Executes a Safe transaction.
       *
       * @param safeTransaction - The Safe transaction to execute
       * @param options - The Safe transaction execution options. Optional
       * @returns The Safe transaction response
       * @throws "No signer provided"
       * @throws "There are X signatures missing"
       * @throws "Cannot specify gas and gasLimit together in transaction options"
       */
      async executeTransaction(safeTransaction, options) {
        let transaction = (0, utils_12.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;
        const signedSafeTransaction = await this.copyTransaction(transaction);
        const txHash = await this.getTransactionHash(signedSafeTransaction);
        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);
        for (const owner of ownersWhoApprovedTx) {
          signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));
        }
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (signerAddress && owners.includes(signerAddress)) {
          signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));
        }
        const threshold = await this.getThreshold();
        if (threshold > signedSafeTransaction.signatures.size) {
          const signaturesMissing = threshold - signedSafeTransaction.signatures.size;
          throw new Error(`There ${signaturesMissing > 1 ? "are" : "is"} ${signaturesMissing} signature${signaturesMissing > 1 ? "s" : ""} missing`);
        }
        const value = bignumber_1.BigNumber.from(signedSafeTransaction.data.value);
        if (!value.isZero()) {
          const balance = await this.getBalance();
          if (value.gt(bignumber_1.BigNumber.from(balance))) {
            throw new Error("Not enough Ether funds");
          }
        }
        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {
          throw new Error("Cannot specify gas and gasLimit together in transaction options");
        }
        const txResponse = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.execTransaction(signedSafeTransaction, {
          from: signerAddress,
          ...options
        });
        return txResponse;
      }
    };
    _Safe_ethAdapter = /* @__PURE__ */ new WeakMap(), _Safe_contractManager = /* @__PURE__ */ new WeakMap(), _Safe_ownerManager = /* @__PURE__ */ new WeakMap(), _Safe_moduleManager = /* @__PURE__ */ new WeakMap(), _Safe_guardManager = /* @__PURE__ */ new WeakMap(), _Safe_fallbackHandlerManager = /* @__PURE__ */ new WeakMap();
    exports.default = Safe;
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/types.js
var require_types5 = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccountNonceOrdering = exports.AccountAbstractionVersion = exports.TransactionStatus = exports.PriorityOpTree = exports.PriorityQueueType = exports.Network = void 0;
    var Network;
    (function(Network2) {
      Network2[Network2["Mainnet"] = 1] = "Mainnet";
      Network2[Network2["Ropsten"] = 3] = "Ropsten";
      Network2[Network2["Rinkeby"] = 4] = "Rinkeby";
      Network2[Network2["Goerli"] = 5] = "Goerli";
      Network2[Network2["Localhost"] = 9] = "Localhost";
    })(Network = exports.Network || (exports.Network = {}));
    var PriorityQueueType;
    (function(PriorityQueueType2) {
      PriorityQueueType2[PriorityQueueType2["Deque"] = 0] = "Deque";
      PriorityQueueType2[PriorityQueueType2["HeapBuffer"] = 1] = "HeapBuffer";
      PriorityQueueType2[PriorityQueueType2["Heap"] = 2] = "Heap";
    })(PriorityQueueType = exports.PriorityQueueType || (exports.PriorityQueueType = {}));
    var PriorityOpTree;
    (function(PriorityOpTree2) {
      PriorityOpTree2[PriorityOpTree2["Full"] = 0] = "Full";
      PriorityOpTree2[PriorityOpTree2["Rollup"] = 1] = "Rollup";
    })(PriorityOpTree = exports.PriorityOpTree || (exports.PriorityOpTree = {}));
    var TransactionStatus;
    (function(TransactionStatus2) {
      TransactionStatus2["NotFound"] = "not-found";
      TransactionStatus2["Processing"] = "processing";
      TransactionStatus2["Committed"] = "committed";
      TransactionStatus2["Finalized"] = "finalized";
    })(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
    var AccountAbstractionVersion;
    (function(AccountAbstractionVersion2) {
      AccountAbstractionVersion2[AccountAbstractionVersion2["None"] = 0] = "None";
      AccountAbstractionVersion2[AccountAbstractionVersion2["Version1"] = 1] = "Version1";
    })(AccountAbstractionVersion = exports.AccountAbstractionVersion || (exports.AccountAbstractionVersion = {}));
    var AccountNonceOrdering;
    (function(AccountNonceOrdering2) {
      AccountNonceOrdering2[AccountNonceOrdering2["Sequential"] = 0] = "Sequential";
      AccountNonceOrdering2[AccountNonceOrdering2["Arbitrary"] = 1] = "Arbitrary";
    })(AccountNonceOrdering = exports.AccountNonceOrdering || (exports.AccountNonceOrdering = {}));
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IZkSyncFactory.js
var require_IZkSyncFactory = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IZkSyncFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IZkSyncFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IZkSyncFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IZkSyncFactory = IZkSyncFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32"
          }
        ],
        name: "BlockCommit",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32"
          }
        ],
        name: "BlockExecution",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "totalBlocksCommitted",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "totalBlocksVerified",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "totalBlocksExecuted",
            type: "uint256"
          }
        ],
        name: "BlocksRevert",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "previousLastVerifiedBlock",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "uint256",
            name: "currentLastVerifiedBlock",
            type: "uint256"
          }
        ],
        name: "BlocksVerification",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "proposalHash",
            type: "bytes32"
          }
        ],
        name: "CancelUpgradeProposal",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "EthWithdrawalFinalized",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "proposalHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "bytes32",
            name: "proposalSalt",
            type: "bytes32"
          }
        ],
        name: "ExecuteUpgrade",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [],
        name: "Freeze",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bool",
            name: "isPorterAvailable",
            type: "bool"
          }
        ],
        name: "IsPorterAvailableStatusUpdate",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "oldGovernor",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newGovernor",
            type: "address"
          }
        ],
        name: "NewGovernor",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "previousBytecodeHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "newBytecodeHash",
            type: "bytes32"
          }
        ],
        name: "NewL2BootloaderBytecodeHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "previousBytecodeHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "newBytecodeHash",
            type: "bytes32"
          }
        ],
        name: "NewL2DefaultAccountBytecodeHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "oldPendingGovernor",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newPendingGovernor",
            type: "address"
          }
        ],
        name: "NewPendingGovernor",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "txId",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint64",
            name: "expirationTimestamp",
            type: "uint64"
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "txType",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "from",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "to",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "gasLimit",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "gasPerPubdataByteLimit",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "maxFeePerGas",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "maxPriorityFeePerGas",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "paymaster",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256"
              },
              {
                internalType: "uint256[4]",
                name: "reserved",
                type: "uint256[4]"
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes"
              },
              {
                internalType: "bytes",
                name: "signature",
                type: "bytes"
              },
              {
                internalType: "uint256[]",
                name: "factoryDeps",
                type: "uint256[]"
              },
              {
                internalType: "bytes",
                name: "paymasterInput",
                type: "bytes"
              },
              {
                internalType: "bytes",
                name: "reservedDynamic",
                type: "bytes"
              }
            ],
            indexed: false,
            internalType: "struct IMailbox.L2CanonicalTransaction",
            name: "transaction",
            type: "tuple"
          },
          {
            indexed: false,
            internalType: "bytes[]",
            name: "factoryDeps",
            type: "bytes[]"
          }
        ],
        name: "NewPriorityRequest",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "oldPriorityTxMaxGasLimit",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "newPriorityTxMaxGasLimit",
            type: "uint256"
          }
        ],
        name: "NewPriorityTxMaxGasLimit",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "oldVerifier",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newVerifier",
            type: "address"
          }
        ],
        name: "NewVerifier",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "recursionNodeLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionLeafLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionCircuitsSetVksHash",
                type: "bytes32"
              }
            ],
            indexed: false,
            internalType: "struct VerifierParams",
            name: "oldVerifierParams",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "recursionNodeLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionLeafLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionCircuitsSetVksHash",
                type: "bytes32"
              }
            ],
            indexed: false,
            internalType: "struct VerifierParams",
            name: "newVerifierParams",
            type: "tuple"
          }
        ],
        name: "NewVerifierParams",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "proposalHash",
            type: "bytes32"
          }
        ],
        name: "ProposeShadowUpgrade",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "facet",
                    type: "address"
                  },
                  {
                    internalType: "enum Diamond.Action",
                    name: "action",
                    type: "uint8"
                  },
                  {
                    internalType: "bool",
                    name: "isFreezable",
                    type: "bool"
                  },
                  {
                    internalType: "bytes4[]",
                    name: "selectors",
                    type: "bytes4[]"
                  }
                ],
                internalType: "struct Diamond.FacetCut[]",
                name: "facetCuts",
                type: "tuple[]"
              },
              {
                internalType: "address",
                name: "initAddress",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "initCalldata",
                type: "bytes"
              }
            ],
            indexed: false,
            internalType: "struct Diamond.DiamondCutData",
            name: "diamondCut",
            type: "tuple"
          },
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "bytes32",
            name: "proposalSalt",
            type: "bytes32"
          }
        ],
        name: "ProposeTransparentUpgrade",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "proposalHash",
            type: "bytes32"
          }
        ],
        name: "SecurityCouncilUpgradeApprove",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [],
        name: "Unfreeze",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "validatorAddress",
            type: "address"
          },
          {
            indexed: false,
            internalType: "bool",
            name: "isActive",
            type: "bool"
          }
        ],
        name: "ValidatorStatusUpdate",
        type: "event"
      },
      {
        inputs: [],
        name: "acceptGovernor",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_proposedUpgradeHash",
            type: "bytes32"
          }
        ],
        name: "cancelUpgradeProposal",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "commitment",
                type: "bytes32"
              }
            ],
            internalType: "struct IExecutor.StoredBlockInfo",
            name: "_lastCommittedBlockData",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "uint64",
                name: "timestamp",
                type: "uint64"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "newStateRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes",
                name: "initialStorageChanges",
                type: "bytes"
              },
              {
                internalType: "bytes",
                name: "repeatedStorageChanges",
                type: "bytes"
              },
              {
                internalType: "bytes",
                name: "l2Logs",
                type: "bytes"
              },
              {
                internalType: "bytes[]",
                name: "l2ArbitraryLengthMessages",
                type: "bytes[]"
              },
              {
                internalType: "bytes[]",
                name: "factoryDeps",
                type: "bytes[]"
              }
            ],
            internalType: "struct IExecutor.CommitBlockInfo[]",
            name: "_newBlocksData",
            type: "tuple[]"
          }
        ],
        name: "commitBlocks",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "commitment",
                type: "bytes32"
              }
            ],
            internalType: "struct IExecutor.StoredBlockInfo[]",
            name: "_blocksData",
            type: "tuple[]"
          }
        ],
        name: "executeBlocks",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "facet",
                    type: "address"
                  },
                  {
                    internalType: "enum Diamond.Action",
                    name: "action",
                    type: "uint8"
                  },
                  {
                    internalType: "bool",
                    name: "isFreezable",
                    type: "bool"
                  },
                  {
                    internalType: "bytes4[]",
                    name: "selectors",
                    type: "bytes4[]"
                  }
                ],
                internalType: "struct Diamond.FacetCut[]",
                name: "facetCuts",
                type: "tuple[]"
              },
              {
                internalType: "address",
                name: "initAddress",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "initCalldata",
                type: "bytes"
              }
            ],
            internalType: "struct Diamond.DiamondCutData",
            name: "_diamondCut",
            type: "tuple"
          },
          {
            internalType: "bytes32",
            name: "_proposalSalt",
            type: "bytes32"
          }
        ],
        name: "executeUpgrade",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes4",
            name: "_selector",
            type: "bytes4"
          }
        ],
        name: "facetAddress",
        outputs: [
          {
            internalType: "address",
            name: "facet",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "facetAddresses",
        outputs: [
          {
            internalType: "address[]",
            name: "facets",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_facet",
            type: "address"
          }
        ],
        name: "facetFunctionSelectors",
        outputs: [
          {
            internalType: "bytes4[]",
            name: "",
            type: "bytes4[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "facets",
        outputs: [
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address"
              },
              {
                internalType: "bytes4[]",
                name: "selectors",
                type: "bytes4[]"
              }
            ],
            internalType: "struct IGetters.Facet[]",
            name: "",
            type: "tuple[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          },
          {
            internalType: "uint16",
            name: "_l2TxNumberInBlock",
            type: "uint16"
          },
          {
            internalType: "bytes",
            name: "_message",
            type: "bytes"
          },
          {
            internalType: "bytes32[]",
            name: "_merkleProof",
            type: "bytes32[]"
          }
        ],
        name: "finalizeEthWithdrawal",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "freezeDiamond",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentProposalId",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getFirstUnprocessedPriorityTx",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getGovernor",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getL2BootloaderBytecodeHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getL2DefaultAccountBytecodeHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getPendingGovernor",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getPriorityQueueSize",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getProposedUpgradeHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getProposedUpgradeTimestamp",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getSecurityCouncil",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTotalBlocksCommitted",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTotalBlocksExecuted",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTotalBlocksVerified",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTotalPriorityTxs",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getUpgradeProposalState",
        outputs: [
          {
            internalType: "enum UpgradeState",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getVerifier",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getVerifierParams",
        outputs: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "recursionNodeLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionLeafLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionCircuitsSetVksHash",
                type: "bytes32"
              }
            ],
            internalType: "struct VerifierParams",
            name: "",
            type: "tuple"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getpriorityTxMaxGasLimit",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isApprovedBySecurityCouncil",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isDiamondStorageFrozen",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          }
        ],
        name: "isEthWithdrawalFinalized",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_facet",
            type: "address"
          }
        ],
        name: "isFacetFreezable",
        outputs: [
          {
            internalType: "bool",
            name: "isFreezable",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes4",
            name: "_selector",
            type: "bytes4"
          }
        ],
        name: "isFunctionFreezable",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_address",
            type: "address"
          }
        ],
        name: "isValidator",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_blockNumber",
            type: "uint256"
          }
        ],
        name: "l2LogsRootHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_gasPrice",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2GasLimit",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2GasPerPubdataByteLimit",
            type: "uint256"
          }
        ],
        name: "l2TransactionBaseCost",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "priorityQueueFrontOperation",
        outputs: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "canonicalTxHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "expirationTimestamp",
                type: "uint64"
              },
              {
                internalType: "uint192",
                name: "layer2Tip",
                type: "uint192"
              }
            ],
            internalType: "struct PriorityOperation",
            name: "",
            type: "tuple"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_proposalHash",
            type: "bytes32"
          },
          {
            internalType: "uint40",
            name: "_proposalId",
            type: "uint40"
          }
        ],
        name: "proposeShadowUpgrade",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "facet",
                    type: "address"
                  },
                  {
                    internalType: "enum Diamond.Action",
                    name: "action",
                    type: "uint8"
                  },
                  {
                    internalType: "bool",
                    name: "isFreezable",
                    type: "bool"
                  },
                  {
                    internalType: "bytes4[]",
                    name: "selectors",
                    type: "bytes4[]"
                  }
                ],
                internalType: "struct Diamond.FacetCut[]",
                name: "facetCuts",
                type: "tuple[]"
              },
              {
                internalType: "address",
                name: "initAddress",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "initCalldata",
                type: "bytes"
              }
            ],
            internalType: "struct Diamond.DiamondCutData",
            name: "_diamondCut",
            type: "tuple"
          },
          {
            internalType: "uint40",
            name: "_proposalId",
            type: "uint40"
          }
        ],
        name: "proposeTransparentUpgrade",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "commitment",
                type: "bytes32"
              }
            ],
            internalType: "struct IExecutor.StoredBlockInfo",
            name: "_prevBlock",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "commitment",
                type: "bytes32"
              }
            ],
            internalType: "struct IExecutor.StoredBlockInfo[]",
            name: "_committedBlocks",
            type: "tuple[]"
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "recursiveAggregationInput",
                type: "uint256[]"
              },
              {
                internalType: "uint256[]",
                name: "serializedProof",
                type: "uint256[]"
              }
            ],
            internalType: "struct IExecutor.ProofInput",
            name: "_proof",
            type: "tuple"
          }
        ],
        name: "proveBlocks",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_l2TxHash",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          },
          {
            internalType: "uint16",
            name: "_l2TxNumberInBlock",
            type: "uint16"
          },
          {
            internalType: "bytes32[]",
            name: "_merkleProof",
            type: "bytes32[]"
          },
          {
            internalType: "enum TxStatus",
            name: "_status",
            type: "uint8"
          }
        ],
        name: "proveL1ToL2TransactionStatus",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_blockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_index",
            type: "uint256"
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "l2ShardId",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isService",
                type: "bool"
              },
              {
                internalType: "uint16",
                name: "txNumberInBlock",
                type: "uint16"
              },
              {
                internalType: "address",
                name: "sender",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "key",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "value",
                type: "bytes32"
              }
            ],
            internalType: "struct L2Log",
            name: "_log",
            type: "tuple"
          },
          {
            internalType: "bytes32[]",
            name: "_proof",
            type: "bytes32[]"
          }
        ],
        name: "proveL2LogInclusion",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_blockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_index",
            type: "uint256"
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "txNumberInBlock",
                type: "uint16"
              },
              {
                internalType: "address",
                name: "sender",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes"
              }
            ],
            internalType: "struct L2Message",
            name: "_message",
            type: "tuple"
          },
          {
            internalType: "bytes32[]",
            name: "_proof",
            type: "bytes32[]"
          }
        ],
        name: "proveL2MessageInclusion",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_contractL2",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_l2Value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "_calldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "_l2GasLimit",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2GasPerPubdataByteLimit",
            type: "uint256"
          },
          {
            internalType: "bytes[]",
            name: "_factoryDeps",
            type: "bytes[]"
          },
          {
            internalType: "address",
            name: "_refundRecipient",
            type: "address"
          }
        ],
        name: "requestL2Transaction",
        outputs: [
          {
            internalType: "bytes32",
            name: "canonicalTxHash",
            type: "bytes32"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_newLastBlock",
            type: "uint256"
          }
        ],
        name: "revertBlocks",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_upgradeProposalHash",
            type: "bytes32"
          }
        ],
        name: "securityCouncilUpgradeApprove",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_l2BootloaderBytecodeHash",
            type: "bytes32"
          }
        ],
        name: "setL2BootloaderBytecodeHash",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_l2DefaultAccountBytecodeHash",
            type: "bytes32"
          }
        ],
        name: "setL2DefaultAccountBytecodeHash",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_newPendingGovernor",
            type: "address"
          }
        ],
        name: "setPendingGovernor",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bool",
            name: "_zkPorterIsAvailable",
            type: "bool"
          }
        ],
        name: "setPorterAvailability",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_newPriorityTxMaxGasLimit",
            type: "uint256"
          }
        ],
        name: "setPriorityTxMaxGasLimit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_validator",
            type: "address"
          },
          {
            internalType: "bool",
            name: "_active",
            type: "bool"
          }
        ],
        name: "setValidator",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "contract Verifier",
            name: "_newVerifier",
            type: "address"
          }
        ],
        name: "setVerifier",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "recursionNodeLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionLeafLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionCircuitsSetVksHash",
                type: "bytes32"
              }
            ],
            internalType: "struct VerifierParams",
            name: "_newVerifierParams",
            type: "tuple"
          }
        ],
        name: "setVerifierParams",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_blockNumber",
            type: "uint256"
          }
        ],
        name: "storedBlockHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "unfreezeDiamond",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "facet",
                    type: "address"
                  },
                  {
                    internalType: "enum Diamond.Action",
                    name: "action",
                    type: "uint8"
                  },
                  {
                    internalType: "bool",
                    name: "isFreezable",
                    type: "bool"
                  },
                  {
                    internalType: "bytes4[]",
                    name: "selectors",
                    type: "bytes4[]"
                  }
                ],
                internalType: "struct Diamond.FacetCut[]",
                name: "facetCuts",
                type: "tuple[]"
              },
              {
                internalType: "address",
                name: "initAddress",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "initCalldata",
                type: "bytes"
              }
            ],
            internalType: "struct Diamond.DiamondCutData",
            name: "_diamondCut",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "_proposalId",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "_salt",
            type: "bytes32"
          }
        ],
        name: "upgradeProposalHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "pure",
        type: "function"
      }
    ];
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IERC20MetadataFactory.js
var require_IERC20MetadataFactory = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IERC20MetadataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC20MetadataFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IERC20MetadataFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IERC20MetadataFactory = IERC20MetadataFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          }
        ],
        name: "allowance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "approve",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transfer",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transferFrom",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IL1BridgeFactory.js
var require_IL1BridgeFactory = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IL1BridgeFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IL1BridgeFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IL1BridgeFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IL1BridgeFactory = IL1BridgeFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "l1Token",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "ClaimedFailedDeposit",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "l1Token",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "DepositInitiated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "l1Token",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "WithdrawalFinalized",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_depositSender",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "_l2TxHash",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          },
          {
            internalType: "uint16",
            name: "_l2TxNumberInBlock",
            type: "uint16"
          },
          {
            internalType: "bytes32[]",
            name: "_merkleProof",
            type: "bytes32[]"
          }
        ],
        name: "claimFailedDeposit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l2Receiver",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2TxGasLimit",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2TxGasPerPubdataByte",
            type: "uint256"
          }
        ],
        name: "deposit",
        outputs: [
          {
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          },
          {
            internalType: "uint16",
            name: "_l2TxNumberInBlock",
            type: "uint16"
          },
          {
            internalType: "bytes",
            name: "_message",
            type: "bytes"
          },
          {
            internalType: "bytes32[]",
            name: "_merkleProof",
            type: "bytes32[]"
          }
        ],
        name: "finalizeWithdrawal",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          }
        ],
        name: "isWithdrawalFinalized",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          }
        ],
        name: "l2TokenAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IL2BridgeFactory.js
var require_IL2BridgeFactory = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IL2BridgeFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IL2BridgeFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IL2BridgeFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IL2BridgeFactory = IL2BridgeFactory;
    var _abi = [
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Sender",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l2Receiver",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "finalizeDeposit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Bridge",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "_l2TokenProxyBytecodeHash",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "_governor",
            type: "address"
          }
        ],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "l1Bridge",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l2Token",
            type: "address"
          }
        ],
        name: "l1TokenAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          }
        ],
        name: "l2TokenAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Receiver",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l2Token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "withdraw",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IAllowListFactory.js
var require_IAllowListFactory = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IAllowListFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IAllowListFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IAllowListFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IAllowListFactory = IAllowListFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            indexed: false,
            internalType: "enum IAllowList.AccessMode",
            name: "previousMode",
            type: "uint8"
          },
          {
            indexed: false,
            internalType: "enum IAllowList.AccessMode",
            name: "newMode",
            type: "uint8"
          }
        ],
        name: "UpdateAccessMode",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "caller",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            indexed: true,
            internalType: "bytes4",
            name: "functionSig",
            type: "bytes4"
          },
          {
            indexed: false,
            internalType: "bool",
            name: "status",
            type: "bool"
          }
        ],
        name: "UpdateCallPermission",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_caller",
            type: "address"
          },
          {
            internalType: "address",
            name: "_target",
            type: "address"
          },
          {
            internalType: "bytes4",
            name: "_functionSig",
            type: "bytes4"
          }
        ],
        name: "canCall",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_target",
            type: "address"
          }
        ],
        name: "getAccessMode",
        outputs: [
          {
            internalType: "enum IAllowList.AccessMode",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          }
        ],
        name: "getTokenDepositLimitData",
        outputs: [
          {
            components: [
              {
                internalType: "bool",
                name: "depositLimitation",
                type: "bool"
              },
              {
                internalType: "uint256",
                name: "depositCap",
                type: "uint256"
              }
            ],
            internalType: "struct IAllowList.Deposit",
            name: "",
            type: "tuple"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_caller",
            type: "address"
          },
          {
            internalType: "address",
            name: "_target",
            type: "address"
          },
          {
            internalType: "bytes4",
            name: "_functionSig",
            type: "bytes4"
          }
        ],
        name: "hasSpecialAccessToCall",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_target",
            type: "address"
          },
          {
            internalType: "enum IAllowList.AccessMode",
            name: "_accessMode",
            type: "uint8"
          }
        ],
        name: "setAccessMode",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address[]",
            name: "_targets",
            type: "address[]"
          },
          {
            internalType: "enum IAllowList.AccessMode[]",
            name: "_accessMode",
            type: "uint8[]"
          }
        ],
        name: "setBatchAccessMode",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address[]",
            name: "_callers",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "_targets",
            type: "address[]"
          },
          {
            internalType: "bytes4[]",
            name: "_functionSigs",
            type: "bytes4[]"
          },
          {
            internalType: "bool[]",
            name: "_enables",
            type: "bool[]"
          }
        ],
        name: "setBatchPermissionToCall",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          },
          {
            internalType: "bool",
            name: "_depositLimitation",
            type: "bool"
          },
          {
            internalType: "uint256",
            name: "_depositCap",
            type: "uint256"
          }
        ],
        name: "setDepositLimit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_caller",
            type: "address"
          },
          {
            internalType: "address",
            name: "_target",
            type: "address"
          },
          {
            internalType: "bytes4",
            name: "_functionSig",
            type: "bytes4"
          },
          {
            internalType: "bool",
            name: "_enable",
            type: "bool"
          }
        ],
        name: "setPermissionToCall",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IEthTokenFactory.js
var require_IEthTokenFactory = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/IEthTokenFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IEthTokenFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IEthTokenFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IEthTokenFactory = IEthTokenFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "account",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "Mint",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_l1Receiver",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "Withdrawal",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_account",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "mint",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [],
        name: "symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_from",
            type: "address"
          },
          {
            internalType: "address",
            name: "_to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "transferFromTo",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Receiver",
            type: "address"
          }
        ],
        name: "withdraw",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/index.js
var require_typechain = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/typechain/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IEthTokenFactory = exports.IAllowListFactory = exports.IL2BridgeFactory = exports.IL1BridgeFactory = exports.IERC20MetadataFactory = exports.IZkSyncFactory = void 0;
    var IZkSyncFactory_1 = require_IZkSyncFactory();
    Object.defineProperty(exports, "IZkSyncFactory", { enumerable: true, get: function() {
      return IZkSyncFactory_1.IZkSyncFactory;
    } });
    var IERC20MetadataFactory_1 = require_IERC20MetadataFactory();
    Object.defineProperty(exports, "IERC20MetadataFactory", { enumerable: true, get: function() {
      return IERC20MetadataFactory_1.IERC20MetadataFactory;
    } });
    var IL1BridgeFactory_1 = require_IL1BridgeFactory();
    Object.defineProperty(exports, "IL1BridgeFactory", { enumerable: true, get: function() {
      return IL1BridgeFactory_1.IL1BridgeFactory;
    } });
    var IL2BridgeFactory_1 = require_IL2BridgeFactory();
    Object.defineProperty(exports, "IL2BridgeFactory", { enumerable: true, get: function() {
      return IL2BridgeFactory_1.IL2BridgeFactory;
    } });
    var IAllowListFactory_1 = require_IAllowListFactory();
    Object.defineProperty(exports, "IAllowListFactory", { enumerable: true, get: function() {
      return IAllowListFactory_1.IAllowListFactory;
    } });
    var IEthTokenFactory_1 = require_IEthTokenFactory();
    Object.defineProperty(exports, "IEthTokenFactory", { enumerable: true, get: function() {
      return IEthTokenFactory_1.IEthTokenFactory;
    } });
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/adapters.js
var require_adapters = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/adapters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdapterL2 = exports.AdapterL1 = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var typechain_1 = require_typechain();
    var utils_12 = require_utils16();
    function AdapterL1(Base) {
      return class Adapter extends Base {
        _providerL2() {
          throw new Error("Must be implemented by the derived class!");
        }
        _providerL1() {
          throw new Error("Must be implemented by the derived class!");
        }
        _signerL1() {
          throw new Error("Must be implemented by the derived class!");
        }
        async getMainContract() {
          const address = await this._providerL2().getMainContractAddress();
          return typechain_1.IZkSyncFactory.connect(address, this._signerL1());
        }
        async getL1BridgeContracts() {
          const addresses = await this._providerL2().getDefaultBridgeAddresses();
          return {
            erc20: typechain_1.IL1BridgeFactory.connect(addresses.erc20L1, this._signerL1())
          };
        }
        async getBalanceL1(token, blockTag) {
          token !== null && token !== void 0 ? token : token = utils_12.ETH_ADDRESS;
          if ((0, utils_12.isETH)(token)) {
            return await this._providerL1().getBalance(await this.getAddress(), blockTag);
          } else {
            const erc20contract = typechain_1.IERC20MetadataFactory.connect(token, this._providerL1());
            return await erc20contract.balanceOf(await this.getAddress());
          }
        }
        async l2TokenAddress(token) {
          if (token == utils_12.ETH_ADDRESS) {
            return utils_12.ETH_ADDRESS;
          } else {
            const erc20Bridge = (await this.getL1BridgeContracts()).erc20;
            return await erc20Bridge.l2TokenAddress(token);
          }
        }
        async approveERC20(token, amount, overrides) {
          if ((0, utils_12.isETH)(token)) {
            throw new Error("ETH token can't be approved. The address of the token does not exist on L1.");
          }
          let bridgeAddress = overrides === null || overrides === void 0 ? void 0 : overrides.bridgeAddress;
          const erc20contract = typechain_1.IERC20MetadataFactory.connect(token, this._signerL1());
          if (bridgeAddress == null) {
            bridgeAddress = (await this._providerL2().getDefaultBridgeAddresses()).erc20L1;
          } else {
            delete overrides.bridgeAddress;
          }
          return await erc20contract.approve(bridgeAddress, amount, overrides);
        }
        async getBaseCost(params) {
          var _a, _b;
          const zksyncContract = await this.getMainContract();
          const parameters = { ...(0, utils_12.layer1TxDefaults)(), ...params };
          (_a = parameters.gasPrice) !== null && _a !== void 0 ? _a : parameters.gasPrice = await this._providerL1().getGasPrice();
          (_b = parameters.gasPerPubdataByte) !== null && _b !== void 0 ? _b : parameters.gasPerPubdataByte = utils_12.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;
          return ethers_1.BigNumber.from(await zksyncContract.l2TransactionBaseCost(parameters.gasPrice, parameters.gasLimit, parameters.gasPerPubdataByte));
        }
        async deposit(transaction) {
          var _a;
          const depositTx = await this.getDepositTx(transaction);
          if (transaction.token == utils_12.ETH_ADDRESS) {
            return this.requestExecute(depositTx);
          } else {
            const bridgeContracts = await this.getL1BridgeContracts();
            if (transaction.approveERC20) {
              const approveTx = await this.approveERC20(transaction.token, transaction.amount, {
                bridgeAddress: (_a = transaction.bridgeAddress) !== null && _a !== void 0 ? _a : bridgeContracts.erc20.address,
                ...transaction.approveOverrides
              });
              await approveTx.wait();
            }
            return await this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(depositTx));
          }
        }
        async estimateGasDeposit(transaction) {
          const depositTx = await this.getDepositTx(transaction);
          if (transaction.token == utils_12.ETH_ADDRESS) {
            return await this.estimateGasRequestExecute(depositTx);
          } else {
            return await this._providerL1().estimateGas(depositTx);
          }
        }
        async getDepositTx(transaction) {
          var _a, _b, _c, _d, _e, _f, _g;
          const bridgeContracts = await this.getL1BridgeContracts();
          if (transaction.bridgeAddress) {
            bridgeContracts.erc20.attach(transaction.bridgeAddress);
          }
          const { ...tx } = transaction;
          (_a = tx.to) !== null && _a !== void 0 ? _a : tx.to = await this.getAddress();
          (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : tx.operatorTip = ethers_1.BigNumber.from(0);
          (_c = tx.overrides) !== null && _c !== void 0 ? _c : tx.overrides = {};
          (_d = tx.gasPerPubdataByte) !== null && _d !== void 0 ? _d : tx.gasPerPubdataByte = utils_12.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;
          (_e = tx.l2GasLimit) !== null && _e !== void 0 ? _e : tx.l2GasLimit = await (0, utils_12.estimateDefaultBridgeDepositL2Gas)(this._providerL1(), this._providerL2(), tx.token, tx.amount, tx.to, await this.getAddress(), tx.gasPerPubdataByte);
          const { to, token, amount, operatorTip, overrides } = tx;
          await insertGasPrice(this._providerL1(), overrides);
          const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;
          const zksyncContract = await this.getMainContract();
          const baseCost = await zksyncContract.l2TransactionBaseCost(await gasPriceForEstimation, tx.l2GasLimit, tx.gasPerPubdataByte);
          if (token == utils_12.ETH_ADDRESS) {
            (_f = overrides.value) !== null && _f !== void 0 ? _f : overrides.value = baseCost.add(operatorTip).add(amount);
            return {
              contractAddress: to,
              calldata: "0x",
              l2Value: amount,
              // For some reason typescript can not deduce that we've already set the
              // tx.l2GasLimit
              l2GasLimit: tx.l2GasLimit,
              ...tx
            };
          } else {
            const args = [
              to,
              token,
              amount,
              tx.l2GasLimit,
              tx.gasPerPubdataByte
            ];
            (_g = overrides.value) !== null && _g !== void 0 ? _g : overrides.value = baseCost.add(operatorTip);
            await (0, utils_12.checkBaseCost)(baseCost, overrides.value);
            return await bridgeContracts.erc20.populateTransaction.deposit(...args, overrides);
          }
        }
        async _getWithdrawalLog(withdrawalHash, index = 0) {
          const hash3 = ethers_1.ethers.utils.hexlify(withdrawalHash);
          const receipt = await this._providerL2().getTransactionReceipt(hash3);
          const log = receipt.logs.filter((log2) => log2.address == utils_12.L1_MESSENGER_ADDRESS && log2.topics[0] == ethers_1.ethers.utils.id("L1MessageSent(address,bytes32,bytes)"))[index];
          return {
            log,
            l1BatchTxId: receipt.l1BatchTxIndex
          };
        }
        async _getWithdrawalL2ToL1Log(withdrawalHash, index = 0) {
          const hash3 = ethers_1.ethers.utils.hexlify(withdrawalHash);
          const receipt = await this._providerL2().getTransactionReceipt(hash3);
          const messages = Array.from(receipt.l2ToL1Logs.entries()).filter(([_, log]) => log.sender == utils_12.L1_MESSENGER_ADDRESS);
          const [l2ToL1LogIndex, l2ToL1Log] = messages[index];
          return {
            l2ToL1LogIndex,
            l2ToL1Log
          };
        }
        async finalizeWithdrawalParams(withdrawalHash, index = 0) {
          const { log, l1BatchTxId } = await this._getWithdrawalLog(withdrawalHash, index);
          const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);
          const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);
          const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);
          const message = ethers_1.ethers.utils.defaultAbiCoder.decode(["bytes"], log.data)[0];
          return {
            l1BatchNumber: log.l1BatchNumber,
            l2MessageIndex: proof.id,
            l2TxNumberInBlock: l1BatchTxId,
            message,
            sender,
            proof: proof.proof
          };
        }
        async finalizeWithdrawal(withdrawalHash, index = 0, overrides) {
          const { l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, sender, proof } = await this.finalizeWithdrawalParams(withdrawalHash, index);
          if ((0, utils_12.isETH)(sender)) {
            const contractAddress = await this._providerL2().getMainContractAddress();
            const zksync = typechain_1.IZkSyncFactory.connect(contractAddress, this._signerL1());
            return await zksync.finalizeEthWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});
          }
          const l2Bridge = typechain_1.IL2BridgeFactory.connect(sender, this._providerL2());
          const l1Bridge = typechain_1.IL1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._signerL1());
          return await l1Bridge.finalizeWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});
        }
        async isWithdrawalFinalized(withdrawalHash, index = 0) {
          const { log } = await this._getWithdrawalLog(withdrawalHash, index);
          const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);
          const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);
          const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);
          if ((0, utils_12.isETH)(sender)) {
            const contractAddress = await this._providerL2().getMainContractAddress();
            const zksync = typechain_1.IZkSyncFactory.connect(contractAddress, this._signerL1());
            return await zksync.isEthWithdrawalFinalized(log.l1BatchNumber, proof.id);
          }
          const l2Bridge = typechain_1.IL2BridgeFactory.connect(sender, this._providerL2());
          const l1Bridge = typechain_1.IL1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._providerL1());
          return await l1Bridge.isWithdrawalFinalized(log.l1BatchNumber, proof.id);
        }
        async claimFailedDeposit(depositHash, overrides) {
          const receipt = await this._providerL2().getTransactionReceipt(ethers_1.ethers.utils.hexlify(depositHash));
          const successL2ToL1LogIndex = receipt.l2ToL1Logs.findIndex((l2ToL1log) => l2ToL1log.sender == utils_12.BOOTLOADER_FORMAL_ADDRESS && l2ToL1log.key == depositHash);
          const successL2ToL1Log = receipt.l2ToL1Logs[successL2ToL1LogIndex];
          if (successL2ToL1Log.value != ethers_1.ethers.constants.HashZero) {
            throw new Error("Cannot claim successful deposit");
          }
          const tx = await this._providerL2().getTransaction(ethers_1.ethers.utils.hexlify(depositHash));
          const l1BridgeAddress = (0, utils_12.undoL1ToL2Alias)(receipt.from);
          const l2BridgeAddress = receipt.to;
          const l1Bridge = typechain_1.IL1BridgeFactory.connect(l1BridgeAddress, this._signerL1());
          const l2Bridge = typechain_1.IL2BridgeFactory.connect(l2BridgeAddress, this._providerL2());
          const calldata = l2Bridge.interface.decodeFunctionData("finalizeDeposit", tx.data);
          const proof = await this._providerL2().getLogProof(depositHash, successL2ToL1LogIndex);
          return await l1Bridge.claimFailedDeposit(calldata["_l1Sender"], calldata["_l1Token"], depositHash, receipt.l1BatchNumber, proof.id, receipt.l1BatchTxIndex, proof.proof, overrides !== null && overrides !== void 0 ? overrides : {});
        }
        async requestExecute(transaction) {
          const requestExecuteTx = await this.getRequestExecuteTx(transaction);
          return this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(requestExecuteTx));
        }
        async estimateGasRequestExecute(transaction) {
          const requestExecuteTx = await this.getRequestExecuteTx(transaction);
          return this._providerL1().estimateGas(requestExecuteTx);
        }
        async getRequestExecuteTx(transaction) {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          const zksyncContract = await this.getMainContract();
          const { ...tx } = transaction;
          (_a = tx.l2Value) !== null && _a !== void 0 ? _a : tx.l2Value = ethers_1.BigNumber.from(0);
          (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : tx.operatorTip = ethers_1.BigNumber.from(0);
          (_c = tx.factoryDeps) !== null && _c !== void 0 ? _c : tx.factoryDeps = [];
          (_d = tx.overrides) !== null && _d !== void 0 ? _d : tx.overrides = {};
          (_e = tx.gasPerPubdataByte) !== null && _e !== void 0 ? _e : tx.gasPerPubdataByte = utils_12.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;
          (_f = tx.refundRecipient) !== null && _f !== void 0 ? _f : tx.refundRecipient = await this.getAddress();
          (_g = tx.l2GasLimit) !== null && _g !== void 0 ? _g : tx.l2GasLimit = await this._providerL2().estimateL1ToL2Execute(transaction);
          const { contractAddress, l2Value, calldata, l2GasLimit, factoryDeps, operatorTip, overrides, gasPerPubdataByte, refundRecipient } = tx;
          await insertGasPrice(this._providerL1(), overrides);
          const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;
          const baseCost = await this.getBaseCost({
            gasPrice: await gasPriceForEstimation,
            gasPerPubdataByte,
            gasLimit: l2GasLimit
          });
          (_h = overrides.value) !== null && _h !== void 0 ? _h : overrides.value = baseCost.add(operatorTip).add(l2Value);
          await (0, utils_12.checkBaseCost)(baseCost, overrides.value);
          return await zksyncContract.populateTransaction.requestL2Transaction(contractAddress, l2Value, calldata, l2GasLimit, utils_12.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT, factoryDeps, refundRecipient, overrides);
        }
      };
    }
    exports.AdapterL1 = AdapterL1;
    function AdapterL2(Base) {
      return class Adapter extends Base {
        _providerL2() {
          throw new Error("Must be implemented by the derived class!");
        }
        _signerL2() {
          throw new Error("Must be implemented by the derived class!");
        }
        async getBalance(token, blockTag = "committed") {
          return await this._providerL2().getBalance(await this.getAddress(), blockTag, token);
        }
        async getAllBalances() {
          return await this._providerL2().getAllAccountBalances(await this.getAddress());
        }
        async getL2BridgeContracts() {
          const addresses = await this._providerL2().getDefaultBridgeAddresses();
          return {
            erc20: typechain_1.IL2BridgeFactory.connect(addresses.erc20L2, this._signerL2())
          };
        }
        _fillCustomData(data) {
          var _a, _b;
          const customData = { ...data };
          (_a = customData.gasPerPubdata) !== null && _a !== void 0 ? _a : customData.gasPerPubdata = utils_12.DEFAULT_GAS_PER_PUBDATA_LIMIT;
          (_b = customData.factoryDeps) !== null && _b !== void 0 ? _b : customData.factoryDeps = [];
          return customData;
        }
        async withdraw(transaction) {
          const withdrawTx = await this._providerL2().getWithdrawTx({
            from: await this.getAddress(),
            ...transaction
          });
          const txResponse = await this.sendTransaction(withdrawTx);
          return this._providerL2()._wrapTransaction(txResponse);
        }
        async transfer(transaction) {
          const transferTx = await this._providerL2().getTransferTx({
            from: await this.getAddress(),
            ...transaction
          });
          const txResponse = await this.sendTransaction(transferTx);
          return this._providerL2()._wrapTransaction(txResponse);
        }
      };
    }
    exports.AdapterL2 = AdapterL2;
    async function insertGasPrice(l1Provider, overrides) {
      if (!overrides.gasPrice && !overrides.maxFeePerGas) {
        const l1FeeData = await l1Provider.getFeeData();
        const baseFee = l1FeeData.lastBaseFeePerGas || l1FeeData.gasPrice;
        const maxFeePerGas = baseFee.mul(3).div(2).add(l1FeeData.maxPriorityFeePerGas);
        overrides.maxFeePerGas = maxFeePerGas;
        overrides.maxPriorityFeePerGas = l1FeeData.maxPriorityFeePerGas;
      }
    }
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/signer.js
var require_signer2 = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/signer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.L1Signer = exports.Signer = exports.EIP712Signer = exports.eip712Types = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var utils_12 = require_utils16();
    var hash_1 = (init_lib4(), __toCommonJS(lib_exports4));
    var adapters_1 = require_adapters();
    exports.eip712Types = {
      Transaction: [
        { name: "txType", type: "uint256" },
        { name: "from", type: "uint256" },
        { name: "to", type: "uint256" },
        { name: "gasLimit", type: "uint256" },
        { name: "gasPerPubdataByteLimit", type: "uint256" },
        { name: "maxFeePerGas", type: "uint256" },
        { name: "maxPriorityFeePerGas", type: "uint256" },
        { name: "paymaster", type: "uint256" },
        { name: "nonce", type: "uint256" },
        { name: "value", type: "uint256" },
        { name: "data", type: "bytes" },
        { name: "factoryDeps", type: "bytes32[]" },
        { name: "paymasterInput", type: "bytes" }
      ]
    };
    var EIP712Signer = class _EIP712Signer {
      constructor(ethSigner, chainId) {
        this.ethSigner = ethSigner;
        this.eip712Domain = Promise.resolve(chainId).then((chainId2) => ({
          name: "zkSync",
          version: "2",
          chainId: chainId2
        }));
      }
      static getSignInput(transaction) {
        var _a, _b, _c, _d, _e, _f, _g;
        const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice;
        const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;
        const gasPerPubdataByteLimit = ((_a = transaction.customData) === null || _a === void 0 ? void 0 : _a.gasPerPubdata) || utils_12.DEFAULT_GAS_PER_PUBDATA_LIMIT;
        const signInput = {
          txType: transaction.type,
          from: transaction.from,
          to: transaction.to,
          gasLimit: transaction.gasLimit,
          gasPerPubdataByteLimit,
          maxFeePerGas,
          maxPriorityFeePerGas,
          paymaster: ((_c = (_b = transaction.customData) === null || _b === void 0 ? void 0 : _b.paymasterParams) === null || _c === void 0 ? void 0 : _c.paymaster) || ethers_1.ethers.constants.AddressZero,
          nonce: transaction.nonce,
          value: transaction.value,
          data: transaction.data,
          factoryDeps: ((_e = (_d = transaction.customData) === null || _d === void 0 ? void 0 : _d.factoryDeps) === null || _e === void 0 ? void 0 : _e.map((dep) => (0, utils_12.hashBytecode)(dep))) || [],
          paymasterInput: ((_g = (_f = transaction.customData) === null || _f === void 0 ? void 0 : _f.paymasterParams) === null || _g === void 0 ? void 0 : _g.paymasterInput) || "0x"
        };
        return signInput;
      }
      async sign(transaction) {
        return await this.ethSigner._signTypedData(await this.eip712Domain, exports.eip712Types, _EIP712Signer.getSignInput(transaction));
      }
      static getSignedDigest(transaction) {
        if (!transaction.chainId) {
          throw Error("Transaction chainId isn't set");
        }
        const domain = {
          name: "zkSync",
          version: "2",
          chainId: transaction.chainId
        };
        return hash_1._TypedDataEncoder.hash(domain, exports.eip712Types, _EIP712Signer.getSignInput(transaction));
      }
    };
    exports.EIP712Signer = EIP712Signer;
    var Signer2 = class _Signer extends (0, adapters_1.AdapterL2)(ethers_1.ethers.providers.JsonRpcSigner) {
      _signerL2() {
        return this;
      }
      _providerL2() {
        return this.provider;
      }
      static from(signer) {
        const newSigner = Object.setPrototypeOf(signer, _Signer.prototype);
        newSigner.eip712 = new EIP712Signer(newSigner, newSigner.getChainId());
        return newSigner;
      }
      // an alias with a better name
      async getNonce(blockTag) {
        return await this.getTransactionCount(blockTag);
      }
      async sendTransaction(transaction) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (transaction.customData == null && transaction.type == null) {
          transaction.type = 0;
        }
        if (transaction.customData == null && transaction.type != utils_12.EIP712_TX_TYPE) {
          return await super.sendTransaction(transaction);
        } else {
          const address = await this.getAddress();
          (_a = transaction.from) !== null && _a !== void 0 ? _a : transaction.from = address;
          if (transaction.from.toLowerCase() != address.toLowerCase()) {
            throw new Error("Transaction `from` address mismatch");
          }
          transaction.type = utils_12.EIP712_TX_TYPE;
          (_b = transaction.value) !== null && _b !== void 0 ? _b : transaction.value = 0;
          (_c = transaction.data) !== null && _c !== void 0 ? _c : transaction.data = "0x";
          (_d = transaction.nonce) !== null && _d !== void 0 ? _d : transaction.nonce = await this.getNonce();
          transaction.customData = this._fillCustomData(transaction.customData);
          (_e = transaction.gasPrice) !== null && _e !== void 0 ? _e : transaction.gasPrice = await this.provider.getGasPrice();
          (_f = transaction.gasLimit) !== null && _f !== void 0 ? _f : transaction.gasLimit = await this.provider.estimateGas(transaction);
          (_g = transaction.chainId) !== null && _g !== void 0 ? _g : transaction.chainId = (await this.provider.getNetwork()).chainId;
          transaction.customData.customSignature = await this.eip712.sign(transaction);
          const txBytes = (0, utils_12.serialize)(transaction);
          return await this.provider.sendTransaction(txBytes);
        }
      }
    };
    exports.Signer = Signer2;
    var L1Signer = class _L1Signer extends (0, adapters_1.AdapterL1)(ethers_1.ethers.providers.JsonRpcSigner) {
      _providerL2() {
        return this.providerL2;
      }
      _providerL1() {
        return this.provider;
      }
      _signerL1() {
        return this;
      }
      static from(signer, zksyncProvider) {
        const newSigner = Object.setPrototypeOf(signer, _L1Signer.prototype);
        newSigner.providerL2 = zksyncProvider;
        return newSigner;
      }
      connectToL2(provider) {
        this.providerL2 = provider;
        return this;
      }
    };
    exports.L1Signer = L1Signer;
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IPaymasterFlow.json
var require_IPaymasterFlow = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IPaymasterFlow.json"(exports, module) {
    module.exports = {
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_minAllowance",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "_innerInput",
              type: "bytes"
            }
          ],
          name: "approvalBased",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "input",
              type: "bytes"
            }
          ],
          name: "general",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/paymaster-utils.js
var require_paymaster_utils = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/paymaster-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPaymasterParams = exports.getGeneralPaymasterInput = exports.getApprovalBasedPaymasterInput = exports.IPaymasterFlow = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    exports.IPaymasterFlow = new ethers_1.ethers.utils.Interface(require_IPaymasterFlow().abi);
    function getApprovalBasedPaymasterInput(paymasterInput) {
      return exports.IPaymasterFlow.encodeFunctionData("approvalBased", [
        paymasterInput.token,
        paymasterInput.minimalAllowance,
        paymasterInput.innerInput
      ]);
    }
    exports.getApprovalBasedPaymasterInput = getApprovalBasedPaymasterInput;
    function getGeneralPaymasterInput(paymasterInput) {
      return exports.IPaymasterFlow.encodeFunctionData("general", [paymasterInput.innerInput]);
    }
    exports.getGeneralPaymasterInput = getGeneralPaymasterInput;
    function getPaymasterParams(paymasterAddress, paymasterInput) {
      if (paymasterInput.type == "General") {
        return {
          paymaster: paymasterAddress,
          paymasterInput: getGeneralPaymasterInput(paymasterInput)
        };
      } else {
        return {
          paymaster: paymasterAddress,
          paymasterInput: getApprovalBasedPaymasterInput(paymasterInput)
        };
      }
    }
    exports.getPaymasterParams = getPaymasterParams;
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IZkSync.json
var require_IZkSync = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IZkSync.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "blockNumber",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "blockHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "commitment",
              type: "bytes32"
            }
          ],
          name: "BlockCommit",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "blockNumber",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "blockHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "commitment",
              type: "bytes32"
            }
          ],
          name: "BlockExecution",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "totalBlocksCommitted",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "totalBlocksVerified",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "totalBlocksExecuted",
              type: "uint256"
            }
          ],
          name: "BlocksRevert",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "previousLastVerifiedBlock",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "currentLastVerifiedBlock",
              type: "uint256"
            }
          ],
          name: "BlocksVerification",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "proposalHash",
              type: "bytes32"
            }
          ],
          name: "CancelUpgradeProposal",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "EthWithdrawalFinalized",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "proposalHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "proposalSalt",
              type: "bytes32"
            }
          ],
          name: "ExecuteUpgrade",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [],
          name: "Freeze",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bool",
              name: "isPorterAvailable",
              type: "bool"
            }
          ],
          name: "IsPorterAvailableStatusUpdate",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "oldGovernor",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "newGovernor",
              type: "address"
            }
          ],
          name: "NewGovernor",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "previousBytecodeHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "newBytecodeHash",
              type: "bytes32"
            }
          ],
          name: "NewL2BootloaderBytecodeHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "previousBytecodeHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "newBytecodeHash",
              type: "bytes32"
            }
          ],
          name: "NewL2DefaultAccountBytecodeHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "oldPendingGovernor",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "newPendingGovernor",
              type: "address"
            }
          ],
          name: "NewPendingGovernor",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "txId",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint64",
              name: "expirationTimestamp",
              type: "uint64"
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "txType",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "from",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "to",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "gasLimit",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "gasPerPubdataByteLimit",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "maxFeePerGas",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "maxPriorityFeePerGas",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "paymaster",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "value",
                  type: "uint256"
                },
                {
                  internalType: "uint256[4]",
                  name: "reserved",
                  type: "uint256[4]"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes"
                },
                {
                  internalType: "uint256[]",
                  name: "factoryDeps",
                  type: "uint256[]"
                },
                {
                  internalType: "bytes",
                  name: "paymasterInput",
                  type: "bytes"
                },
                {
                  internalType: "bytes",
                  name: "reservedDynamic",
                  type: "bytes"
                }
              ],
              indexed: false,
              internalType: "struct IMailbox.L2CanonicalTransaction",
              name: "transaction",
              type: "tuple"
            },
            {
              indexed: false,
              internalType: "bytes[]",
              name: "factoryDeps",
              type: "bytes[]"
            }
          ],
          name: "NewPriorityRequest",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "oldPriorityTxMaxGasLimit",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "newPriorityTxMaxGasLimit",
              type: "uint256"
            }
          ],
          name: "NewPriorityTxMaxGasLimit",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "oldVerifier",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "newVerifier",
              type: "address"
            }
          ],
          name: "NewVerifier",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "recursionNodeLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionLeafLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionCircuitsSetVksHash",
                  type: "bytes32"
                }
              ],
              indexed: false,
              internalType: "struct VerifierParams",
              name: "oldVerifierParams",
              type: "tuple"
            },
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "recursionNodeLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionLeafLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionCircuitsSetVksHash",
                  type: "bytes32"
                }
              ],
              indexed: false,
              internalType: "struct VerifierParams",
              name: "newVerifierParams",
              type: "tuple"
            }
          ],
          name: "NewVerifierParams",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "proposalHash",
              type: "bytes32"
            }
          ],
          name: "ProposeShadowUpgrade",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "facet",
                      type: "address"
                    },
                    {
                      internalType: "enum Diamond.Action",
                      name: "action",
                      type: "uint8"
                    },
                    {
                      internalType: "bool",
                      name: "isFreezable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes4[]",
                      name: "selectors",
                      type: "bytes4[]"
                    }
                  ],
                  internalType: "struct Diamond.FacetCut[]",
                  name: "facetCuts",
                  type: "tuple[]"
                },
                {
                  internalType: "address",
                  name: "initAddress",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "initCalldata",
                  type: "bytes"
                }
              ],
              indexed: false,
              internalType: "struct Diamond.DiamondCutData",
              name: "diamondCut",
              type: "tuple"
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "proposalSalt",
              type: "bytes32"
            }
          ],
          name: "ProposeTransparentUpgrade",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "proposalHash",
              type: "bytes32"
            }
          ],
          name: "SecurityCouncilUpgradeApprove",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [],
          name: "Unfreeze",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "validatorAddress",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bool",
              name: "isActive",
              type: "bool"
            }
          ],
          name: "ValidatorStatusUpdate",
          type: "event"
        },
        {
          inputs: [],
          name: "acceptGovernor",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_proposedUpgradeHash",
              type: "bytes32"
            }
          ],
          name: "cancelUpgradeProposal",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "blockHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "commitment",
                  type: "bytes32"
                }
              ],
              internalType: "struct IExecutor.StoredBlockInfo",
              name: "_lastCommittedBlockData",
              type: "tuple"
            },
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "timestamp",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "newStateRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes",
                  name: "initialStorageChanges",
                  type: "bytes"
                },
                {
                  internalType: "bytes",
                  name: "repeatedStorageChanges",
                  type: "bytes"
                },
                {
                  internalType: "bytes",
                  name: "l2Logs",
                  type: "bytes"
                },
                {
                  internalType: "bytes[]",
                  name: "l2ArbitraryLengthMessages",
                  type: "bytes[]"
                },
                {
                  internalType: "bytes[]",
                  name: "factoryDeps",
                  type: "bytes[]"
                }
              ],
              internalType: "struct IExecutor.CommitBlockInfo[]",
              name: "_newBlocksData",
              type: "tuple[]"
            }
          ],
          name: "commitBlocks",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "blockHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "commitment",
                  type: "bytes32"
                }
              ],
              internalType: "struct IExecutor.StoredBlockInfo[]",
              name: "_blocksData",
              type: "tuple[]"
            }
          ],
          name: "executeBlocks",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "facet",
                      type: "address"
                    },
                    {
                      internalType: "enum Diamond.Action",
                      name: "action",
                      type: "uint8"
                    },
                    {
                      internalType: "bool",
                      name: "isFreezable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes4[]",
                      name: "selectors",
                      type: "bytes4[]"
                    }
                  ],
                  internalType: "struct Diamond.FacetCut[]",
                  name: "facetCuts",
                  type: "tuple[]"
                },
                {
                  internalType: "address",
                  name: "initAddress",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "initCalldata",
                  type: "bytes"
                }
              ],
              internalType: "struct Diamond.DiamondCutData",
              name: "_diamondCut",
              type: "tuple"
            },
            {
              internalType: "bytes32",
              name: "_proposalSalt",
              type: "bytes32"
            }
          ],
          name: "executeUpgrade",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4"
            }
          ],
          name: "facetAddress",
          outputs: [
            {
              internalType: "address",
              name: "facet",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "facetAddresses",
          outputs: [
            {
              internalType: "address[]",
              name: "facets",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_facet",
              type: "address"
            }
          ],
          name: "facetFunctionSelectors",
          outputs: [
            {
              internalType: "bytes4[]",
              name: "",
              type: "bytes4[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "facets",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "addr",
                  type: "address"
                },
                {
                  internalType: "bytes4[]",
                  name: "selectors",
                  type: "bytes4[]"
                }
              ],
              internalType: "struct IGetters.Facet[]",
              name: "",
              type: "tuple[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            },
            {
              internalType: "uint16",
              name: "_l2TxNumberInBlock",
              type: "uint16"
            },
            {
              internalType: "bytes",
              name: "_message",
              type: "bytes"
            },
            {
              internalType: "bytes32[]",
              name: "_merkleProof",
              type: "bytes32[]"
            }
          ],
          name: "finalizeEthWithdrawal",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "freezeDiamond",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getCurrentProposalId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getFirstUnprocessedPriorityTx",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getGovernor",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getL2BootloaderBytecodeHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getL2DefaultAccountBytecodeHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getPendingGovernor",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getPriorityQueueSize",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getProposedUpgradeHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getProposedUpgradeTimestamp",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getSecurityCouncil",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getTotalBlocksCommitted",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getTotalBlocksExecuted",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getTotalBlocksVerified",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getTotalPriorityTxs",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getUpgradeProposalState",
          outputs: [
            {
              internalType: "enum UpgradeState",
              name: "",
              type: "uint8"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getVerifier",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getVerifierParams",
          outputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "recursionNodeLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionLeafLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionCircuitsSetVksHash",
                  type: "bytes32"
                }
              ],
              internalType: "struct VerifierParams",
              name: "",
              type: "tuple"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getpriorityTxMaxGasLimit",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "isApprovedBySecurityCouncil",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "isDiamondStorageFrozen",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            }
          ],
          name: "isEthWithdrawalFinalized",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_facet",
              type: "address"
            }
          ],
          name: "isFacetFreezable",
          outputs: [
            {
              internalType: "bool",
              name: "isFreezable",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4"
            }
          ],
          name: "isFunctionFreezable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address"
            }
          ],
          name: "isValidator",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_blockNumber",
              type: "uint256"
            }
          ],
          name: "l2LogsRootHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_gasPrice",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2GasLimit",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2GasPerPubdataByteLimit",
              type: "uint256"
            }
          ],
          name: "l2TransactionBaseCost",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "priorityQueueFrontOperation",
          outputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "canonicalTxHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "expirationTimestamp",
                  type: "uint64"
                },
                {
                  internalType: "uint192",
                  name: "layer2Tip",
                  type: "uint192"
                }
              ],
              internalType: "struct PriorityOperation",
              name: "",
              type: "tuple"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_proposalHash",
              type: "bytes32"
            },
            {
              internalType: "uint40",
              name: "_proposalId",
              type: "uint40"
            }
          ],
          name: "proposeShadowUpgrade",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "facet",
                      type: "address"
                    },
                    {
                      internalType: "enum Diamond.Action",
                      name: "action",
                      type: "uint8"
                    },
                    {
                      internalType: "bool",
                      name: "isFreezable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes4[]",
                      name: "selectors",
                      type: "bytes4[]"
                    }
                  ],
                  internalType: "struct Diamond.FacetCut[]",
                  name: "facetCuts",
                  type: "tuple[]"
                },
                {
                  internalType: "address",
                  name: "initAddress",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "initCalldata",
                  type: "bytes"
                }
              ],
              internalType: "struct Diamond.DiamondCutData",
              name: "_diamondCut",
              type: "tuple"
            },
            {
              internalType: "uint40",
              name: "_proposalId",
              type: "uint40"
            }
          ],
          name: "proposeTransparentUpgrade",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "blockHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "commitment",
                  type: "bytes32"
                }
              ],
              internalType: "struct IExecutor.StoredBlockInfo",
              name: "_prevBlock",
              type: "tuple"
            },
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "blockHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "commitment",
                  type: "bytes32"
                }
              ],
              internalType: "struct IExecutor.StoredBlockInfo[]",
              name: "_committedBlocks",
              type: "tuple[]"
            },
            {
              components: [
                {
                  internalType: "uint256[]",
                  name: "recursiveAggregationInput",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "serializedProof",
                  type: "uint256[]"
                }
              ],
              internalType: "struct IExecutor.ProofInput",
              name: "_proof",
              type: "tuple"
            }
          ],
          name: "proveBlocks",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_l2TxHash",
              type: "bytes32"
            },
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            },
            {
              internalType: "uint16",
              name: "_l2TxNumberInBlock",
              type: "uint16"
            },
            {
              internalType: "bytes32[]",
              name: "_merkleProof",
              type: "bytes32[]"
            },
            {
              internalType: "enum TxStatus",
              name: "_status",
              type: "uint8"
            }
          ],
          name: "proveL1ToL2TransactionStatus",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_blockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_index",
              type: "uint256"
            },
            {
              components: [
                {
                  internalType: "uint8",
                  name: "l2ShardId",
                  type: "uint8"
                },
                {
                  internalType: "bool",
                  name: "isService",
                  type: "bool"
                },
                {
                  internalType: "uint16",
                  name: "txNumberInBlock",
                  type: "uint16"
                },
                {
                  internalType: "address",
                  name: "sender",
                  type: "address"
                },
                {
                  internalType: "bytes32",
                  name: "key",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "value",
                  type: "bytes32"
                }
              ],
              internalType: "struct L2Log",
              name: "_log",
              type: "tuple"
            },
            {
              internalType: "bytes32[]",
              name: "_proof",
              type: "bytes32[]"
            }
          ],
          name: "proveL2LogInclusion",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_blockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_index",
              type: "uint256"
            },
            {
              components: [
                {
                  internalType: "uint16",
                  name: "txNumberInBlock",
                  type: "uint16"
                },
                {
                  internalType: "address",
                  name: "sender",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ],
              internalType: "struct L2Message",
              name: "_message",
              type: "tuple"
            },
            {
              internalType: "bytes32[]",
              name: "_proof",
              type: "bytes32[]"
            }
          ],
          name: "proveL2MessageInclusion",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_contractL2",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_l2Value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "_calldata",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "_l2GasLimit",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2GasPerPubdataByteLimit",
              type: "uint256"
            },
            {
              internalType: "bytes[]",
              name: "_factoryDeps",
              type: "bytes[]"
            },
            {
              internalType: "address",
              name: "_refundRecipient",
              type: "address"
            }
          ],
          name: "requestL2Transaction",
          outputs: [
            {
              internalType: "bytes32",
              name: "canonicalTxHash",
              type: "bytes32"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_newLastBlock",
              type: "uint256"
            }
          ],
          name: "revertBlocks",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_upgradeProposalHash",
              type: "bytes32"
            }
          ],
          name: "securityCouncilUpgradeApprove",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_l2BootloaderBytecodeHash",
              type: "bytes32"
            }
          ],
          name: "setL2BootloaderBytecodeHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_l2DefaultAccountBytecodeHash",
              type: "bytes32"
            }
          ],
          name: "setL2DefaultAccountBytecodeHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_newPendingGovernor",
              type: "address"
            }
          ],
          name: "setPendingGovernor",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bool",
              name: "_zkPorterIsAvailable",
              type: "bool"
            }
          ],
          name: "setPorterAvailability",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_newPriorityTxMaxGasLimit",
              type: "uint256"
            }
          ],
          name: "setPriorityTxMaxGasLimit",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_validator",
              type: "address"
            },
            {
              internalType: "bool",
              name: "_active",
              type: "bool"
            }
          ],
          name: "setValidator",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract Verifier",
              name: "_newVerifier",
              type: "address"
            }
          ],
          name: "setVerifier",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "recursionNodeLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionLeafLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionCircuitsSetVksHash",
                  type: "bytes32"
                }
              ],
              internalType: "struct VerifierParams",
              name: "_newVerifierParams",
              type: "tuple"
            }
          ],
          name: "setVerifierParams",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_blockNumber",
              type: "uint256"
            }
          ],
          name: "storedBlockHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "unfreezeDiamond",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "facet",
                      type: "address"
                    },
                    {
                      internalType: "enum Diamond.Action",
                      name: "action",
                      type: "uint8"
                    },
                    {
                      internalType: "bool",
                      name: "isFreezable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes4[]",
                      name: "selectors",
                      type: "bytes4[]"
                    }
                  ],
                  internalType: "struct Diamond.FacetCut[]",
                  name: "facetCuts",
                  type: "tuple[]"
                },
                {
                  internalType: "address",
                  name: "initAddress",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "initCalldata",
                  type: "bytes"
                }
              ],
              internalType: "struct Diamond.DiamondCutData",
              name: "_diamondCut",
              type: "tuple"
            },
            {
              internalType: "uint256",
              name: "_proposalId",
              type: "uint256"
            },
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            }
          ],
          name: "upgradeProposalHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/ContractDeployer.json
var require_ContractDeployer = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/ContractDeployer.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "accountAddress",
              type: "address"
            },
            {
              indexed: false,
              internalType: "enum IContractDeployer.AccountNonceOrdering",
              name: "nonceOrdering",
              type: "uint8"
            }
          ],
          name: "AccountNonceOrderingUpdated",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "accountAddress",
              type: "address"
            },
            {
              indexed: false,
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "aaVersion",
              type: "uint8"
            }
          ],
          name: "AccountVersionUpdated",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "deployerAddress",
              type: "address"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "bytecodeHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "contractAddress",
              type: "address"
            }
          ],
          name: "ContractDeployed",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            }
          ],
          name: "create",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            }
          ],
          name: "create2",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            },
            {
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "_aaVersion",
              type: "uint8"
            }
          ],
          name: "create2Account",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            },
            {
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "_aaVersion",
              type: "uint8"
            }
          ],
          name: "createAccount",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address"
            }
          ],
          name: "extendedAccountVersion",
          outputs: [
            {
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "",
              type: "uint8"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "bytecodeHash",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "newAddress",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "callConstructor",
                  type: "bool"
                },
                {
                  internalType: "uint256",
                  name: "value",
                  type: "uint256"
                },
                {
                  internalType: "bytes",
                  name: "input",
                  type: "bytes"
                }
              ],
              internalType: "struct ContractDeployer.ForceDeployment",
              name: "_deployment",
              type: "tuple"
            },
            {
              internalType: "address",
              name: "_sender",
              type: "address"
            }
          ],
          name: "forceDeployOnAddress",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "bytecodeHash",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "newAddress",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "callConstructor",
                  type: "bool"
                },
                {
                  internalType: "uint256",
                  name: "value",
                  type: "uint256"
                },
                {
                  internalType: "bytes",
                  name: "input",
                  type: "bytes"
                }
              ],
              internalType: "struct ContractDeployer.ForceDeployment[]",
              name: "_deployments",
              type: "tuple[]"
            }
          ],
          name: "forceDeployOnAddresses",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address"
            }
          ],
          name: "getAccountInfo",
          outputs: [
            {
              components: [
                {
                  internalType: "enum IContractDeployer.AccountAbstractionVersion",
                  name: "supportedAAVersion",
                  type: "uint8"
                },
                {
                  internalType: "enum IContractDeployer.AccountNonceOrdering",
                  name: "nonceOrdering",
                  type: "uint8"
                }
              ],
              internalType: "struct IContractDeployer.AccountInfo",
              name: "info",
              type: "tuple"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_sender",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_senderNonce",
              type: "uint256"
            }
          ],
          name: "getNewAddressCreate",
          outputs: [
            {
              internalType: "address",
              name: "newAddress",
              type: "address"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_sender",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            }
          ],
          name: "getNewAddressCreate2",
          outputs: [
            {
              internalType: "address",
              name: "newAddress",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "_version",
              type: "uint8"
            }
          ],
          name: "updateAccountVersion",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "enum IContractDeployer.AccountNonceOrdering",
              name: "_nonceOrdering",
              type: "uint8"
            }
          ],
          name: "updateNonceOrdering",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IL1Messenger.json
var require_IL1Messenger = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IL1Messenger.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "_sender",
              type: "address"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "_hash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "_message",
              type: "bytes"
            }
          ],
          name: "L1MessageSent",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_message",
              type: "bytes"
            }
          ],
          name: "sendToL1",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IERC20.json
var require_IERC20 = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IERC20.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "spender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "Approval",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "Transfer",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "address",
              name: "spender",
              type: "address"
            }
          ],
          name: "allowance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "approve",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address"
            }
          ],
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "decimals",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "name",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "symbol",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "totalSupply",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "transfer",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "transferFrom",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IERC1271.json
var require_IERC1271 = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IERC1271.json"(exports, module) {
    module.exports = {
      abi: [
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "magicValue",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IL1Bridge.json
var require_IL1Bridge = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IL1Bridge.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l1Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "ClaimedFailedDeposit",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l1Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "DepositInitiated",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l1Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "WithdrawalFinalized",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_depositSender",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "_l2TxHash",
              type: "bytes32"
            },
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            },
            {
              internalType: "uint16",
              name: "_l2TxNumberInBlock",
              type: "uint16"
            },
            {
              internalType: "bytes32[]",
              name: "_merkleProof",
              type: "bytes32[]"
            }
          ],
          name: "claimFailedDeposit",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l2Receiver",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_amount",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2TxGasLimit",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2TxGasPerPubdataByte",
              type: "uint256"
            }
          ],
          name: "deposit",
          outputs: [
            {
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            },
            {
              internalType: "uint16",
              name: "_l2TxNumberInBlock",
              type: "uint16"
            },
            {
              internalType: "bytes",
              name: "_message",
              type: "bytes"
            },
            {
              internalType: "bytes32[]",
              name: "_merkleProof",
              type: "bytes32[]"
            }
          ],
          name: "finalizeWithdrawal",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            }
          ],
          name: "isWithdrawalFinalized",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            }
          ],
          name: "l2TokenAddress",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IL2Bridge.json
var require_IL2Bridge = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/abi/IL2Bridge.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "l1Sender",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l2Receiver",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l2Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "FinalizeDeposit",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "l2Sender",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l1Receiver",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l2Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "WithdrawalInitiated",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l1Sender",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l2Receiver",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_amount",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "finalizeDeposit",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "l1Bridge",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l2Token",
              type: "address"
            }
          ],
          name: "l1TokenAddress",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            }
          ],
          name: "l2TokenAddress",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l1Receiver",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l2Token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_amount",
              type: "uint256"
            }
          ],
          name: "withdraw",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/utils.js
var require_utils16 = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.estimateDefaultBridgeDepositL2Gas = exports.isTypedDataSignatureCorrect = exports.isMessageSignatureCorrect = exports.getERC20BridgeCalldata = exports.undoL1ToL2Alias = exports.applyL1ToL2Alias = exports.getL2HashFromPriorityOp = exports.parseTransaction = exports.hashBytecode = exports.serialize = exports.checkBaseCost = exports.createAddress = exports.create2Address = exports.getDeployedContracts = exports.getHashedL2ToL1Msg = exports.layer1TxDefaults = exports.sleep = exports.isETH = exports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = exports.DEFAULT_GAS_PER_PUBDATA_LIMIT = exports.MAX_BYTECODE_LEN_BYTES = exports.PRIORITY_OPERATION_L2_TX_TYPE = exports.EIP712_TX_TYPE = exports.EIP1271_MAGIC_VALUE = exports.L1_TO_L2_ALIAS_OFFSET = exports.L2_ETH_TOKEN_ADDRESS = exports.L1_MESSENGER_ADDRESS = exports.CONTRACT_DEPLOYER_ADDRESS = exports.BOOTLOADER_FORMAL_ADDRESS = exports.L2_BRIDGE_ABI = exports.L1_BRIDGE_ABI = exports.IERC1271 = exports.IERC20 = exports.L1_MESSENGER = exports.CONTRACT_DEPLOYER = exports.ZKSYNC_MAIN_ABI = exports.ETH_ADDRESS = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var types_1 = require_types5();
    var signer_1 = require_signer2();
    var typechain_1 = require_typechain();
    var utils_12 = require_utils();
    __exportStar(require_paymaster_utils(), exports);
    exports.ETH_ADDRESS = "0x0000000000000000000000000000000000000000";
    exports.ZKSYNC_MAIN_ABI = new ethers_1.utils.Interface(require_IZkSync().abi);
    exports.CONTRACT_DEPLOYER = new ethers_1.utils.Interface(require_ContractDeployer().abi);
    exports.L1_MESSENGER = new ethers_1.utils.Interface(require_IL1Messenger().abi);
    exports.IERC20 = new ethers_1.utils.Interface(require_IERC20().abi);
    exports.IERC1271 = new ethers_1.utils.Interface(require_IERC1271().abi);
    exports.L1_BRIDGE_ABI = new ethers_1.utils.Interface(require_IL1Bridge().abi);
    exports.L2_BRIDGE_ABI = new ethers_1.utils.Interface(require_IL2Bridge().abi);
    exports.BOOTLOADER_FORMAL_ADDRESS = "0x0000000000000000000000000000000000008001";
    exports.CONTRACT_DEPLOYER_ADDRESS = "0x0000000000000000000000000000000000008006";
    exports.L1_MESSENGER_ADDRESS = "0x0000000000000000000000000000000000008008";
    exports.L2_ETH_TOKEN_ADDRESS = "0x000000000000000000000000000000000000800a";
    exports.L1_TO_L2_ALIAS_OFFSET = "0x1111000000000000000000000000000000001111";
    exports.EIP1271_MAGIC_VALUE = "0x1626ba7e";
    exports.EIP712_TX_TYPE = 113;
    exports.PRIORITY_OPERATION_L2_TX_TYPE = 255;
    exports.MAX_BYTECODE_LEN_BYTES = ((1 << 16) - 1) * 32;
    exports.DEFAULT_GAS_PER_PUBDATA_LIMIT = 5e4;
    exports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = 800;
    function isETH(token) {
      return token.toLowerCase() == exports.ETH_ADDRESS || token.toLowerCase() == exports.L2_ETH_TOKEN_ADDRESS;
    }
    exports.isETH = isETH;
    function sleep(millis) {
      return new Promise((resolve) => setTimeout(resolve, millis));
    }
    exports.sleep = sleep;
    function layer1TxDefaults() {
      return {
        queueType: types_1.PriorityQueueType.Deque,
        opTree: types_1.PriorityOpTree.Full
      };
    }
    exports.layer1TxDefaults = layer1TxDefaults;
    function getHashedL2ToL1Msg(sender, msg, txNumberInBlock) {
      const encodedMsg = new Uint8Array([
        0,
        1,
        ...ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(txNumberInBlock), 2),
        ...ethers_1.ethers.utils.arrayify(exports.L1_MESSENGER_ADDRESS),
        ...ethers_1.ethers.utils.zeroPad(sender, 32),
        ...ethers_1.ethers.utils.arrayify(ethers_1.ethers.utils.keccak256(msg))
      ]);
      return ethers_1.ethers.utils.keccak256(encodedMsg);
    }
    exports.getHashedL2ToL1Msg = getHashedL2ToL1Msg;
    function getDeployedContracts(receipt) {
      const addressBytesLen = 40;
      const deployedContracts = receipt.logs.filter((log) => log.topics[0] == ethers_1.utils.id("ContractDeployed(address,bytes32,address)") && log.address == exports.CONTRACT_DEPLOYER_ADDRESS).map((log) => {
        const sender = `0x${log.topics[1].slice(log.topics[1].length - addressBytesLen)}`;
        const bytesCodehash = log.topics[2];
        const address = `0x${log.topics[3].slice(log.topics[3].length - addressBytesLen)}`;
        return {
          sender: ethers_1.utils.getAddress(sender),
          bytecodeHash: bytesCodehash,
          deployedAddress: ethers_1.utils.getAddress(address)
        };
      });
      return deployedContracts;
    }
    exports.getDeployedContracts = getDeployedContracts;
    function create2Address(sender, bytecodeHash, salt, input) {
      const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes("zksyncCreate2"));
      const inputHash = ethers_1.ethers.utils.keccak256(input);
      const addressBytes = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.concat([prefix, ethers_1.ethers.utils.zeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26);
      return ethers_1.ethers.utils.getAddress(addressBytes);
    }
    exports.create2Address = create2Address;
    function createAddress(sender, senderNonce) {
      const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes("zksyncCreate"));
      const addressBytes = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.concat([
        prefix,
        ethers_1.ethers.utils.zeroPad(sender, 32),
        ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(senderNonce), 32)
      ])).slice(26);
      return ethers_1.ethers.utils.getAddress(addressBytes);
    }
    exports.createAddress = createAddress;
    async function checkBaseCost(baseCost, value) {
      if (baseCost.gt(await value)) {
        throw new Error(`The base cost of performing the priority operation is higher than the provided value parameter for the transaction: baseCost: ${baseCost}, provided value: ${value}`);
      }
    }
    exports.checkBaseCost = checkBaseCost;
    function serialize3(transaction, signature2) {
      var _a;
      if (transaction.customData == null && transaction.type != exports.EIP712_TX_TYPE) {
        return ethers_1.utils.serializeTransaction(transaction, signature2);
      }
      if (!transaction.chainId) {
        throw Error("Transaction chainId isn't set");
      }
      function formatNumber(value, name) {
        const result = ethers_1.utils.stripZeros(ethers_1.BigNumber.from(value).toHexString());
        if (result.length > 32) {
          throw new Error("invalid length for " + name);
        }
        return result;
      }
      if (!transaction.from) {
        throw new Error("Explicitly providing `from` field is reqiured for EIP712 transactions");
      }
      const from = transaction.from;
      const meta = transaction.customData;
      let maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;
      let maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;
      const fields = [
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(maxPriorityFeePerGas, "maxPriorityFeePerGas"),
        formatNumber(maxFeePerGas, "maxFeePerGas"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        transaction.to != null ? ethers_1.utils.getAddress(transaction.to) : "0x",
        formatNumber(transaction.value || 0, "value"),
        transaction.data || "0x"
      ];
      if (signature2) {
        const sig = ethers_1.utils.splitSignature(signature2);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push(ethers_1.utils.stripZeros(sig.r));
        fields.push(ethers_1.utils.stripZeros(sig.s));
      } else {
        fields.push(formatNumber(transaction.chainId, "chainId"));
        fields.push("0x");
        fields.push("0x");
      }
      fields.push(formatNumber(transaction.chainId, "chainId"));
      fields.push(ethers_1.utils.getAddress(from));
      fields.push(formatNumber(meta.gasPerPubdata || exports.DEFAULT_GAS_PER_PUBDATA_LIMIT, "gasPerPubdata"));
      fields.push(((_a = meta.factoryDeps) !== null && _a !== void 0 ? _a : []).map((dep) => ethers_1.utils.hexlify(dep)));
      if (meta.customSignature && ethers_1.ethers.utils.arrayify(meta.customSignature).length == 0) {
        throw new Error("Empty signatures are not supported");
      }
      fields.push(meta.customSignature || "0x");
      if (meta.paymasterParams) {
        fields.push([meta.paymasterParams.paymaster, ethers_1.ethers.utils.hexlify(meta.paymasterParams.paymasterInput)]);
      } else {
        fields.push([]);
      }
      return ethers_1.utils.hexConcat([[exports.EIP712_TX_TYPE], ethers_1.utils.RLP.encode(fields)]);
    }
    exports.serialize = serialize3;
    function hashBytecode(bytecode) {
      const bytecodeAsArray = ethers_1.ethers.utils.arrayify(bytecode);
      if (bytecodeAsArray.length % 32 != 0) {
        throw new Error("The bytecode length in bytes must be divisible by 32");
      }
      if (bytecodeAsArray.length > exports.MAX_BYTECODE_LEN_BYTES) {
        throw new Error(`Bytecode can not be longer than ${exports.MAX_BYTECODE_LEN_BYTES} bytes`);
      }
      const hashStr = ethers_1.ethers.utils.sha256(bytecodeAsArray);
      const hash3 = ethers_1.ethers.utils.arrayify(hashStr);
      const bytecodeLengthInWords = bytecodeAsArray.length / 32;
      if (bytecodeLengthInWords % 2 == 0) {
        throw new Error("Bytecode length in 32-byte words must be odd");
      }
      const bytecodeLength = ethers_1.ethers.utils.arrayify(bytecodeLengthInWords);
      const bytecodeLengthPadded = ethers_1.ethers.utils.zeroPad(bytecodeLength, 2);
      const codeHashVersion = new Uint8Array([1, 0]);
      hash3.set(codeHashVersion, 0);
      hash3.set(bytecodeLengthPadded, 2);
      return hash3;
    }
    exports.hashBytecode = hashBytecode;
    function parseTransaction(payload) {
      function handleAddress(value) {
        if (value === "0x") {
          return null;
        }
        return ethers_1.utils.getAddress(value);
      }
      function handleNumber(value) {
        if (value === "0x") {
          return ethers_1.BigNumber.from(0);
        }
        return ethers_1.BigNumber.from(value);
      }
      function arrayToPaymasterParams(arr) {
        if (arr.length == 0) {
          return void 0;
        }
        if (arr.length != 2) {
          throw new Error(`Invalid paymaster parameters, expected to have length of 2, found ${arr.length}`);
        }
        return {
          paymaster: ethers_1.utils.getAddress(arr[0]),
          paymasterInput: ethers_1.utils.arrayify(arr[1])
        };
      }
      const bytes = ethers_1.utils.arrayify(payload);
      if (bytes[0] != exports.EIP712_TX_TYPE) {
        return ethers_1.utils.parseTransaction(bytes);
      }
      const raw = ethers_1.utils.RLP.decode(bytes.slice(1));
      const transaction = {
        type: exports.EIP712_TX_TYPE,
        nonce: handleNumber(raw[0]).toNumber(),
        maxPriorityFeePerGas: handleNumber(raw[1]),
        maxFeePerGas: handleNumber(raw[2]),
        gasLimit: handleNumber(raw[3]),
        to: handleAddress(raw[4]),
        value: handleNumber(raw[5]),
        data: raw[6],
        chainId: handleNumber(raw[10]),
        from: handleAddress(raw[11]),
        customData: {
          gasPerPubdata: handleNumber(raw[12]),
          factoryDeps: raw[13],
          customSignature: raw[14],
          paymasterParams: arrayToPaymasterParams(raw[15])
        }
      };
      const ethSignature = {
        v: handleNumber(raw[7]).toNumber(),
        r: raw[8],
        s: raw[9]
      };
      if ((ethers_1.utils.hexlify(ethSignature.r) == "0x" || ethers_1.utils.hexlify(ethSignature.s) == "0x") && !transaction.customData.customSignature) {
        return transaction;
      }
      if (ethSignature.v !== 0 && ethSignature.v !== 1 && !transaction.customData.customSignature) {
        throw new Error("Failed to parse signature");
      }
      if (!transaction.customData.customSignature) {
        transaction.v = ethSignature.v;
        transaction.s = ethSignature.s;
        transaction.r = ethSignature.r;
      }
      transaction.hash = eip712TxHash(transaction, ethSignature);
      return transaction;
    }
    exports.parseTransaction = parseTransaction;
    function getSignature(transaction, ethSignature) {
      var _a;
      if (((_a = transaction === null || transaction === void 0 ? void 0 : transaction.customData) === null || _a === void 0 ? void 0 : _a.customSignature) && transaction.customData.customSignature.length) {
        return ethers_1.ethers.utils.arrayify(transaction.customData.customSignature);
      }
      if (!ethSignature) {
        throw new Error("No signature provided");
      }
      const r = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.r), 32);
      const s = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.s), 32);
      const v = ethSignature.v;
      return new Uint8Array([...r, ...s, v]);
    }
    function eip712TxHash(transaction, ethSignature) {
      const signedDigest = signer_1.EIP712Signer.getSignedDigest(transaction);
      const hashedSignature = ethers_1.ethers.utils.keccak256(getSignature(transaction, ethSignature));
      return ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.hexConcat([signedDigest, hashedSignature]));
    }
    function getL2HashFromPriorityOp(txReceipt, zkSyncAddress) {
      let txHash = null;
      for (const log of txReceipt.logs) {
        if (log.address.toLowerCase() != zkSyncAddress.toLowerCase()) {
          continue;
        }
        try {
          const priorityQueueLog = exports.ZKSYNC_MAIN_ABI.parseLog(log);
          if (priorityQueueLog && priorityQueueLog.args.txHash != null) {
            txHash = priorityQueueLog.args.txHash;
          }
        } catch {
        }
      }
      if (!txHash) {
        throw new Error("Failed to parse tx logs");
      }
      return txHash;
    }
    exports.getL2HashFromPriorityOp = getL2HashFromPriorityOp;
    var ADDRESS_MODULO = ethers_1.BigNumber.from(2).pow(160);
    function applyL1ToL2Alias(address) {
      return ethers_1.ethers.utils.hexlify(ethers_1.ethers.BigNumber.from(address).add(exports.L1_TO_L2_ALIAS_OFFSET).mod(ADDRESS_MODULO));
    }
    exports.applyL1ToL2Alias = applyL1ToL2Alias;
    function undoL1ToL2Alias(address) {
      let result = ethers_1.ethers.BigNumber.from(address).sub(exports.L1_TO_L2_ALIAS_OFFSET);
      if (result.lt(ethers_1.BigNumber.from(0))) {
        result = result.add(ADDRESS_MODULO);
      }
      return ethers_1.ethers.utils.hexlify(result);
    }
    exports.undoL1ToL2Alias = undoL1ToL2Alias;
    async function getERC20GettersData(l1TokenAddress, provider) {
      const token = typechain_1.IERC20MetadataFactory.connect(l1TokenAddress, provider);
      const name = await token.name();
      const symbol = await token.symbol();
      const decimals = await token.decimals();
      const coder = new utils_12.AbiCoder();
      const nameBytes = coder.encode(["string"], [name]);
      const symbolBytes = coder.encode(["string"], [symbol]);
      const decimalsBytes = coder.encode(["uint256"], [decimals]);
      return coder.encode(["bytes", "bytes", "bytes"], [nameBytes, symbolBytes, decimalsBytes]);
    }
    async function getERC20BridgeCalldata(l1TokenAddress, l1Sender, l2Receiver, amount, provider) {
      const gettersData = await getERC20GettersData(l1TokenAddress, provider);
      return exports.L2_BRIDGE_ABI.encodeFunctionData("finalizeDeposit", [
        l1Sender,
        l2Receiver,
        l1TokenAddress,
        amount,
        gettersData
      ]);
    }
    exports.getERC20BridgeCalldata = getERC20BridgeCalldata;
    function isECDSASignatureCorrect(address, msgHash, signature2) {
      try {
        return address == ethers_1.ethers.utils.recoverAddress(msgHash, signature2);
      } catch {
        return false;
      }
    }
    async function isEIP1271SignatureCorrect(provider, address, msgHash, signature2) {
      const accountContract = new ethers_1.ethers.Contract(address, exports.IERC1271, provider);
      const result = await accountContract.isValidSignature(msgHash, signature2);
      return result == exports.EIP1271_MAGIC_VALUE;
    }
    async function isSignatureCorrect(provider, address, msgHash, signature2) {
      let isContractAccount = false;
      const code = await provider.getCode(address);
      isContractAccount = ethers_1.ethers.utils.arrayify(code).length != 0;
      if (!isContractAccount) {
        return isECDSASignatureCorrect(address, msgHash, signature2);
      } else {
        return await isEIP1271SignatureCorrect(provider, address, msgHash, signature2);
      }
    }
    async function isMessageSignatureCorrect(provider, address, message, signature2) {
      const msgHash = ethers_1.ethers.utils.hashMessage(message);
      return await isSignatureCorrect(provider, address, msgHash, signature2);
    }
    exports.isMessageSignatureCorrect = isMessageSignatureCorrect;
    async function isTypedDataSignatureCorrect(provider, address, domain, types, value, signature2) {
      const msgHash = ethers_1.ethers.utils._TypedDataEncoder.hash(domain, types, value);
      return await isSignatureCorrect(provider, address, msgHash, signature2);
    }
    exports.isTypedDataSignatureCorrect = isTypedDataSignatureCorrect;
    async function estimateDefaultBridgeDepositL2Gas(providerL1, providerL2, token, amount, to, from, gasPerPubdataByte) {
      from !== null && from !== void 0 ? from : from = ethers_1.ethers.Wallet.createRandom().address;
      if (token == exports.ETH_ADDRESS) {
        return await providerL2.estimateL1ToL2Execute({
          contractAddress: to,
          gasPerPubdataByte,
          caller: from,
          calldata: "0x",
          l2Value: amount
        });
      } else {
        const l1ERC20BridgeAddresses = (await providerL2.getDefaultBridgeAddresses()).erc20L1;
        const erc20BridgeAddress = (await providerL2.getDefaultBridgeAddresses()).erc20L2;
        const calldata = await getERC20BridgeCalldata(token, from, to, amount, providerL1);
        return await providerL2.estimateL1ToL2Execute({
          caller: applyL1ToL2Alias(l1ERC20BridgeAddresses),
          contractAddress: erc20BridgeAddress,
          gasPerPubdataByte,
          calldata
        });
      }
    }
    exports.estimateDefaultBridgeDepositL2Gas = estimateDefaultBridgeDepositL2Gas;
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/wallet.js
var require_wallet = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/wallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wallet = void 0;
    var signer_1 = require_signer2();
    var utils_12 = require_utils16();
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var adapters_1 = require_adapters();
    var Wallet2 = class _Wallet extends (0, adapters_1.AdapterL2)((0, adapters_1.AdapterL1)(ethers_1.ethers.Wallet)) {
      _providerL1() {
        if (this.providerL1 == null) {
          throw new Error("L1 provider missing: use `connectToL1` to specify");
        }
        return this.providerL1;
      }
      _providerL2() {
        return this.provider;
      }
      _signerL1() {
        return this.ethWallet();
      }
      _signerL2() {
        return this;
      }
      ethWallet() {
        return new ethers_1.ethers.Wallet(this._signingKey(), this._providerL1());
      }
      // an alias with a better name
      async getNonce(blockTag) {
        return await this.getTransactionCount(blockTag);
      }
      connect(provider) {
        return new _Wallet(this._signingKey(), provider, this.providerL1);
      }
      connectToL1(provider) {
        return new _Wallet(this._signingKey(), this.provider, provider);
      }
      static fromMnemonic(mnemonic, path, wordlist2) {
        const wallet = super.fromMnemonic(mnemonic, path, wordlist2);
        return new _Wallet(wallet._signingKey());
      }
      static async fromEncryptedJson(json, password, callback) {
        const wallet = await super.fromEncryptedJson(json, password, callback);
        return new _Wallet(wallet._signingKey());
      }
      static fromEncryptedJsonSync(json, password) {
        const wallet = super.fromEncryptedJsonSync(json, password);
        return new _Wallet(wallet._signingKey());
      }
      static createRandom(options) {
        const wallet = super.createRandom(options);
        return new _Wallet(wallet._signingKey());
      }
      constructor(privateKey, providerL2, providerL1) {
        super(privateKey, providerL2);
        if (this.provider != null) {
          const chainId = this.getChainId();
          this.eip712 = new signer_1.EIP712Signer(this, chainId);
        }
        this.providerL1 = providerL1;
      }
      async populateTransaction(transaction) {
        var _a, _b;
        if (transaction.type == null && transaction.customData == null) {
          transaction.type = 0;
        }
        transaction = await super.populateTransaction(transaction);
        if (transaction.customData == null && transaction.type != utils_12.EIP712_TX_TYPE) {
          return transaction;
        }
        transaction.type = utils_12.EIP712_TX_TYPE;
        (_a = transaction.value) !== null && _a !== void 0 ? _a : transaction.value = 0;
        (_b = transaction.data) !== null && _b !== void 0 ? _b : transaction.data = "0x";
        transaction.customData = this._fillCustomData(transaction.customData);
        transaction.gasPrice = await this.provider.getGasPrice();
        return transaction;
      }
      async signTransaction(transaction) {
        var _a;
        if (transaction.customData == null && transaction.type != utils_12.EIP712_TX_TYPE) {
          if (transaction.type == 2 && transaction.maxFeePerGas == null) {
            transaction.maxFeePerGas = await this.provider.getGasPrice();
          }
          return await super.signTransaction(transaction);
        } else {
          (_a = transaction.from) !== null && _a !== void 0 ? _a : transaction.from = this.address;
          if (transaction.from.toLowerCase() != this.address.toLowerCase()) {
            throw new Error("Transaction `from` address mismatch");
          }
          transaction.customData.customSignature = await this.eip712.sign(transaction);
          return (0, utils_12.serialize)(transaction);
        }
      }
      async sendTransaction(transaction) {
        return await super.sendTransaction(transaction);
      }
    };
    exports.Wallet = Wallet2;
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/provider.js
var require_provider2 = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Web3Provider = exports.Provider = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var Formatter2 = ethers_1.providers.Formatter;
    var web_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var typechain_1 = require_typechain();
    var types_1 = require_types5();
    var utils_12 = require_utils16();
    var signer_1 = require_signer2();
    var defaultFormatter2 = null;
    var Provider2 = class _Provider extends ethers_1.ethers.providers.JsonRpcProvider {
      async getTransactionReceipt(transactionHash) {
        await this.getNetwork();
        transactionHash = await transactionHash;
        const params = { transactionHash: this.formatter.hash(transactionHash, true) };
        return (0, web_1.poll)(async () => {
          const result = await this.perform("getTransactionReceipt", params);
          if (result == null) {
            if (this._emitted["t:" + transactionHash] == null) {
              return null;
            }
            return void 0;
          }
          if (result.blockNumber == null && result.status != null && ethers_1.BigNumber.from(result.status).isZero()) {
            return {
              ...this.formatter.receipt({
                ...result,
                confirmations: 1,
                blockNumber: 0,
                blockHash: ethers_1.ethers.constants.HashZero
              }),
              blockNumber: null,
              blockHash: null,
              l1BatchNumber: null,
              l1BatchTxIndex: null
            };
          }
          if (result.blockHash == null) {
            return void 0;
          } else {
            const receipt = this.formatter.receipt(result);
            if (receipt.blockNumber == null) {
              receipt.confirmations = 0;
            } else if (receipt.confirmations == null) {
              const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              let confirmations = blockNumber - receipt.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              receipt.confirmations = confirmations;
            }
            return receipt;
          }
        }, { oncePoll: this });
      }
      async getBlock(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, false);
      }
      async getBlockWithTransactions(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, true);
      }
      static getFormatter() {
        if (defaultFormatter2 == null) {
          defaultFormatter2 = new Formatter2();
          const number = defaultFormatter2.number.bind(defaultFormatter2);
          const boolean = defaultFormatter2.boolean.bind(defaultFormatter2);
          const hash3 = defaultFormatter2.hash.bind(defaultFormatter2);
          const address = defaultFormatter2.address.bind(defaultFormatter2);
          defaultFormatter2.formats.receiptLog.l1BatchNumber = Formatter2.allowNull(number);
          defaultFormatter2.formats.l2Tol1Log = {
            blockNumber: number,
            blockHash: hash3,
            l1BatchNumber: Formatter2.allowNull(number),
            transactionIndex: number,
            shardId: number,
            isService: boolean,
            sender: address,
            key: hash3,
            value: hash3,
            transactionHash: hash3,
            logIndex: number
          };
          defaultFormatter2.formats.receipt.l1BatchNumber = Formatter2.allowNull(number);
          defaultFormatter2.formats.receipt.l1BatchTxIndex = Formatter2.allowNull(number);
          defaultFormatter2.formats.receipt.l2ToL1Logs = Formatter2.arrayOf((value) => Formatter2.check(defaultFormatter2.formats.l2Tol1Log, value));
          defaultFormatter2.formats.block.l1BatchNumber = Formatter2.allowNull(number);
          defaultFormatter2.formats.block.l1BatchTimestamp = Formatter2.allowNull(number);
          defaultFormatter2.formats.blockWithTransactions.l1BatchNumber = Formatter2.allowNull(number);
          defaultFormatter2.formats.blockWithTransactions.l1BatchTimestamp = Formatter2.allowNull(number);
          defaultFormatter2.formats.transaction.l1BatchNumber = Formatter2.allowNull(number);
          defaultFormatter2.formats.transaction.l1BatchTxIndex = Formatter2.allowNull(number);
          defaultFormatter2.formats.filterLog.l1BatchNumber = Formatter2.allowNull(number);
        }
        return defaultFormatter2;
      }
      async getBalance(address, blockTag, tokenAddress) {
        const tag = this.formatter.blockTag(blockTag);
        if (tokenAddress == null || (0, utils_12.isETH)(tokenAddress)) {
          return await super.getBalance(address, tag);
        } else {
          try {
            let token = typechain_1.IERC20MetadataFactory.connect(tokenAddress, this);
            return await token.balanceOf(address, { blockTag: tag });
          } catch {
            return ethers_1.BigNumber.from(0);
          }
        }
      }
      async l2TokenAddress(token) {
        if (token == utils_12.ETH_ADDRESS) {
          return utils_12.ETH_ADDRESS;
        } else {
          const erc20BridgeAddress = (await this.getDefaultBridgeAddresses()).erc20L2;
          const erc20Bridge = typechain_1.IL2BridgeFactory.connect(erc20BridgeAddress, this);
          return await erc20Bridge.l2TokenAddress(token);
        }
      }
      async l1TokenAddress(token) {
        if (token == utils_12.ETH_ADDRESS) {
          return utils_12.ETH_ADDRESS;
        } else {
          const erc20BridgeAddress = (await this.getDefaultBridgeAddresses()).erc20L2;
          const erc20Bridge = typechain_1.IL2BridgeFactory.connect(erc20BridgeAddress, this);
          return await erc20Bridge.l1TokenAddress(token);
        }
      }
      // This function is used when formatting requests for
      // eth_call and eth_estimateGas. We override it here
      // because we have extra stuff to serialize (customData).
      // This function is for internal use only.
      static hexlifyTransaction(transaction, allowExtra) {
        var _a;
        const result = ethers_1.ethers.providers.JsonRpcProvider.hexlifyTransaction(transaction, {
          ...allowExtra,
          customData: true,
          from: true
        });
        if (transaction.customData == null) {
          return result;
        }
        result.eip712Meta = {
          gasPerPubdata: ethers_1.utils.hexValue((_a = transaction.customData.gasPerPubdata) !== null && _a !== void 0 ? _a : 0)
        };
        transaction.type = utils_12.EIP712_TX_TYPE;
        if (transaction.customData.factoryDeps) {
          result.eip712Meta.factoryDeps = transaction.customData.factoryDeps.map((dep) => (
            // TODO (SMA-1605): we arraify instead of hexlifying because server expects Vec<u8>.
            //  We should change deserialization there.
            Array.from(ethers_1.utils.arrayify(dep))
          ));
        }
        if (transaction.customData.paymasterParams) {
          result.eip712Meta.paymasterParams = {
            paymaster: ethers_1.utils.hexlify(transaction.customData.paymasterParams.paymaster),
            paymasterInput: Array.from(ethers_1.utils.arrayify(transaction.customData.paymasterParams.paymasterInput))
          };
        }
        return result;
      }
      async estimateGas(transaction) {
        await this.getNetwork();
        const params = await ethers_1.utils.resolveProperties({
          transaction: this._getTransactionRequest(transaction)
        });
        if (transaction.customData != null) {
          params.transaction.customData = transaction.customData;
        }
        const result = await this.perform("estimateGas", params);
        try {
          return ethers_1.BigNumber.from(result);
        } catch (error) {
          throw new Error(`bad result from backend (estimateGas): ${result}`);
        }
      }
      async estimateGasL1(transaction) {
        await this.getNetwork();
        const params = await ethers_1.utils.resolveProperties({
          transaction: this._getTransactionRequest(transaction)
        });
        if (transaction.customData != null) {
          params.transaction.customData = transaction.customData;
        }
        const result = await this.send("zks_estimateGasL1ToL2", [
          _Provider.hexlifyTransaction(params.transaction, { from: true })
        ]);
        try {
          return ethers_1.BigNumber.from(result);
        } catch (error) {
          throw new Error(`bad result from backend (zks_estimateGasL1ToL2): ${result}`);
        }
      }
      async getGasPrice(token) {
        const params = token ? [token] : [];
        const price = await this.send("eth_gasPrice", params);
        return ethers_1.BigNumber.from(price);
      }
      constructor(url, network) {
        super(url, network);
        this.pollingInterval = 500;
        const blockTag = this.formatter.blockTag.bind(this.formatter);
        this.formatter.blockTag = (tag) => {
          if (tag == "committed" || tag == "finalized") {
            return tag;
          }
          return blockTag(tag);
        };
        this.contractAddresses = {};
        this.formatter.transaction = utils_12.parseTransaction;
      }
      async getMessageProof(blockNumber, sender, messageHash, logIndex) {
        return await this.send("zks_getL2ToL1MsgProof", [
          ethers_1.BigNumber.from(blockNumber).toNumber(),
          sender,
          ethers_1.ethers.utils.hexlify(messageHash),
          logIndex
        ]);
      }
      async getLogProof(txHash, index) {
        return await this.send("zks_getL2ToL1LogProof", [ethers_1.ethers.utils.hexlify(txHash), index]);
      }
      async getL1BatchBlockRange(l1BatchNumber) {
        const range = await this.send("zks_getL1BatchBlockRange", [l1BatchNumber]);
        if (range == null) {
          return null;
        }
        return [parseInt(range[0], 16), parseInt(range[1], 16)];
      }
      async getMainContractAddress() {
        if (!this.contractAddresses.mainContract) {
          this.contractAddresses.mainContract = await this.send("zks_getMainContract", []);
        }
        return this.contractAddresses.mainContract;
      }
      async getTestnetPaymasterAddress() {
        return await this.send("zks_getTestnetPaymaster", []);
      }
      async getDefaultBridgeAddresses() {
        if (!this.contractAddresses.erc20BridgeL1) {
          let addresses = await this.send("zks_getBridgeContracts", []);
          this.contractAddresses.erc20BridgeL1 = addresses.l1Erc20DefaultBridge;
          this.contractAddresses.erc20BridgeL2 = addresses.l2Erc20DefaultBridge;
        }
        return {
          erc20L1: this.contractAddresses.erc20BridgeL1,
          erc20L2: this.contractAddresses.erc20BridgeL2
        };
      }
      async getConfirmedTokens(start = 0, limit = 255) {
        const tokens = await this.send("zks_getConfirmedTokens", [start, limit]);
        return tokens.map((token) => ({ address: token.l2Address, ...token }));
      }
      async getTokenPrice(token) {
        return await this.send("zks_getTokenPrice", [token]);
      }
      async getAllAccountBalances(address) {
        let balances = await this.send("zks_getAllAccountBalances", [address]);
        for (let token in balances) {
          balances[token] = ethers_1.BigNumber.from(balances[token]);
        }
        return balances;
      }
      async l1ChainId() {
        const res = await this.send("zks_L1ChainId", []);
        return ethers_1.BigNumber.from(res).toNumber();
      }
      async getL1BatchNumber() {
        const number = await this.send("zks_L1BatchNumber", []);
        return ethers_1.BigNumber.from(number).toNumber();
      }
      async getL1BatchDetails(number) {
        return await this.send("zks_getL1BatchDetails", [number]);
      }
      async getBlockDetails(number) {
        return await this.send("zks_getBlockDetails", [number]);
      }
      async getTransactionDetails(txHash) {
        return await this.send("zks_getTransactionDetails", [txHash]);
      }
      async getWithdrawTx(transaction) {
        var _a, _b, _c;
        var _d;
        const { ...tx } = transaction;
        if (tx.to == null && tx.from == null) {
          throw new Error("withdrawal target address is undefined");
        }
        (_a = tx.to) !== null && _a !== void 0 ? _a : tx.to = tx.from;
        (_b = tx.overrides) !== null && _b !== void 0 ? _b : tx.overrides = {};
        (_c = (_d = tx.overrides).from) !== null && _c !== void 0 ? _c : _d.from = tx.from;
        if ((0, utils_12.isETH)(tx.token)) {
          if (!tx.overrides.value) {
            tx.overrides.value = tx.amount;
          }
          const passedValue = ethers_1.BigNumber.from(tx.overrides.value);
          if (!passedValue.eq(tx.amount)) {
            throw new Error("The tx.value is not equal to the value withdrawn");
          }
          const ethL2Token = typechain_1.IEthTokenFactory.connect(utils_12.L2_ETH_TOKEN_ADDRESS, this);
          return ethL2Token.populateTransaction.withdraw(tx.to, tx.overrides);
        }
        if (tx.bridgeAddress == null) {
          const bridges = await this.getDefaultBridgeAddresses();
          tx.bridgeAddress = bridges.erc20L2;
        }
        const bridge = typechain_1.IL2BridgeFactory.connect(tx.bridgeAddress, this);
        return bridge.populateTransaction.withdraw(tx.to, tx.token, tx.amount, tx.overrides);
      }
      async estimateGasWithdraw(transaction) {
        const withdrawTx = await this.getWithdrawTx(transaction);
        return await this.estimateGas(withdrawTx);
      }
      async getTransferTx(transaction) {
        var _a, _b;
        var _c;
        const { ...tx } = transaction;
        (_a = tx.overrides) !== null && _a !== void 0 ? _a : tx.overrides = {};
        (_b = (_c = tx.overrides).from) !== null && _b !== void 0 ? _b : _c.from = tx.from;
        if (tx.token == null || tx.token == utils_12.ETH_ADDRESS) {
          return {
            ...await ethers_1.ethers.utils.resolveProperties(tx.overrides),
            to: tx.to,
            value: tx.amount
          };
        } else {
          const token = typechain_1.IERC20MetadataFactory.connect(tx.token, this);
          return await token.populateTransaction.transfer(tx.to, tx.amount, tx.overrides);
        }
      }
      async estimateGasTransfer(transaction) {
        const transferTx = await this.getTransferTx(transaction);
        return await this.estimateGas(transferTx);
      }
      static getDefaultProvider() {
        return new _Provider(process.env.ZKSYNC_WEB3_API_URL || "http://localhost:3050");
      }
      async newFilter(filter) {
        filter = await filter;
        const id2 = await this.send("eth_newFilter", [this._prepareFilter(filter)]);
        return ethers_1.BigNumber.from(id2);
      }
      async newBlockFilter() {
        const id2 = await this.send("eth_newBlockFilter", []);
        return ethers_1.BigNumber.from(id2);
      }
      async newPendingTransactionsFilter() {
        const id2 = await this.send("eth_newPendingTransactionFilter", []);
        return ethers_1.BigNumber.from(id2);
      }
      async getFilterChanges(idx) {
        const logs = await this.send("eth_getFilterChanges", [idx.toHexString()]);
        return typeof logs[0] === "string" ? logs : this._parseLogs(logs);
      }
      async getLogs(filter = {}) {
        filter = await filter;
        const logs = await this.send("eth_getLogs", [this._prepareFilter(filter)]);
        return this._parseLogs(logs);
      }
      _parseLogs(logs) {
        return Formatter2.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
      }
      _prepareFilter(filter) {
        return {
          ...filter,
          fromBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.fromBlock),
          toBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.toBlock)
        };
      }
      _wrapTransaction(tx, hash3) {
        const response = super._wrapTransaction(tx, hash3);
        response.waitFinalize = async () => {
          const receipt = await response.wait();
          while (true) {
            const block = await this.getBlock("finalized");
            if (receipt.blockNumber <= block.number) {
              return await this.getTransactionReceipt(receipt.transactionHash);
            } else {
              await (0, utils_12.sleep)(this.pollingInterval);
            }
          }
        };
        return response;
      }
      // This is inefficient. Status should probably be indicated in the transaction receipt.
      async getTransactionStatus(txHash) {
        const tx = await this.getTransaction(txHash);
        if (tx == null) {
          return types_1.TransactionStatus.NotFound;
        }
        if (tx.blockNumber == null) {
          return types_1.TransactionStatus.Processing;
        }
        const verifiedBlock = await this.getBlock("finalized");
        if (tx.blockNumber <= verifiedBlock.number) {
          return types_1.TransactionStatus.Finalized;
        }
        return types_1.TransactionStatus.Committed;
      }
      async getTransaction(hash3) {
        hash3 = await hash3;
        const tx = await super.getTransaction(hash3);
        return tx ? this._wrapTransaction(tx, hash3) : null;
      }
      async sendTransaction(transaction) {
        return await super.sendTransaction(transaction);
      }
      async getL2TransactionFromPriorityOp(l1TxResponse) {
        const receipt = await l1TxResponse.wait();
        const l2Hash = (0, utils_12.getL2HashFromPriorityOp)(receipt, await this.getMainContractAddress());
        let status = null;
        do {
          status = await this.getTransactionStatus(l2Hash);
          await (0, utils_12.sleep)(this.pollingInterval);
        } while (status == types_1.TransactionStatus.NotFound);
        return await this.getTransaction(l2Hash);
      }
      async getPriorityOpResponse(l1TxResponse) {
        const l2Response = { ...l1TxResponse };
        l2Response.waitL1Commit = l2Response.wait;
        l2Response.wait = async () => {
          const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);
          return await l2Tx.wait();
        };
        l2Response.waitFinalize = async () => {
          const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);
          return await l2Tx.waitFinalize();
        };
        return l2Response;
      }
      async getContractAccountInfo(address) {
        const deployerContract = new ethers_1.Contract(utils_12.CONTRACT_DEPLOYER_ADDRESS, utils_12.CONTRACT_DEPLOYER, this);
        const data = await deployerContract.getAccountInfo(address);
        return {
          supportedAAVersion: data.supportedAAVersion,
          nonceOrdering: data.nonceOrdering
        };
      }
      // TODO (EVM-3): support refundRecipient for fee estimation
      async estimateL1ToL2Execute(transaction) {
        var _a, _b;
        (_a = transaction.gasPerPubdataByte) !== null && _a !== void 0 ? _a : transaction.gasPerPubdataByte = utils_12.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;
        (_b = transaction.caller) !== null && _b !== void 0 ? _b : transaction.caller = ethers_1.ethers.Wallet.createRandom().address;
        const customData = {
          gasPerPubdataByte: transaction.gasPerPubdataByte
        };
        if (transaction.factoryDeps) {
          Object.assign(customData, { factoryDeps: transaction.factoryDeps });
        }
        const fee = await this.estimateGasL1({
          from: transaction.caller,
          data: transaction.calldata,
          to: transaction.contractAddress,
          value: transaction.l2Value,
          customData
        });
        return fee;
      }
    };
    exports.Provider = Provider2;
    var Web3Provider2 = class extends Provider2 {
      constructor(provider, network) {
        if (provider == null) {
          throw new Error("missing provider");
        }
        if (!provider.request) {
          throw new Error("provider must implement eip-1193");
        }
        let path = provider.host || provider.path || (provider.isMetaMask ? "metamask" : "eip-1193:");
        super(path, network);
        this.provider = provider;
      }
      async send(method, params) {
        params !== null && params !== void 0 ? params : params = [];
        if (method == "eth_sign" && (this.provider.isMetaMask || this.provider.isStatus)) {
          method = "personal_sign";
          params = [params[1], params[0]];
        }
        return await this.provider.request({ method, params });
      }
      getSigner(addressOrIndex) {
        return signer_1.Signer.from(super.getSigner(addressOrIndex));
      }
      async estimateGas(transaction) {
        const gas = await super.estimateGas(transaction);
        const metamaskMinimum = ethers_1.BigNumber.from(21e3);
        const isEIP712 = transaction.customData != null || transaction.type == utils_12.EIP712_TX_TYPE;
        return gas.gt(metamaskMinimum) || isEIP712 ? gas : metamaskMinimum;
      }
    };
    exports.Web3Provider = Web3Provider2;
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/contract.js
var require_contract = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContractFactory = exports.Contract = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var utils_12 = require_utils16();
    var types_1 = require_types5();
    var ethers_2 = (init_lib9(), __toCommonJS(lib_exports9));
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return ethers_2.Contract;
    } });
    var ContractFactory2 = class extends ethers_1.ethers.ContractFactory {
      constructor(abi, bytecode, signer, deploymentType) {
        super(abi, bytecode, signer);
        this.deploymentType = deploymentType || "create";
      }
      encodeCalldata(salt, bytecodeHash, constructorCalldata) {
        if (this.deploymentType == "create") {
          return utils_12.CONTRACT_DEPLOYER.encodeFunctionData("create", [salt, bytecodeHash, constructorCalldata]);
        } else if (this.deploymentType == "createAccount") {
          return utils_12.CONTRACT_DEPLOYER.encodeFunctionData("createAccount", [
            salt,
            bytecodeHash,
            constructorCalldata,
            types_1.AccountAbstractionVersion.Version1
          ]);
        } else {
          throw new Error(`Unsupported deployment type ${this.deploymentType}`);
        }
      }
      getDeployTransaction(...args) {
        var _a, _b, _c;
        var _d, _e;
        let salt = "0x0000000000000000000000000000000000000000000000000000000000000000";
        const txRequest = super.getDeployTransaction(...args);
        if (this.interface.deploy.inputs.length + 1 == args.length) {
          args.pop();
        }
        const bytecodeHash = (0, utils_12.hashBytecode)(this.bytecode);
        const constructorCalldata = ethers_1.utils.arrayify(this.interface.encodeDeploy(args));
        const deployCalldata = this.encodeCalldata(salt, bytecodeHash, constructorCalldata);
        txRequest.type = utils_12.EIP712_TX_TYPE;
        txRequest.to = utils_12.CONTRACT_DEPLOYER_ADDRESS;
        txRequest.data = deployCalldata;
        (_a = txRequest.customData) !== null && _a !== void 0 ? _a : txRequest.customData = {};
        (_b = (_d = txRequest.customData).factoryDeps) !== null && _b !== void 0 ? _b : _d.factoryDeps = [];
        (_c = (_e = txRequest.customData).gasPerPubdata) !== null && _c !== void 0 ? _c : _e.gasPerPubdata = utils_12.DEFAULT_GAS_PER_PUBDATA_LIMIT;
        if (!txRequest.customData.factoryDeps.includes(this.bytecode)) {
          txRequest.customData.factoryDeps.push(this.bytecode);
        }
        return txRequest;
      }
      async deploy(...args) {
        const contract = await super.deploy(...args);
        const deployTxReceipt = await contract.deployTransaction.wait();
        const deployedAddresses = (0, utils_12.getDeployedContracts)(deployTxReceipt).map((info) => info.deployedAddress);
        const contractWithCorrectAddress = new ethers_1.ethers.Contract(deployedAddresses[deployedAddresses.length - 1], contract.interface, contract.signer);
        ethers_1.utils.defineReadOnly(contractWithCorrectAddress, "deployTransaction", contract.deployTransaction);
        return contractWithCorrectAddress;
      }
    };
    exports.ContractFactory = ContractFactory2;
  }
});

// node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/index.js
var require_src7 = __commonJS({
  "node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/zksync-web3/build/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = exports.ContractFactory = exports.Provider = exports.Web3Provider = exports.Wallet = exports.L1Signer = exports.Signer = exports.EIP712Signer = exports.types = exports.utils = void 0;
    exports.utils = __importStar(require_utils16());
    exports.types = __importStar(require_types5());
    var signer_1 = require_signer2();
    Object.defineProperty(exports, "EIP712Signer", { enumerable: true, get: function() {
      return signer_1.EIP712Signer;
    } });
    Object.defineProperty(exports, "Signer", { enumerable: true, get: function() {
      return signer_1.Signer;
    } });
    Object.defineProperty(exports, "L1Signer", { enumerable: true, get: function() {
      return signer_1.L1Signer;
    } });
    var wallet_1 = require_wallet();
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return wallet_1.Wallet;
    } });
    var provider_1 = require_provider2();
    Object.defineProperty(exports, "Web3Provider", { enumerable: true, get: function() {
      return provider_1.Web3Provider;
    } });
    Object.defineProperty(exports, "Provider", { enumerable: true, get: function() {
      return provider_1.Provider;
    } });
    var contract_1 = require_contract();
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return contract_1.ContractFactory;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return contract_1.Contract;
    } });
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/utils.js
var require_utils17 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSafeDeploymentConfig = exports.validateSafeAccountConfig = void 0;
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var validateSafeAccountConfig = ({ owners, threshold }) => {
      if (owners.length <= 0)
        throw new Error("Owner list must have at least one owner");
      if (threshold <= 0)
        throw new Error("Threshold must be greater than or equal to 1");
      if (threshold > owners.length)
        throw new Error("Threshold must be lower than or equal to owners length");
    };
    exports.validateSafeAccountConfig = validateSafeAccountConfig;
    var validateSafeDeploymentConfig = ({ saltNonce }) => {
      if (bignumber_1.BigNumber.from(saltNonce).lt(0))
        throw new Error("saltNonce must be greater than or equal to 0");
    };
    exports.validateSafeDeploymentConfig = validateSafeDeploymentConfig;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/index.js
var require_safeFactory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/index.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _SafeFactory_contractNetworks;
    var _SafeFactory_isL1SafeMasterCopy;
    var _SafeFactory_safeVersion;
    var _SafeFactory_ethAdapter;
    var _SafeFactory_safeProxyFactoryContract;
    var _SafeFactory_gnosisSafeContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var ethereumjs_util_1 = require_dist6();
    var satisfies_1 = __importDefault(require_satisfies());
    var zksync_web3_1 = require_src7();
    var config_1 = require_config();
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    var Safe_1 = __importDefault(require_Safe());
    var constants_1 = require_constants2();
    var utils_12 = require_utils17();
    var ZKSYNC_MAINNET = 324;
    var ZKSYNC_TESTNET = 280;
    var ZKSYNC_SAFE_PROXY_DEPLOYED_BYTECODE = {
      "1.3.0": {
        deployedBytecodeHash: "0x0100004124426fb9ebb25e27d670c068e52f9ba631bd383279a188be47e3f86d"
      }
    };
    var SafeFactory = class _SafeFactory {
      constructor() {
        _SafeFactory_contractNetworks.set(this, void 0);
        _SafeFactory_isL1SafeMasterCopy.set(this, void 0);
        _SafeFactory_safeVersion.set(this, void 0);
        _SafeFactory_ethAdapter.set(this, void 0);
        _SafeFactory_safeProxyFactoryContract.set(this, void 0);
        _SafeFactory_gnosisSafeContract.set(this, void 0);
      }
      static async create({ ethAdapter, safeVersion = config_1.SAFE_LAST_VERSION, isL1SafeMasterCopy = false, contractNetworks }) {
        const safeFactorySdk = new _SafeFactory();
        await safeFactorySdk.init({ ethAdapter, safeVersion, isL1SafeMasterCopy, contractNetworks });
        return safeFactorySdk;
      }
      async init({ ethAdapter, safeVersion, isL1SafeMasterCopy, contractNetworks }) {
        __classPrivateFieldSet(this, _SafeFactory_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _SafeFactory_safeVersion, safeVersion, "f");
        __classPrivateFieldSet(this, _SafeFactory_isL1SafeMasterCopy, isL1SafeMasterCopy, "f");
        __classPrivateFieldSet(this, _SafeFactory_contractNetworks, contractNetworks, "f");
        const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
        const customContracts = contractNetworks === null || contractNetworks === void 0 ? void 0 : contractNetworks[chainId];
        __classPrivateFieldSet(this, _SafeFactory_safeProxyFactoryContract, await (0, safeDeploymentContracts_1.getProxyFactoryContract)({
          ethAdapter,
          safeVersion,
          chainId,
          customContracts
        }), "f");
        __classPrivateFieldSet(this, _SafeFactory_gnosisSafeContract, await (0, safeDeploymentContracts_1.getSafeContract)({
          ethAdapter,
          safeVersion,
          chainId,
          isL1SafeMasterCopy,
          customContracts
        }), "f");
      }
      getEthAdapter() {
        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f");
      }
      getSafeVersion() {
        return __classPrivateFieldGet(this, _SafeFactory_safeVersion, "f");
      }
      getAddress() {
        return __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").getAddress();
      }
      async getChainId() {
        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
      }
      async encodeSetupCallData({ owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS }) {
        var _a;
        if ((0, satisfies_1.default)(__classPrivateFieldGet(this, _SafeFactory_safeVersion, "f"), "<=1.0.0")) {
          return __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, "f").encode("setup", [
            owners,
            threshold,
            to,
            data,
            paymentToken,
            payment,
            paymentReceiver
          ]);
        }
        let fallbackHandlerAddress;
        if (fallbackHandler) {
          fallbackHandlerAddress = fallbackHandler;
        } else {
          const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
          const customContracts = (_a = __classPrivateFieldGet(this, _SafeFactory_contractNetworks, "f")) === null || _a === void 0 ? void 0 : _a[chainId];
          const fallbackHandlerContract = await (0, safeDeploymentContracts_1.getCompatibilityFallbackHandlerContract)({
            ethAdapter: __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f"),
            safeVersion: __classPrivateFieldGet(this, _SafeFactory_safeVersion, "f"),
            chainId,
            customContracts
          });
          fallbackHandlerAddress = fallbackHandlerContract.getAddress();
        }
        return __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, "f").encode("setup", [
          owners,
          threshold,
          to,
          data,
          fallbackHandlerAddress,
          paymentToken,
          payment,
          paymentReceiver
        ]);
      }
      async predictSafeAddress({ safeAccountConfig, safeDeploymentConfig }) {
        (0, utils_12.validateSafeAccountConfig)(safeAccountConfig);
        (0, utils_12.validateSafeDeploymentConfig)(safeDeploymentConfig);
        const from = __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").getAddress();
        const initializer = await this.encodeSetupCallData(safeAccountConfig);
        const saltNonce = safeDeploymentConfig.saltNonce;
        const encodedNonce = (0, ethereumjs_util_1.toBuffer)(__classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").encodeParameters(["uint256"], [saltNonce])).toString("hex");
        const salt = (0, ethereumjs_util_1.keccak256)((0, ethereumjs_util_1.toBuffer)("0x" + (0, ethereumjs_util_1.keccak256)((0, ethereumjs_util_1.toBuffer)(initializer)).toString("hex") + encodedNonce));
        const proxyCreationCode = await __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").proxyCreationCode();
        const input = __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").encodeParameters(["address"], [__classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, "f").getAddress()]);
        const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
        if ([ZKSYNC_MAINNET, ZKSYNC_TESTNET].includes(chainId)) {
          const safeVersion = await __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, "f").getVersion();
          const bytecodeHash = ZKSYNC_SAFE_PROXY_DEPLOYED_BYTECODE[safeVersion].deployedBytecodeHash;
          return zksync_web3_1.utils.create2Address(from, bytecodeHash, salt, input);
        }
        const constructorData = (0, ethereumjs_util_1.toBuffer)(input).toString("hex");
        const initCode = proxyCreationCode + constructorData;
        const proxyAddress = "0x" + (0, ethereumjs_util_1.generateAddress2)((0, ethereumjs_util_1.toBuffer)(from), (0, ethereumjs_util_1.toBuffer)(salt), (0, ethereumjs_util_1.toBuffer)(initCode)).toString("hex");
        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChecksummedAddress(proxyAddress);
      }
      async deploySafe({ safeAccountConfig, safeDeploymentConfig, options, callback }) {
        var _a;
        (0, utils_12.validateSafeAccountConfig)(safeAccountConfig);
        if (safeDeploymentConfig) {
          (0, utils_12.validateSafeDeploymentConfig)(safeDeploymentConfig);
        }
        const signerAddress = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const initializer = await this.encodeSetupCallData(safeAccountConfig);
        const saltNonce = (_a = safeDeploymentConfig === null || safeDeploymentConfig === void 0 ? void 0 : safeDeploymentConfig.saltNonce) !== null && _a !== void 0 ? _a : (Date.now() * 1e3 + Math.floor(Math.random() * 1e3)).toString();
        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {
          throw new Error("Cannot specify gas and gasLimit together in transaction options");
        }
        const safeAddress = await __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").createProxy({
          safeMasterCopyAddress: __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, "f").getAddress(),
          initializer,
          saltNonce,
          options: {
            from: signerAddress,
            ...options
          },
          callback
        });
        const isContractDeployed = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").isContractDeployed(safeAddress);
        if (!isContractDeployed) {
          throw new Error("SafeProxy contract is not deployed on the current network");
        }
        const safe = await Safe_1.default.create({
          ethAdapter: __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f"),
          safeAddress,
          isL1SafeMasterCopy: __classPrivateFieldGet(this, _SafeFactory_isL1SafeMasterCopy, "f"),
          contractNetworks: __classPrivateFieldGet(this, _SafeFactory_contractNetworks, "f")
        });
        return safe;
      }
    };
    _SafeFactory_contractNetworks = /* @__PURE__ */ new WeakMap(), _SafeFactory_isL1SafeMasterCopy = /* @__PURE__ */ new WeakMap(), _SafeFactory_safeVersion = /* @__PURE__ */ new WeakMap(), _SafeFactory_ethAdapter = /* @__PURE__ */ new WeakMap(), _SafeFactory_safeProxyFactoryContract = /* @__PURE__ */ new WeakMap(), _SafeFactory_gnosisSafeContract = /* @__PURE__ */ new WeakMap();
    exports.default = SafeFactory;
  }
});

// node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/index.js
var require_src8 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.8.0_bufferutil@4.0.9_utf-8-validate@5.0.10_/node_modules/@safe-global/safe-core-sdk/dist/src/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.standardizeSafeTransactionData = exports.SafeFactory = exports.ContractManager = void 0;
    var contractManager_1 = __importDefault(require_contractManager());
    exports.ContractManager = contractManager_1.default;
    var Safe_1 = __importDefault(require_Safe());
    var safeFactory_1 = __importDefault(require_safeFactory());
    exports.SafeFactory = safeFactory_1.default;
    var utils_12 = require_utils15();
    Object.defineProperty(exports, "standardizeSafeTransactionData", { enumerable: true, get: function() {
      return utils_12.standardizeSafeTransactionData;
    } });
    exports.default = Safe_1.default;
  }
});

// node_modules/.pnpm/@ethersproject+logger@5.7.0/node_modules/@ethersproject/logger/lib.esm/_version.js
var version;
var init_version = __esm({
  "node_modules/.pnpm/@ethersproject+logger@5.7.0/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
    version = "logger/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+logger@5.7.0/node_modules/@ethersproject/logger/lib.esm/index.js
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _permanentCensorErrors, _censorErrors, LogLevels, _logLevel, _globalLogger, _normalizeError, LogLevel, ErrorCode, HEX, Logger;
var init_lib12 = __esm({
  "node_modules/.pnpm/@ethersproject+logger@5.7.0/node_modules/@ethersproject/logger/lib.esm/index.js"() {
    "use strict";
    init_version();
    _permanentCensorErrors = false;
    _censorErrors = false;
    LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    _logLevel = LogLevels["default"];
    _globalLogger = null;
    _normalizeError = _checkNormalize();
    (function(LogLevel2) {
      LogLevel2["DEBUG"] = "DEBUG";
      LogLevel2["INFO"] = "INFO";
      LogLevel2["WARNING"] = "WARNING";
      LogLevel2["ERROR"] = "ERROR";
      LogLevel2["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    (function(ErrorCode2) {
      ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
      ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
      ErrorCode2["TIMEOUT"] = "TIMEOUT";
      ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
      ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
    })(ErrorCode || (ErrorCode = {}));
    HEX = "0123456789abcdef";
    Logger = class _Logger {
      constructor(version25) {
        Object.defineProperty(this, "version", {
          enumerable: true,
          value: version25,
          writable: false
        });
      }
      _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) {
          this.throwArgumentError("invalid log level name", "logLevel", logLevel);
        }
        if (_logLevel > LogLevels[level]) {
          return;
        }
        console.log.apply(console, args);
      }
      debug(...args) {
        this._log(_Logger.levels.DEBUG, args);
      }
      info(...args) {
        this._log(_Logger.levels.INFO, args);
      }
      warn(...args) {
        this._log(_Logger.levels.WARNING, args);
      }
      makeError(message, code, params) {
        if (_censorErrors) {
          return this.makeError("censored error", code, {});
        }
        if (!code) {
          code = _Logger.errors.UNKNOWN_ERROR;
        }
        if (!params) {
          params = {};
        }
        const messageDetails = [];
        Object.keys(params).forEach((key2) => {
          const value = params[key2];
          try {
            if (value instanceof Uint8Array) {
              let hex = "";
              for (let i = 0; i < value.length; i++) {
                hex += HEX[value[i] >> 4];
                hex += HEX[value[i] & 15];
              }
              messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
            } else {
              messageDetails.push(key2 + "=" + JSON.stringify(value));
            }
          } catch (error2) {
            messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
          }
        });
        messageDetails.push(`code=${code}`);
        messageDetails.push(`version=${this.version}`);
        const reason = message;
        let url = "";
        switch (code) {
          case ErrorCode.NUMERIC_FAULT: {
            url = "NUMERIC_FAULT";
            const fault = message;
            switch (fault) {
              case "overflow":
              case "underflow":
              case "division-by-zero":
                url += "-" + fault;
                break;
              case "negative-power":
              case "negative-width":
                url += "-unsupported";
                break;
              case "unbound-bitwise-result":
                url += "-unbound-result";
                break;
            }
            break;
          }
          case ErrorCode.CALL_EXCEPTION:
          case ErrorCode.INSUFFICIENT_FUNDS:
          case ErrorCode.MISSING_NEW:
          case ErrorCode.NONCE_EXPIRED:
          case ErrorCode.REPLACEMENT_UNDERPRICED:
          case ErrorCode.TRANSACTION_REPLACED:
          case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
            url = code;
            break;
        }
        if (url) {
          message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
        }
        if (messageDetails.length) {
          message += " (" + messageDetails.join(", ") + ")";
        }
        const error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function(key2) {
          error[key2] = params[key2];
        });
        return error;
      }
      throwError(message, code, params) {
        throw this.makeError(message, code, params);
      }
      throwArgumentError(message, name, value) {
        return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {
          argument: name,
          value
        });
      }
      assert(condition, message, code, params) {
        if (!!condition) {
          return;
        }
        this.throwError(message, code, params);
      }
      assertArgument(condition, message, name, value) {
        if (!!condition) {
          return;
        }
        this.throwArgumentError(message, name, value);
      }
      checkNormalize(message) {
        if (message == null) {
          message = "platform missing String.prototype.normalize";
        }
        if (_normalizeError) {
          this.throwError("platform missing String.prototype.normalize", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "String.prototype.normalize",
            form: _normalizeError
          });
        }
      }
      checkSafeUint53(value, message) {
        if (typeof value !== "number") {
          return;
        }
        if (message == null) {
          message = "value not safe";
        }
        if (value < 0 || value >= 9007199254740991) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "out-of-safe-range",
            value
          });
        }
        if (value % 1) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "non-integer",
            value
          });
        }
      }
      checkArgumentCount(count, expectedCount, message) {
        if (message) {
          message = ": " + message;
        } else {
          message = "";
        }
        if (count < expectedCount) {
          this.throwError("missing argument" + message, _Logger.errors.MISSING_ARGUMENT, {
            count,
            expectedCount
          });
        }
        if (count > expectedCount) {
          this.throwError("too many arguments" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {
            count,
            expectedCount
          });
        }
      }
      checkNew(target, kind) {
        if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      checkAbstract(target, kind) {
        if (target === kind) {
          this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
        } else if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      static globalLogger() {
        if (!_globalLogger) {
          _globalLogger = new _Logger(version);
        }
        return _globalLogger;
      }
      static setCensorship(censorship, permanent) {
        if (!censorship && permanent) {
          this.globalLogger().throwError("cannot permanently disable censorship", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        if (_permanentCensorErrors) {
          if (!censorship) {
            return;
          }
          this.globalLogger().throwError("error censorship permanent", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
      }
      static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
          _Logger.globalLogger().warn("invalid log level - " + logLevel);
          return;
        }
        _logLevel = level;
      }
      static from(version25) {
        return new _Logger(version25);
      }
    };
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;
  }
});

// node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/lib.esm/_version.js
var version2;
var init_version2 = __esm({
  "node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
    version2 = "bytes/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/lib.esm/index.js
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    const v = value[i];
    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function stripZeros(value) {
  let result = arrayify(value);
  if (result.length === 0) {
    return result;
  }
  let start = 0;
  while (start < result.length && result[start] === 0) {
    start++;
  }
  if (start) {
    result = result.slice(start);
  }
  return result;
}
function zeroPad(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexValue(value) {
  const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
  if (trimmed === "0x") {
    return "0x0";
  }
  return trimmed;
}
function hexStripZeros(value) {
  if (typeof value !== "string") {
    value = hexlify(value);
  }
  if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  value = value.substring(2);
  let offset = 0;
  while (offset < value.length && value[offset] === "0") {
    offset++;
  }
  return "0x" + value.substring(offset);
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature2) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature2)) {
    let bytes = arrayify(signature2);
    if (bytes.length === 64) {
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 127;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature2);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature2);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes[32] |= 128;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature2.r;
    result.s = signature2.s;
    result.v = signature2.v;
    result.recoveryParam = signature2.recoveryParam;
    result._vs = signature2._vs;
    if (result._vs != null) {
      const vs2 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs2);
      const recoveryParam = vs2[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
      }
      vs2[0] &= 127;
      const s = hexlify(vs2);
      if (result.s == null) {
        result.s = s;
      } else if (result.s !== s) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs = arrayify(result.s);
    if (vs[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature2);
    }
    if (result.recoveryParam) {
      vs[0] |= 128;
    }
    const _vs = hexlify(vs);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature2);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
function joinSignature(signature2) {
  signature2 = splitSignature(signature2);
  return hexlify(concat([
    signature2.r,
    signature2.s,
    signature2.recoveryParam ? "0x1c" : "0x1b"
  ]));
}
var logger, HexCharacters;
var init_lib13 = __esm({
  "node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
    "use strict";
    init_lib12();
    init_version2();
    logger = new Logger(version2);
    HexCharacters = "0123456789abcdef";
  }
});

// node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version3;
var init_version3 = __esm({
  "node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/_version.js"() {
    version3 = "bignumber/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}
function _base16To36(value) {
  return new BN(value, 16).toString(36);
}
var import_bn, BN, logger2, _constructorGuard, MAX_SAFE, _warnedToStringRadix, BigNumber;
var init_bignumber = __esm({
  "node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"() {
    "use strict";
    import_bn = __toESM(require_bn());
    init_lib13();
    init_lib12();
    init_version3();
    BN = import_bn.default.BN;
    logger2 = new Logger(version3);
    _constructorGuard = {};
    MAX_SAFE = 9007199254740991;
    _warnedToStringRadix = false;
    BigNumber = class _BigNumber {
      constructor(constructorGuard, hex) {
        if (constructorGuard !== _constructorGuard) {
          logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new (BigNumber)"
          });
        }
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
      }
      fromTwos(value) {
        return toBigNumber(toBN(this).fromTwos(value));
      }
      toTwos(value) {
        return toBigNumber(toBN(this).toTwos(value));
      }
      abs() {
        if (this._hex[0] === "-") {
          return _BigNumber.from(this._hex.substring(1));
        }
        return this;
      }
      add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
        const o = _BigNumber.from(other);
        if (o.isZero()) {
          throwFault("division-by-zero", "div");
        }
        return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("division-by-zero", "mod");
        }
        return toBigNumber(toBN(this).umod(value));
      }
      pow(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("negative-power", "pow");
        }
        return toBigNumber(toBN(this).pow(value));
      }
      and(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "and");
        }
        return toBigNumber(toBN(this).and(value));
      }
      or(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "or");
        }
        return toBigNumber(toBN(this).or(value));
      }
      xor(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "xor");
        }
        return toBigNumber(toBN(this).xor(value));
      }
      mask(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "mask");
        }
        return toBigNumber(toBN(this).maskn(value));
      }
      shl(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shl");
        }
        return toBigNumber(toBN(this).shln(value));
      }
      shr(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shr");
        }
        return toBigNumber(toBN(this).shrn(value));
      }
      eq(other) {
        return toBN(this).eq(toBN(other));
      }
      lt(other) {
        return toBN(this).lt(toBN(other));
      }
      lte(other) {
        return toBN(this).lte(toBN(other));
      }
      gt(other) {
        return toBN(this).gt(toBN(other));
      }
      gte(other) {
        return toBN(this).gte(toBN(other));
      }
      isNegative() {
        return this._hex[0] === "-";
      }
      isZero() {
        return toBN(this).isZero();
      }
      toNumber() {
        try {
          return toBN(this).toNumber();
        } catch (error) {
          throwFault("overflow", "toNumber", this.toString());
        }
        return null;
      }
      toBigInt() {
        try {
          return BigInt(this.toString());
        } catch (e) {
        }
        return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
          value: this.toString()
        });
      }
      toString() {
        if (arguments.length > 0) {
          if (arguments[0] === 10) {
            if (!_warnedToStringRadix) {
              _warnedToStringRadix = true;
              logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
            }
          } else if (arguments[0] === 16) {
            logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
          } else {
            logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
          }
        }
        return toBN(this).toString(10);
      }
      toHexString() {
        return this._hex;
      }
      toJSON(key2) {
        return { type: "BigNumber", hex: this.toHexString() };
      }
      static from(value) {
        if (value instanceof _BigNumber) {
          return value;
        }
        if (typeof value === "string") {
          if (value.match(/^-?0x[0-9a-f]+$/i)) {
            return new _BigNumber(_constructorGuard, toHex(value));
          }
          if (value.match(/^-?[0-9]+$/)) {
            return new _BigNumber(_constructorGuard, toHex(new BN(value)));
          }
          return logger2.throwArgumentError("invalid BigNumber string", "value", value);
        }
        if (typeof value === "number") {
          if (value % 1) {
            throwFault("underflow", "BigNumber.from", value);
          }
          if (value >= MAX_SAFE || value <= -MAX_SAFE) {
            throwFault("overflow", "BigNumber.from", value);
          }
          return _BigNumber.from(String(value));
        }
        const anyValue = value;
        if (typeof anyValue === "bigint") {
          return _BigNumber.from(anyValue.toString());
        }
        if (isBytes(anyValue)) {
          return _BigNumber.from(hexlify(anyValue));
        }
        if (anyValue) {
          if (anyValue.toHexString) {
            const hex = anyValue.toHexString();
            if (typeof hex === "string") {
              return _BigNumber.from(hex);
            }
          } else {
            let hex = anyValue._hex;
            if (hex == null && anyValue.type === "BigNumber") {
              hex = anyValue.hex;
            }
            if (typeof hex === "string") {
              if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
                return _BigNumber.from(hex);
              }
            }
          }
        }
        return logger2.throwArgumentError("invalid BigNumber value", "value", value);
      }
      static isBigNumber(value) {
        return !!(value && value._isBigNumber);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var logger3, _constructorGuard2, Zero, NegativeOne, zeros, FixedFormat, FixedNumber, ONE, BUMP;
var init_fixednumber = __esm({
  "node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"() {
    "use strict";
    init_lib13();
    init_lib12();
    init_version3();
    init_bignumber();
    logger3 = new Logger(version3);
    _constructorGuard2 = {};
    Zero = BigNumber.from(0);
    NegativeOne = BigNumber.from(-1);
    zeros = "0";
    while (zeros.length < 256) {
      zeros += zeros;
    }
    FixedFormat = class _FixedFormat {
      constructor(constructorGuard, signed, width, decimals) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.signed = signed;
        this.width = width;
        this.decimals = decimals;
        this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        this._multiplier = getMultiplier(decimals);
        Object.freeze(this);
      }
      static from(value) {
        if (value instanceof _FixedFormat) {
          return value;
        }
        if (typeof value === "number") {
          value = `fixed128x${value}`;
        }
        let signed = true;
        let width = 128;
        let decimals = 18;
        if (typeof value === "string") {
          if (value === "fixed") {
          } else if (value === "ufixed") {
            signed = false;
          } else {
            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
            if (!match) {
              logger3.throwArgumentError("invalid fixed format", "format", value);
            }
            signed = match[1] !== "u";
            width = parseInt(match[2]);
            decimals = parseInt(match[3]);
          }
        } else if (value) {
          const check = (key2, type, defaultValue) => {
            if (value[key2] == null) {
              return defaultValue;
            }
            if (typeof value[key2] !== type) {
              logger3.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
            }
            return value[key2];
          };
          signed = check("signed", "boolean", signed);
          width = check("width", "number", width);
          decimals = check("decimals", "number", decimals);
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
        }
        if (decimals > 80) {
          logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
        }
        return new _FixedFormat(_constructorGuard2, signed, width, decimals);
      }
    };
    FixedNumber = class _FixedNumber {
      constructor(constructorGuard, hex, value, format) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.format = format;
        this._hex = hex;
        this._value = value;
        this._isFixedNumber = true;
        Object.freeze(this);
      }
      _checkFormat(other) {
        if (this.format.name !== other.format.name) {
          logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
        }
      }
      addUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
      }
      subUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
      }
      mulUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
      }
      divUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
      }
      floor() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (this.isNegative() && hasFraction) {
          result = result.subUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      ceiling() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (!this.isNegative() && hasFraction) {
          result = result.addUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      // @TODO: Support other rounding algorithms
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        if (decimals < 0 || decimals > 80 || decimals % 1) {
          logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
        }
        if (comps[1].length <= decimals) {
          return this;
        }
        const factor = _FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
        const bump = BUMP.toFormat(this.format);
        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
      }
      isZero() {
        return this._value === "0.0" || this._value === "0";
      }
      isNegative() {
        return this._value[0] === "-";
      }
      toString() {
        return this._value;
      }
      toHexString(width) {
        if (width == null) {
          return this._hex;
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid byte width", "width", width);
        }
        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
        return hexZeroPad(hex, width / 8);
      }
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      toFormat(format) {
        return _FixedNumber.fromString(this._value, format);
      }
      static fromValue(value, decimals, format) {
        if (format == null && decimals != null && !isBigNumberish(decimals)) {
          format = decimals;
          decimals = null;
        }
        if (decimals == null) {
          decimals = 0;
        }
        if (format == null) {
          format = "fixed";
        }
        return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
      }
      static fromString(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        const numeric = parseFixed(value, fixedFormat.decimals);
        if (!fixedFormat.signed && numeric.lt(Zero)) {
          throwFault2("unsigned value cannot be negative", "overflow", "value", value);
        }
        let hex = null;
        if (fixedFormat.signed) {
          hex = numeric.toTwos(fixedFormat.width).toHexString();
        } else {
          hex = numeric.toHexString();
          hex = hexZeroPad(hex, fixedFormat.width / 8);
        }
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static fromBytes(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        if (arrayify(value).length > fixedFormat.width / 8) {
          throw new Error("overflow");
        }
        let numeric = BigNumber.from(value);
        if (fixedFormat.signed) {
          numeric = numeric.fromTwos(fixedFormat.width);
        }
        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static from(value, format) {
        if (typeof value === "string") {
          return _FixedNumber.fromString(value, format);
        }
        if (isBytes(value)) {
          return _FixedNumber.fromBytes(value, format);
        }
        try {
          return _FixedNumber.fromValue(value, 0, format);
        } catch (error) {
          if (error.code !== Logger.errors.INVALID_ARGUMENT) {
            throw error;
          }
        }
        return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
      }
      static isFixedNumber(value) {
        return !!(value && value._isFixedNumber);
      }
    };
    ONE = FixedNumber.from(1);
    BUMP = FixedNumber.from("0.5");
  }
});

// node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/index.js
var init_lib14 = __esm({
  "node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/index.js"() {
    init_bignumber();
    init_fixednumber();
    init_bignumber();
  }
});

// node_modules/.pnpm/@ethersproject+properties@5.7.0/node_modules/@ethersproject/properties/lib.esm/_version.js
var version4;
var init_version4 = __esm({
  "node_modules/.pnpm/@ethersproject+properties@5.7.0/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
    version4 = "properties/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+properties@5.7.0/node_modules/@ethersproject/properties/lib.esm/index.js
function defineReadOnly(object, name, value) {
  Object.defineProperty(object, name, {
    enumerable: true,
    value,
    writable: false
  });
}
function getStatic(ctor, key2) {
  for (let i = 0; i < 32; i++) {
    if (ctor[key2]) {
      return ctor[key2];
    }
    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }
    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }
  return null;
}
function resolveProperties(object) {
  return __awaiter(this, void 0, void 0, function* () {
    const promises = Object.keys(object).map((key2) => {
      const value = object[key2];
      return Promise.resolve(value).then((v) => ({ key: key2, value: v }));
    });
    const results = yield Promise.all(promises);
    return results.reduce((accum, result) => {
      accum[result.key] = result.value;
      return accum;
    }, {});
  });
}
function checkProperties(object, properties) {
  if (!object || typeof object !== "object") {
    logger4.throwArgumentError("invalid object", "object", object);
  }
  Object.keys(object).forEach((key2) => {
    if (!properties[key2]) {
      logger4.throwArgumentError("invalid object key - " + key2, "transaction:" + key2, object);
    }
  });
}
function shallowCopy(object) {
  const result = {};
  for (const key2 in object) {
    result[key2] = object[key2];
  }
  return result;
}
function _isFrozen(object) {
  if (object === void 0 || object === null || opaque[typeof object]) {
    return true;
  }
  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }
    const keys = Object.keys(object);
    for (let i = 0; i < keys.length; i++) {
      let value = null;
      try {
        value = object[keys[i]];
      } catch (error) {
        continue;
      }
      if (!_isFrozen(value)) {
        return false;
      }
    }
    return true;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  }
  if (Array.isArray(object)) {
    return Object.freeze(object.map((item) => deepCopy(item)));
  }
  if (typeof object === "object") {
    const result = {};
    for (const key2 in object) {
      const value = object[key2];
      if (value === void 0) {
        continue;
      }
      defineReadOnly(result, key2, deepCopy(value));
    }
    return result;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
  return _deepCopy(object);
}
var __awaiter, logger4, opaque, Description;
var init_lib15 = __esm({
  "node_modules/.pnpm/@ethersproject+properties@5.7.0/node_modules/@ethersproject/properties/lib.esm/index.js"() {
    "use strict";
    init_lib12();
    init_version4();
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger4 = new Logger(version4);
    opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    Description = class {
      constructor(info) {
        for (const key2 in info) {
          this[key2] = deepCopy(info[key2]);
        }
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/_version.js
var version5;
var init_version5 = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/_version.js"() {
    version5 = "abi/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/fragments.js
function checkModifier(type, name) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name]) {
      return true;
    }
  } else if (type === "address") {
    if (name === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name]) {
      return true;
    }
  }
  if (ModifiersBytes[name] || name === "payable") {
    logger5.throwArgumentError("invalid modifier", "name", name);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError(i) {
    logger5.throwArgumentError(`unexpected character at position ${i}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i = 0; i < param.length; i++) {
    let c = param[i];
    switch (c) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError(i);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      // Hit a space...
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }
              if (node.indexed) {
                throwError(i);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i);
        }
        node.type += c;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i);
        }
        node.type += c;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c;
        } else {
          throwError(i);
        }
    }
  }
  if (node.parent) {
    logger5.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (let key2 in params) {
    defineReadOnly(object, key2, params[key2]);
  }
}
function parseParams(value, allowIndex) {
  return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
}
function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger5.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger5.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger5.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger5.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger5.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger5.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger5.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger5.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger5.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c = value[offset];
    if (c === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c;
      if (c === "(") {
        depth++;
      } else if (c === ")") {
        depth--;
        if (depth === -1) {
          logger5.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}
var logger5, _constructorGuard3, ModifiersBytes, ModifiersNest, FormatTypes, paramTypeArray, ParamType, Fragment, EventFragment, ConstructorFragment, FunctionFragment, ErrorFragment, regexIdentifier, regexParen;
var init_fragments = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/fragments.js"() {
    "use strict";
    init_lib14();
    init_lib15();
    init_lib12();
    init_version5();
    logger5 = new Logger(version5);
    _constructorGuard3 = {};
    ModifiersBytes = { calldata: true, memory: true, storage: true };
    ModifiersNest = { calldata: true, memory: true };
    FormatTypes = Object.freeze({
      // Bare formatting, as is needed for computing a sighash of an event or function
      sighash: "sighash",
      // Human-Readable with Minimal spacing and without names (compact human-readable)
      minimal: "minimal",
      // Human-Readable with nice spacing, including all names
      full: "full",
      // JSON-format a la Solidity
      json: "json"
    });
    paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    ParamType = class _ParamType {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new ParamType()"
          });
        }
        populate(this, params);
        let match = this.type.match(paramTypeArray);
        if (match) {
          populate(this, {
            arrayLength: parseInt(match[2] || "-1"),
            arrayChildren: _ParamType.fromObject({
              type: match[1],
              components: this.components
            }),
            baseType: "array"
          });
        } else {
          populate(this, {
            arrayLength: null,
            arrayChildren: null,
            baseType: this.components != null ? "tuple" : this.type
          });
        }
        this._isParamType = true;
        Object.freeze(this);
      }
      // Format the parameter fragment
      //   - sighash: "(uint256,address)"
      //   - minimal: "tuple(uint256,address) indexed"
      //   - full:    "tuple(uint256 foo, address bar) indexed baz"
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          let result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name: this.name || void 0
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.components) {
            result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.baseType === "array") {
          result += this.arrayChildren.format(format);
          result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        } else {
          if (this.baseType === "tuple") {
            if (format !== FormatTypes.sighash) {
              result += this.type;
            }
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== FormatTypes.sighash) {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === FormatTypes.full && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      static from(value, allowIndexed) {
        if (typeof value === "string") {
          return _ParamType.fromString(value, allowIndexed);
        }
        return _ParamType.fromObject(value);
      }
      static fromObject(value) {
        if (_ParamType.isParamType(value)) {
          return value;
        }
        return new _ParamType(_constructorGuard3, {
          name: value.name || null,
          type: verifyType(value.type),
          indexed: value.indexed == null ? null : !!value.indexed,
          components: value.components ? value.components.map(_ParamType.fromObject) : null
        });
      }
      static fromString(value, allowIndexed) {
        function ParamTypify(node) {
          return _ParamType.fromObject({
            name: node.name,
            type: node.type,
            indexed: node.indexed,
            components: node.components
          });
        }
        return ParamTypify(parseParamType(value, !!allowIndexed));
      }
      static isParamType(value) {
        return !!(value != null && value._isParamType);
      }
    };
    Fragment = class _Fragment {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new Fragment()"
          });
        }
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
      }
      static from(value) {
        if (_Fragment.isFragment(value)) {
          return value;
        }
        if (typeof value === "string") {
          return _Fragment.fromString(value);
        }
        return _Fragment.fromObject(value);
      }
      static fromObject(value) {
        if (_Fragment.isFragment(value)) {
          return value;
        }
        switch (value.type) {
          case "function":
            return FunctionFragment.fromObject(value);
          case "event":
            return EventFragment.fromObject(value);
          case "constructor":
            return ConstructorFragment.fromObject(value);
          case "error":
            return ErrorFragment.fromObject(value);
          case "fallback":
          case "receive":
            return null;
        }
        return logger5.throwArgumentError("invalid fragment object", "value", value);
      }
      static fromString(value) {
        value = value.replace(/\s/g, " ");
        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value = value.trim();
        if (value.split(" ")[0] === "event") {
          return EventFragment.fromString(value.substring(5).trim());
        } else if (value.split(" ")[0] === "function") {
          return FunctionFragment.fromString(value.substring(8).trim());
        } else if (value.split("(")[0].trim() === "constructor") {
          return ConstructorFragment.fromString(value.trim());
        } else if (value.split(" ")[0] === "error") {
          return ErrorFragment.fromString(value.substring(5).trim());
        }
        return logger5.throwArgumentError("unsupported fragment", "value", value);
      }
      static isFragment(value) {
        return !!(value && value._isFragment);
      }
    };
    EventFragment = class _EventFragment extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "event ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.anonymous) {
            result += "anonymous ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _EventFragment.fromString(value);
        }
        return _EventFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_EventFragment.isEventFragment(value)) {
          return value;
        }
        if (value.type !== "event") {
          logger5.throwArgumentError("invalid event object", "value", value);
        }
        const params = {
          name: verifyIdentifier(value.name),
          anonymous: value.anonymous,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          type: "event"
        };
        return new _EventFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let match = value.match(regexParen);
        if (!match) {
          logger5.throwArgumentError("invalid event string", "value", value);
        }
        let anonymous = false;
        match[3].split(" ").forEach((modifier) => {
          switch (modifier.trim()) {
            case "anonymous":
              anonymous = true;
              break;
            case "":
              break;
            default:
              logger5.warn("unknown modifier: " + modifier);
          }
        });
        return _EventFragment.fromObject({
          name: match[1].trim(),
          anonymous,
          inputs: parseParams(match[2], true),
          type: "event"
        });
      }
      static isEventFragment(value) {
        return value && value._isFragment && value.type === "event";
      }
    };
    ConstructorFragment = class _ConstructorFragment extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        if (format === FormatTypes.sighash) {
          logger5.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "format(sighash)"
          });
        }
        let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _ConstructorFragment.fromString(value);
        }
        return _ConstructorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_ConstructorFragment.isConstructorFragment(value)) {
          return value;
        }
        if (value.type !== "constructor") {
          logger5.throwArgumentError("invalid constructor object", "value", value);
        }
        let state = verifyState(value);
        if (state.constant) {
          logger5.throwArgumentError("constructor cannot be constant", "value", value);
        }
        const params = {
          name: null,
          type: value.type,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new _ConstructorFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "constructor" };
        value = parseGas(value, params);
        let parens = value.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") {
          logger5.throwArgumentError("invalid constructor string", "value", value);
        }
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return _ConstructorFragment.fromObject(params);
      }
      static isConstructorFragment(value) {
        return value && value._isFragment && value.type === "constructor";
      }
    };
    FunctionFragment = class _FunctionFragment extends ConstructorFragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "function ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.stateMutability) {
            if (this.stateMutability !== "nonpayable") {
              result += this.stateMutability + " ";
            }
          } else if (this.constant) {
            result += "view ";
          }
          if (this.outputs && this.outputs.length) {
            result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
          }
          if (this.gas != null) {
            result += "@" + this.gas.toString() + " ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _FunctionFragment.fromString(value);
        }
        return _FunctionFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_FunctionFragment.isFunctionFragment(value)) {
          return value;
        }
        if (value.type !== "function") {
          logger5.throwArgumentError("invalid function object", "value", value);
        }
        let state = verifyState(value);
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          constant: state.constant,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new _FunctionFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "function" };
        value = parseGas(value, params);
        let comps = value.split(" returns ");
        if (comps.length > 2) {
          logger5.throwArgumentError("invalid function string", "value", value);
        }
        let parens = comps[0].match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid function signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        if (comps.length > 1) {
          let returns = comps[1].match(regexParen);
          if (returns[1].trim() != "" || returns[3].trim() != "") {
            logger5.throwArgumentError("unexpected tokens", "value", value);
          }
          params.outputs = parseParams(returns[2], false);
        } else {
          params.outputs = [];
        }
        return _FunctionFragment.fromObject(params);
      }
      static isFunctionFragment(value) {
        return value && value._isFragment && value.type === "function";
      }
    };
    ErrorFragment = class _ErrorFragment extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "error ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _ErrorFragment.fromString(value);
        }
        return _ErrorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_ErrorFragment.isErrorFragment(value)) {
          return value;
        }
        if (value.type !== "error") {
          logger5.throwArgumentError("invalid error object", "value", value);
        }
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
        };
        return checkForbidden(new _ErrorFragment(_constructorGuard3, params));
      }
      static fromString(value) {
        let params = { type: "error" };
        let parens = value.match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid error signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(_ErrorFragment.fromObject(params));
      }
      static isErrorFragment(value) {
        return value && value._isFragment && value.type === "error";
      }
    };
    regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key2 in object) {
      const childPath = path.slice();
      childPath.push(key2);
      try {
        checkErrors(childPath, object[key2]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var logger6, Coder, Writer, Reader;
var init_abstract_coder = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"() {
    "use strict";
    init_lib13();
    init_lib14();
    init_lib15();
    init_lib12();
    init_version5();
    logger6 = new Logger(version5);
    Coder = class {
      constructor(name, type, localName, dynamic) {
        this.name = name;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
      }
      _throwError(message, value) {
        logger6.throwArgumentError(message, this.localName, value);
      }
    };
    Writer = class {
      constructor(wordSize) {
        defineReadOnly(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
      }
      get data() {
        return hexConcat(this._data);
      }
      get length() {
        return this._dataLength;
      }
      _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
      }
      appendWriter(writer) {
        return this._writeData(concat(writer._data));
      }
      // Arrayish items; padded on the right to wordSize
      writeBytes(value) {
        let bytes = arrayify(value);
        const paddingOffset = bytes.length % this.wordSize;
        if (paddingOffset) {
          bytes = concat([bytes, this._padding.slice(paddingOffset)]);
        }
        return this._writeData(bytes);
      }
      _getValue(value) {
        let bytes = arrayify(BigNumber.from(value));
        if (bytes.length > this.wordSize) {
          logger6.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this.wordSize,
            offset: bytes.length
          });
        }
        if (bytes.length % this.wordSize) {
          bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
        }
        return bytes;
      }
      // BigNumberish items; padded on the left to wordSize
      writeValue(value) {
        return this._writeData(this._getValue(value));
      }
      writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value) => {
          this._data[offset] = this._getValue(value);
        };
      }
    };
    Reader = class _Reader {
      constructor(data, wordSize, coerceFunc, allowLoose) {
        defineReadOnly(this, "_data", arrayify(data));
        defineReadOnly(this, "wordSize", wordSize || 32);
        defineReadOnly(this, "_coerceFunc", coerceFunc);
        defineReadOnly(this, "allowLoose", allowLoose);
        this._offset = 0;
      }
      get data() {
        return hexlify(this._data);
      }
      get consumed() {
        return this._offset;
      }
      // The default Coerce function
      static coerce(name, value) {
        let match = name.match("^u?int([0-9]+)$");
        if (match && parseInt(match[1]) <= 48) {
          value = value.toNumber();
        }
        return value;
      }
      coerce(name, value) {
        if (this._coerceFunc) {
          return this._coerceFunc(name, value);
        }
        return _Reader.coerce(name, value);
      }
      _peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
          if (this.allowLoose && loose && this._offset + length <= this._data.length) {
            alignedLength = length;
          } else {
            logger6.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
              length: this._data.length,
              offset: this._offset + alignedLength
            });
          }
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
      }
      subReader(offset) {
        return new _Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
      }
      readBytes(length, loose) {
        let bytes = this._peekBytes(0, length, !!loose);
        this._offset += bytes.length;
        return bytes.slice(0, length);
      }
      readValue() {
        return BigNumber.from(this.readBytes(this.wordSize));
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+keccak256@5.7.0/node_modules/@ethersproject/keccak256/lib.esm/index.js
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}
var import_js_sha3;
var init_lib16 = __esm({
  "node_modules/.pnpm/@ethersproject+keccak256@5.7.0/node_modules/@ethersproject/keccak256/lib.esm/index.js"() {
    "use strict";
    import_js_sha3 = __toESM(require_sha3());
    init_lib13();
  }
});

// node_modules/.pnpm/@ethersproject+rlp@5.7.0/node_modules/@ethersproject/rlp/lib.esm/_version.js
var version6;
var init_version6 = __esm({
  "node_modules/.pnpm/@ethersproject+rlp@5.7.0/node_modules/@ethersproject/rlp/lib.esm/_version.js"() {
    version6 = "rlp/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+rlp@5.7.0/node_modules/@ethersproject/rlp/lib.esm/index.js
var lib_exports10 = {};
__export(lib_exports10, {
  decode: () => decode,
  encode: () => encode
});
function arrayifyInteger(value) {
  const result = [];
  while (value) {
    result.unshift(value & 255);
    value >>= 8;
  }
  return result;
}
function unarrayifyInteger(data, offset, length) {
  let result = 0;
  for (let i = 0; i < length; i++) {
    result = result * 256 + data[offset + i];
  }
  return result;
}
function _encode(object) {
  if (Array.isArray(object)) {
    let payload = [];
    object.forEach(function(child) {
      payload = payload.concat(_encode(child));
    });
    if (payload.length <= 55) {
      payload.unshift(192 + payload.length);
      return payload;
    }
    const length2 = arrayifyInteger(payload.length);
    length2.unshift(247 + length2.length);
    return length2.concat(payload);
  }
  if (!isBytesLike(object)) {
    logger7.throwArgumentError("RLP object must be BytesLike", "object", object);
  }
  const data = Array.prototype.slice.call(arrayify(object));
  if (data.length === 1 && data[0] <= 127) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(128 + data.length);
    return data;
  }
  const length = arrayifyInteger(data.length);
  length.unshift(183 + length.length);
  return length.concat(data);
}
function encode(object) {
  return hexlify(_encode(object));
}
function _decodeChildren(data, offset, childOffset, length) {
  const result = [];
  while (childOffset < offset + 1 + length) {
    const decoded = _decode(data, childOffset);
    result.push(decoded.result);
    childOffset += decoded.consumed;
    if (childOffset > offset + 1 + length) {
      logger7.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
  }
  return { consumed: 1 + length, result };
}
function _decode(data, offset) {
  if (data.length === 0) {
    logger7.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
  }
  if (data[offset] >= 248) {
    const lengthLength = data[offset] - 247;
    if (offset + 1 + lengthLength > data.length) {
      logger7.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger7.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 192) {
    const length = data[offset] - 192;
    if (offset + 1 + length > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1, length);
  } else if (data[offset] >= 184) {
    const lengthLength = data[offset] - 183;
    if (offset + 1 + lengthLength > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
    return { consumed: 1 + lengthLength + length, result };
  } else if (data[offset] >= 128) {
    const length = data[offset] - 128;
    if (offset + 1 + length > data.length) {
      logger7.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1, offset + 1 + length));
    return { consumed: 1 + length, result };
  }
  return { consumed: 1, result: hexlify(data[offset]) };
}
function decode(data) {
  const bytes = arrayify(data);
  const decoded = _decode(bytes, 0);
  if (decoded.consumed !== bytes.length) {
    logger7.throwArgumentError("invalid rlp data", "data", data);
  }
  return decoded.result;
}
var logger7;
var init_lib17 = __esm({
  "node_modules/.pnpm/@ethersproject+rlp@5.7.0/node_modules/@ethersproject/rlp/lib.esm/index.js"() {
    "use strict";
    init_lib13();
    init_lib12();
    init_version6();
    logger7 = new Logger(version6);
  }
});

// node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/lib.esm/_version.js
var version7;
var init_version7 = __esm({
  "node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/lib.esm/_version.js"() {
    version7 = "address/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/lib.esm/index.js
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
function log10(x) {
  if (Math.log10) {
    return Math.log10(x);
  }
  return Math.log(x) / Math.LN10;
}
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger8.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger8.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
function isAddress(address) {
  try {
    getAddress(address);
    return true;
  } catch (error) {
  }
  return false;
}
function getIcapAddress(address) {
  let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
  while (base36.length < 30) {
    base36 = "0" + base36;
  }
  return "XE" + ibanChecksum("XE00" + base36) + base36;
}
function getContractAddress(transaction) {
  let from = null;
  try {
    from = getAddress(transaction.from);
  } catch (error) {
    logger8.throwArgumentError("missing from address", "transaction", transaction);
  }
  const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
  return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));
}
function getCreate2Address(from, salt, initCodeHash) {
  if (hexDataLength(salt) !== 32) {
    logger8.throwArgumentError("salt must be 32 bytes", "salt", salt);
  }
  if (hexDataLength(initCodeHash) !== 32) {
    logger8.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
  }
  return getAddress(hexDataSlice(keccak256(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
}
var logger8, MAX_SAFE_INTEGER, ibanLookup, safeDigits;
var init_lib18 = __esm({
  "node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/lib.esm/index.js"() {
    "use strict";
    init_lib13();
    init_lib14();
    init_lib16();
    init_lib17();
    init_lib12();
    init_version7();
    logger8 = new Logger(version7);
    MAX_SAFE_INTEGER = 9007199254740991;
    ibanLookup = {};
    for (let i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/address.js
var AddressCoder;
var init_address = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/address.js"() {
    "use strict";
    init_lib18();
    init_lib13();
    init_abstract_coder();
    AddressCoder = class extends Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, value) {
        try {
          value = getAddress(value);
        } catch (error) {
          this._throwError(error.message, value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
var AnonymousCoder;
var init_anonymous = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"() {
    "use strict";
    init_abstract_coder();
    AnonymousCoder = class extends Coder {
      constructor(coder) {
        super(coder.name, coder.type, void 0, coder.dynamic);
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      if (!name) {
        logger9.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name]) {
        logger9.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name] = true;
      return values[name];
    });
  } else {
    logger9.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger9.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer(writer.wordSize);
  let dynamicWriter = new Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name = coder.localName;
    if (name) {
      if (!accum[name]) {
        accum[name] = 0;
      }
      accum[name]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name = coder.localName;
    if (!name || uniqueNames[name] !== 1) {
      return;
    }
    if (name === "length") {
      name = "_length";
    }
    if (values[name] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name] = value;
    }
  });
  for (let i = 0; i < values.length; i++) {
    const value = values[i];
    if (value instanceof Error) {
      Object.defineProperty(values, i, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var logger9, ArrayCoder;
var init_array = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/array.js"() {
    "use strict";
    init_lib12();
    init_version5();
    init_abstract_coder();
    init_anonymous();
    logger9 = new Logger(version5);
    ArrayCoder = class extends Coder {
      constructor(coder, length, localName) {
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length;
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, value) {
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        logger9.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
          coders.push(this.coder);
        }
        return pack(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readValue().toNumber();
          if (count * 32 > reader._data.length) {
            logger9.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
              length: reader._data.length,
              count
            });
          }
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
          coders.push(new AnonymousCoder(this.coder));
        }
        return reader.coerce(this.name, unpack(reader, coders));
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
var BooleanCoder;
var init_boolean = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/boolean.js"() {
    "use strict";
    init_abstract_coder();
    BooleanCoder = class extends Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, value) {
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
var DynamicBytesCoder, BytesCoder;
var init_bytes = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/bytes.js"() {
    "use strict";
    init_lib13();
    init_abstract_coder();
    DynamicBytesCoder = class extends Coder {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = arrayify(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
      }
    };
    BytesCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(super.decode(reader)));
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
var FixedBytesCoder;
var init_fixed_bytes = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js"() {
    "use strict";
    init_lib13();
    init_abstract_coder();
    FixedBytesCoder = class extends Coder {
      constructor(size, localName) {
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        this.size = size;
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, value) {
        let data = arrayify(value);
        if (data.length !== this.size) {
          this._throwError("incorrect data length", value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/null.js
var NullCoder;
var init_null = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/null.js"() {
    "use strict";
    init_abstract_coder();
    NullCoder = class extends Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes([]);
      }
      decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/addresses.js
var AddressZero;
var init_addresses = __esm({
  "node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/addresses.js"() {
    AddressZero = "0x0000000000000000000000000000000000000000";
  }
});

// node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2, Zero2, One, Two, WeiPerEther, MaxUint256, MinInt256, MaxInt256;
var init_bignumbers = __esm({
  "node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/bignumbers.js"() {
    init_lib14();
    NegativeOne2 = BigNumber.from(-1);
    Zero2 = BigNumber.from(0);
    One = BigNumber.from(1);
    Two = BigNumber.from(2);
    WeiPerEther = BigNumber.from("1000000000000000000");
    MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    MinInt256 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
    MaxInt256 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/hashes.js
var HashZero;
var init_hashes = __esm({
  "node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/hashes.js"() {
    HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
  }
});

// node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/strings.js
var EtherSymbol;
var init_strings = __esm({
  "node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/strings.js"() {
    EtherSymbol = "Ξ";
  }
});

// node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/index.js
var lib_exports11 = {};
__export(lib_exports11, {
  AddressZero: () => AddressZero,
  EtherSymbol: () => EtherSymbol,
  HashZero: () => HashZero,
  MaxInt256: () => MaxInt256,
  MaxUint256: () => MaxUint256,
  MinInt256: () => MinInt256,
  NegativeOne: () => NegativeOne2,
  One: () => One,
  Two: () => Two,
  WeiPerEther: () => WeiPerEther,
  Zero: () => Zero2
});
var init_lib19 = __esm({
  "node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/index.js"() {
    "use strict";
    init_addresses();
    init_bignumbers();
    init_hashes();
    init_strings();
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/number.js
var NumberCoder;
var init_number = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/number.js"() {
    "use strict";
    init_lib14();
    init_lib19();
    init_abstract_coder();
    NumberCoder = class extends Coder {
      constructor(size, signed, localName) {
        const name = (signed ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        this.size = size;
        this.signed = signed;
      }
      defaultValue() {
        return 0;
      }
      encode(writer, value) {
        let v = BigNumber.from(value);
        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
        if (this.signed) {
          let bounds = maxUintValue.mask(this.size * 8 - 1);
          if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne2))) {
            this._throwError("value out-of-bounds", value);
          }
        } else if (v.lt(Zero2) || v.gt(maxUintValue.mask(this.size * 8))) {
          this._throwError("value out-of-bounds", value);
        }
        v = v.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) {
          v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        }
        return writer.writeValue(v);
      }
      decode(reader) {
        let value = reader.readValue().mask(this.size * 8);
        if (this.signed) {
          value = value.fromTwos(this.size * 8);
        }
        return reader.coerce(this.name, value);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/_version.js
var version8;
var init_version8 = __esm({
  "node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/_version.js"() {
    version8 = "strings/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/utf8.js
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger10.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i = 0;
    for (let o = offset + 1; o < bytes.length; o++) {
      if (bytes[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  bytes = arrayify(bytes);
  const result = [];
  let i = 0;
  while (i < bytes.length) {
    const c = bytes[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
      } else {
        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes.length) {
      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes[i];
      if ((nextChar & 192) != 128) {
        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger10.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      if (i >= str.length || (c2 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return arrayify(result);
}
function escapeChar(value) {
  const hex = "0000" + value.toString(16);
  return "\\u" + hex.substring(hex.length - 4);
}
function _toEscapedUtf8String(bytes, onError) {
  return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
    if (codePoint < 256) {
      switch (codePoint) {
        case 8:
          return "\\b";
        case 9:
          return "\\t";
        case 10:
          return "\\n";
        case 13:
          return "\\r";
        case 34:
          return '\\"';
        case 92:
          return "\\\\";
      }
      if (codePoint >= 32 && codePoint < 127) {
        return String.fromCharCode(codePoint);
      }
    }
    if (codePoint <= 65535) {
      return escapeChar(codePoint);
    }
    codePoint -= 65536;
    return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
  }).join("") + '"';
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
  return getUtf8CodePoints(toUtf8Bytes(str, form));
}
var logger10, UnicodeNormalizationForm, Utf8ErrorReason, Utf8ErrorFuncs;
var init_utf8 = __esm({
  "node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/utf8.js"() {
    "use strict";
    init_lib13();
    init_lib12();
    init_version8();
    logger10 = new Logger(version8);
    (function(UnicodeNormalizationForm2) {
      UnicodeNormalizationForm2["current"] = "";
      UnicodeNormalizationForm2["NFC"] = "NFC";
      UnicodeNormalizationForm2["NFD"] = "NFD";
      UnicodeNormalizationForm2["NFKC"] = "NFKC";
      UnicodeNormalizationForm2["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    (function(Utf8ErrorReason2) {
      Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
      Utf8ErrorReason2["OVERRUN"] = "string overrun";
      Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
      Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
      Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
      Utf8ErrorReason2["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
  }
});

// node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/bytes32.js
function formatBytes32String(text) {
  const bytes = toUtf8Bytes(text);
  if (bytes.length > 31) {
    throw new Error("bytes32 string must be less than 32 bytes");
  }
  return hexlify(concat([bytes, HashZero]).slice(0, 32));
}
function parseBytes32String(bytes) {
  const data = arrayify(bytes);
  if (data.length !== 32) {
    throw new Error("invalid bytes32 - not 32 bytes long");
  }
  if (data[31] !== 0) {
    throw new Error("invalid bytes32 string - no null terminator");
  }
  let length = 31;
  while (data[length - 1] === 0) {
    length--;
  }
  return toUtf8String(data.slice(0, length));
}
var init_bytes32 = __esm({
  "node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/bytes32.js"() {
    "use strict";
    init_lib19();
    init_lib13();
    init_utf8();
  }
});

// node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i = 0; i < data.length; i += 4) {
    result.push(parseInt(data.substring(i, i + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v) => {
    let comps = v.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo, h: hi };
  });
}
function matchMap(value, ranges) {
  let lo = 0;
  for (let i = 0; i < ranges.length; i++) {
    let range = ranges[i];
    lo += range.l;
    if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
      if (range.e && range.e.indexOf(value - lo) !== -1) {
        continue;
      }
      return range;
    }
  }
  return null;
}
function flatten(values) {
  return values.reduce((accum, value) => {
    value.forEach((value2) => {
      accum.push(value2);
    });
    return accum;
  }, []);
}
function _nameprepTableA1(codepoint) {
  return !!matchMap(codepoint, Table_A_1_ranges);
}
function _nameprepTableB2(codepoint) {
  let range = matchMap(codepoint, Table_B_2_ranges);
  if (range) {
    return [codepoint + range.s];
  }
  let codes = Table_B_2_lut_abs[codepoint];
  if (codes) {
    return codes;
  }
  let shift = Table_B_2_lut_rel[codepoint];
  if (shift) {
    return [codepoint + shift[0]];
  }
  let complex = Table_B_2_complex[codepoint];
  if (complex) {
    return complex;
  }
  return null;
}
function _nameprepTableC(codepoint) {
  return !!matchMap(codepoint, Table_C_ranges);
}
function nameprep(value) {
  if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
    return value.toLowerCase();
  }
  let codes = toUtf8CodePoints(value);
  codes = flatten(codes.map((code) => {
    if (Table_B_1_flags.indexOf(code) >= 0) {
      return [];
    }
    if (code >= 65024 && code <= 65039) {
      return [];
    }
    let codesTableB2 = _nameprepTableB2(code);
    if (codesTableB2) {
      return codesTableB2;
    }
    return [code];
  }));
  codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
  codes.forEach((code) => {
    if (_nameprepTableC(code)) {
      throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
    }
  });
  codes.forEach((code) => {
    if (_nameprepTableA1(code)) {
      throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
    }
  });
  let name = _toUtf8String(codes);
  if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
    throw new Error("invalid hyphen");
  }
  return name;
}
var Table_A_1_ranges, Table_B_1_flags, Table_B_2_ranges, Table_B_2_lut_abs, Table_B_2_lut_rel, Table_B_2_complex, Table_C_ranges;
var init_idna = __esm({
  "node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/idna.js"() {
    "use strict";
    init_utf8();
    Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
    Table_B_2_ranges = [
      { h: 25, s: 32, l: 65 },
      { h: 30, s: 32, e: [23], l: 127 },
      { h: 54, s: 1, e: [48], l: 64, d: 2 },
      { h: 14, s: 1, l: 57, d: 2 },
      { h: 44, s: 1, l: 17, d: 2 },
      { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
      { h: 16, s: 1, l: 68, d: 2 },
      { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
      { h: 26, s: 32, e: [17], l: 435 },
      { h: 22, s: 1, l: 71, d: 2 },
      { h: 15, s: 80, l: 40 },
      { h: 31, s: 32, l: 16 },
      { h: 32, s: 1, l: 80, d: 2 },
      { h: 52, s: 1, l: 42, d: 2 },
      { h: 12, s: 1, l: 55, d: 2 },
      { h: 40, s: 1, e: [38], l: 15, d: 2 },
      { h: 14, s: 1, l: 48, d: 2 },
      { h: 37, s: 48, l: 49 },
      { h: 148, s: 1, l: 6351, d: 2 },
      { h: 88, s: 1, l: 160, d: 2 },
      { h: 15, s: 16, l: 704 },
      { h: 25, s: 26, l: 854 },
      { h: 25, s: 32, l: 55915 },
      { h: 37, s: 40, l: 1247 },
      { h: 25, s: -119711, l: 53248 },
      { h: 25, s: -119763, l: 52 },
      { h: 25, s: -119815, l: 52 },
      { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
      { h: 25, s: -119919, l: 52 },
      { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
      { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
      { h: 25, s: -120075, l: 52 },
      { h: 25, s: -120127, l: 52 },
      { h: 25, s: -120179, l: 52 },
      { h: 25, s: -120231, l: 52 },
      { h: 25, s: -120283, l: 52 },
      { h: 25, s: -120335, l: 52 },
      { h: 24, s: -119543, e: [17], l: 56 },
      { h: 24, s: -119601, e: [17], l: 58 },
      { h: 24, s: -119659, e: [17], l: 58 },
      { h: 24, s: -119717, e: [17], l: 58 },
      { h: 24, s: -119775, e: [17], l: 58 }
    ];
    Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  }
});

// node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/index.js
var init_lib20 = __esm({
  "node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/index.js"() {
    "use strict";
    init_bytes32();
    init_idna();
    init_utf8();
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/string.js
var StringCoder;
var init_string = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/string.js"() {
    "use strict";
    init_lib20();
    init_bytes();
    StringCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, value) {
        return super.encode(writer, toUtf8Bytes(value));
      }
      decode(reader) {
        return toUtf8String(super.decode(reader));
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
var TupleCoder;
var init_tuple = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/coders/tuple.js"() {
    "use strict";
    init_abstract_coder();
    init_array();
    TupleCoder = class extends Coder {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        this.coders = coders;
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name = coder.localName;
          if (name) {
            if (!accum[name]) {
              accum[name] = 0;
            }
            accum[name]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name = coder.localName;
          if (!name || uniqueNames[name] !== 1) {
            return;
          }
          if (name === "length") {
            name = "_length";
          }
          if (values[name] != null) {
            return;
          }
          values[name] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, value) {
        return pack(writer, this.coders, value);
      }
      decode(reader) {
        return reader.coerce(this.name, unpack(reader, this.coders));
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var logger11, paramTypeBytes, paramTypeNumber, AbiCoder, defaultAbiCoder;
var init_abi_coder = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/abi-coder.js"() {
    "use strict";
    init_lib13();
    init_lib15();
    init_lib12();
    init_version5();
    init_abstract_coder();
    init_address();
    init_array();
    init_boolean();
    init_bytes();
    init_fixed_bytes();
    init_null();
    init_number();
    init_string();
    init_tuple();
    init_fragments();
    logger11 = new Logger(version5);
    paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    AbiCoder = class {
      constructor(coerceFunc) {
        defineReadOnly(this, "coerceFunc", coerceFunc || null);
      }
      _getCoder(param) {
        switch (param.baseType) {
          case "address":
            return new AddressCoder(param.name);
          case "bool":
            return new BooleanCoder(param.name);
          case "string":
            return new StringCoder(param.name);
          case "bytes":
            return new BytesCoder(param.name);
          case "array":
            return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
          case "tuple":
            return new TupleCoder((param.components || []).map((component) => {
              return this._getCoder(component);
            }), param.name);
          case "":
            return new NullCoder(param.name);
        }
        let match = param.type.match(paramTypeNumber);
        if (match) {
          let size = parseInt(match[2] || "256");
          if (size === 0 || size > 256 || size % 8 !== 0) {
            logger11.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
          }
          return new NumberCoder(size / 8, match[1] === "int", param.name);
        }
        match = param.type.match(paramTypeBytes);
        if (match) {
          let size = parseInt(match[1]);
          if (size === 0 || size > 32) {
            logger11.throwArgumentError("invalid bytes length", "param", param);
          }
          return new FixedBytesCoder(size, param.name);
        }
        return logger11.throwArgumentError("invalid type", "type", param.type);
      }
      _getWordSize() {
        return 32;
      }
      _getReader(data, allowLoose) {
        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
      }
      _getWriter() {
        return new Writer(this._getWordSize());
      }
      getDefaultValue(types) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      encode(types, values) {
        if (types.length !== values.length) {
          logger11.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
            count: { types: types.length, values: values.length },
            value: { types, values }
          });
        }
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
      }
      decode(types, data, loose) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.decode(this._getReader(arrayify(data), loose));
      }
    };
    defaultAbiCoder = new AbiCoder();
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/interface.js
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var logger12, LogDescription, TransactionDescription, ErrorDescription, Indexed, BuiltinErrors, Interface;
var init_interface = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/interface.js"() {
    "use strict";
    init_lib18();
    init_lib14();
    init_lib13();
    init_lib10();
    init_lib16();
    init_lib15();
    init_abi_coder();
    init_abstract_coder();
    init_fragments();
    init_lib12();
    init_version5();
    logger12 = new Logger(version5);
    LogDescription = class extends Description {
    };
    TransactionDescription = class extends Description {
    };
    ErrorDescription = class extends Description {
    };
    Indexed = class extends Description {
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
    };
    BuiltinErrors = {
      "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
      "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    Interface = class {
      constructor(fragments) {
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        defineReadOnly(this, "fragments", abi.map((fragment) => {
          return Fragment.from(fragment);
        }).filter((fragment) => fragment != null));
        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "errors", {});
        defineReadOnly(this, "events", {});
        defineReadOnly(this, "structs", {});
        this.fragments.forEach((fragment) => {
          let bucket = null;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                logger12.warn("duplicate definition - constructor");
                return;
              }
              defineReadOnly(this, "deploy", fragment);
              return;
            case "function":
              bucket = this.functions;
              break;
            case "event":
              bucket = this.events;
              break;
            case "error":
              bucket = this.errors;
              break;
            default:
              return;
          }
          let signature2 = fragment.format();
          if (bucket[signature2]) {
            logger12.warn("duplicate definition - " + signature2);
            return;
          }
          bucket[signature2] = fragment;
        });
        if (!this.deploy) {
          defineReadOnly(this, "deploy", ConstructorFragment.from({
            payable: false,
            type: "constructor"
          }));
        }
        defineReadOnly(this, "_isInterface", true);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.full;
        }
        if (format === FormatTypes.sighash) {
          logger12.throwArgumentError("interface does not support formatting sighash", "format", format);
        }
        const abi = this.fragments.map((fragment) => fragment.format(format));
        if (format === FormatTypes.json) {
          return JSON.stringify(abi.map((j) => JSON.parse(j)));
        }
        return abi;
      }
      // Sub-classes can override these to handle other blockchains
      static getAbiCoder() {
        return defaultAbiCoder;
      }
      static getAddress(address) {
        return getAddress(address);
      }
      static getSighash(fragment) {
        return hexDataSlice(id(fragment.format()), 0, 4);
      }
      static getEventTopic(eventFragment) {
        return id(eventFragment.format());
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      getFunction(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          for (const name in this.functions) {
            if (nameOrSignatureOrSighash === this.getSighash(name)) {
              return this.functions[name];
            }
          }
          logger12.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.functions).filter((f) => f.split(
            "("
            /* fix:) */
          )[0] === name);
          if (matching.length === 0) {
            logger12.throwArgumentError("no matching function", "name", name);
          } else if (matching.length > 1) {
            logger12.throwArgumentError("multiple matching functions", "name", name);
          }
          return this.functions[matching[0]];
        }
        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger12.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      // Find an event definition by any means necessary (unless it is ambiguous)
      getEvent(nameOrSignatureOrTopic) {
        if (isHexString(nameOrSignatureOrTopic)) {
          const topichash = nameOrSignatureOrTopic.toLowerCase();
          for (const name in this.events) {
            if (topichash === this.getEventTopic(name)) {
              return this.events[name];
            }
          }
          logger12.throwArgumentError("no matching event", "topichash", topichash);
        }
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
          const name = nameOrSignatureOrTopic.trim();
          const matching = Object.keys(this.events).filter((f) => f.split(
            "("
            /* fix:) */
          )[0] === name);
          if (matching.length === 0) {
            logger12.throwArgumentError("no matching event", "name", name);
          } else if (matching.length > 1) {
            logger12.throwArgumentError("multiple matching events", "name", name);
          }
          return this.events[matching[0]];
        }
        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
        if (!result) {
          logger12.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        }
        return result;
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      getError(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          const getSighash = getStatic(this.constructor, "getSighash");
          for (const name in this.errors) {
            const error = this.errors[name];
            if (nameOrSignatureOrSighash === getSighash(error)) {
              return this.errors[name];
            }
          }
          logger12.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.errors).filter((f) => f.split(
            "("
            /* fix:) */
          )[0] === name);
          if (matching.length === 0) {
            logger12.throwArgumentError("no matching error", "name", name);
          } else if (matching.length > 1) {
            logger12.throwArgumentError("multiple matching errors", "name", name);
          }
          return this.errors[matching[0]];
        }
        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger12.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      // Get the sighash (the bytes4 selector) used by Solidity to identify a function
      getSighash(fragment) {
        if (typeof fragment === "string") {
          try {
            fragment = this.getFunction(fragment);
          } catch (error) {
            try {
              fragment = this.getError(fragment);
            } catch (_) {
              throw error;
            }
          }
        }
        return getStatic(this.constructor, "getSighash")(fragment);
      }
      // Get the topic (the bytes32 hash) used by Solidity to identify an event
      getEventTopic(eventFragment) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        return getStatic(this.constructor, "getEventTopic")(eventFragment);
      }
      _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
      }
      _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
      }
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
          logger12.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(fragment.inputs, bytes.slice(4));
      }
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        return hexlify(concat([
          this.getSighash(fragment),
          this._encodeParams(fragment.inputs, values || [])
        ]));
      }
      // Decode the data for a function call (e.g. tx.data)
      decodeFunctionData(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
          logger12.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
      }
      // Encode the data for a function call (e.g. tx.data)
      encodeFunctionData(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(concat([
          this.getSighash(functionFragment),
          this._encodeParams(functionFragment.inputs, values || [])
        ]));
      }
      // Decode the result from a function call (e.g. from eth_call)
      decodeFunctionResult(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        let bytes = arrayify(data);
        let reason = null;
        let message = "";
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch (bytes.length % this._abiCoder._getWordSize()) {
          case 0:
            try {
              return this._abiCoder.decode(functionFragment.outputs, bytes);
            } catch (error) {
            }
            break;
          case 4: {
            const selector = hexlify(bytes.slice(0, 4));
            const builtin = BuiltinErrors[selector];
            if (builtin) {
              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
              errorName = builtin.name;
              errorSignature = builtin.signature;
              if (builtin.reason) {
                reason = errorArgs[0];
              }
              if (errorName === "Error") {
                message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
              } else if (errorName === "Panic") {
                message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
              }
            } else {
              try {
                const error = this.getError(selector);
                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                errorName = error.name;
                errorSignature = error.format();
              } catch (error) {
              }
            }
            break;
          }
        }
        return logger12.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
          method: functionFragment.format(),
          data: hexlify(data),
          errorArgs,
          errorName,
          errorSignature,
          reason
        });
      }
      // Encode the result for a function call (e.g. for eth_call)
      encodeFunctionResult(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
      }
      // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (values.length > eventFragment.inputs.length) {
          logger12.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
            argument: "values",
            value: values
          });
        }
        let topics = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return id(value);
          } else if (param.type === "bytes") {
            return keccak256(hexlify(value));
          }
          if (param.type === "bool" && typeof value === "boolean") {
            value = value ? "0x01" : "0x00";
          }
          if (param.type.match(/^u?int/)) {
            value = BigNumber.from(value).toHexString();
          }
          if (param.type === "address") {
            this._abiCoder.encode(["address"], [value]);
          }
          return hexZeroPad(hexlify(value), 32);
        };
        values.forEach((value, index) => {
          let param = eventFragment.inputs[index];
          if (!param.indexed) {
            if (value != null) {
              logger12.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            }
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            logger12.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        if (values.length !== eventFragment.inputs.length) {
          logger12.throwArgumentError("event arguments/values mismatch", "values", values);
        }
        eventFragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push(id(value));
            } else if (param.type === "bytes") {
              topics.push(keccak256(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(this._abiCoder.encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: this._abiCoder.encode(dataTypes, dataValues),
          topics
        };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(eventFragment, data, topics) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (topics != null && !eventFragment.anonymous) {
          let topicHash = this.getEventTopic(eventFragment);
          if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
            logger12.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
          }
          topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (resultIndexed == null) {
              result[index] = new Indexed({ _isIndexed: true, hash: null });
            } else if (dynamic[index]) {
              result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
            } else {
              try {
                result[index] = resultIndexed[indexedIndex++];
              } catch (error) {
                result[index] = error;
              }
            }
          } else {
            try {
              result[index] = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              result[index] = error;
            }
          }
          if (param.name && result[param.name] == null) {
            const value = result[index];
            if (value instanceof Error) {
              Object.defineProperty(result, param.name, {
                enumerable: true,
                get: () => {
                  throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
                }
              });
            } else {
              result[param.name] = value;
            }
          }
        });
        for (let i = 0; i < result.length; i++) {
          const value = result[i];
          if (value instanceof Error) {
            Object.defineProperty(result, i, {
              enumerable: true,
              get: () => {
                throw wrapAccessError(`index ${i}`, value);
              }
            });
          }
        }
        return Object.freeze(result);
      }
      // Given a transaction, find the matching function fragment (if any) and
      // determine all its properties and call parameters
      parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new TransactionDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
          functionFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment),
          value: BigNumber.from(tx.value || "0")
        });
      }
      // @TODO
      //parseCallResult(data: BytesLike): ??
      // Given an event log, find the matching event fragment (if any) and
      // determine all its properties and values
      parseLog(log) {
        let fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription({
          eventFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          topic: this.getEventTopic(fragment),
          args: this.decodeEventLog(fragment, log.data, log.topics)
        });
      }
      parseError(data) {
        const hexData = hexlify(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new ErrorDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
          errorFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment)
        });
      }
      /*
      static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
          if (Interface.isInterface(value)) {
              return value;
          }
          if (typeof(value) === "string") {
              return new Interface(JSON.parse(value));
          }
          return new Interface(value);
      }
      */
      static isInterface(value) {
        return !!(value && value._isInterface);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/index.js
var init_lib21 = __esm({
  "node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/index.js"() {
    "use strict";
    init_fragments();
    init_abi_coder();
    init_interface();
  }
});

// node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/lib.esm/_version.js
var version9;
var init_version9 = __esm({
  "node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/lib.esm/_version.js"() {
    version9 = "abstract-provider/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/lib.esm/index.js
var __awaiter2, logger13, ForkEvent, Provider;
var init_lib22 = __esm({
  "node_modules/.pnpm/@ethersproject+abstract-provider@5.7.0/node_modules/@ethersproject/abstract-provider/lib.esm/index.js"() {
    "use strict";
    init_lib14();
    init_lib13();
    init_lib15();
    init_lib12();
    init_version9();
    __awaiter2 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger13 = new Logger(version9);
    ForkEvent = class extends Description {
      static isForkEvent(value) {
        return !!(value && value._isForkEvent);
      }
    };
    Provider = class _Provider {
      constructor() {
        logger13.checkAbstract(new.target, _Provider);
        defineReadOnly(this, "_isProvider", true);
      }
      getFeeData() {
        return __awaiter2(this, void 0, void 0, function* () {
          const { block, gasPrice } = yield resolveProperties({
            block: this.getBlock("latest"),
            gasPrice: this.getGasPrice().catch((error) => {
              return null;
            })
          });
          let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
          if (block && block.baseFeePerGas) {
            lastBaseFeePerGas = block.baseFeePerGas;
            maxPriorityFeePerGas = BigNumber.from("1500000000");
            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
          }
          return { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice };
        });
      }
      // Alias for "on"
      addListener(eventName, listener) {
        return this.on(eventName, listener);
      }
      // Alias for "off"
      removeListener(eventName, listener) {
        return this.off(eventName, listener);
      }
      static isProvider(value) {
        return !!(value && value._isProvider);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+abstract-signer@5.7.0/node_modules/@ethersproject/abstract-signer/lib.esm/_version.js
var version10;
var init_version10 = __esm({
  "node_modules/.pnpm/@ethersproject+abstract-signer@5.7.0/node_modules/@ethersproject/abstract-signer/lib.esm/_version.js"() {
    version10 = "abstract-signer/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+abstract-signer@5.7.0/node_modules/@ethersproject/abstract-signer/lib.esm/index.js
var __awaiter3, logger14, allowedTransactionKeys, forwardErrors, Signer, VoidSigner;
var init_lib23 = __esm({
  "node_modules/.pnpm/@ethersproject+abstract-signer@5.7.0/node_modules/@ethersproject/abstract-signer/lib.esm/index.js"() {
    "use strict";
    init_lib15();
    init_lib12();
    init_version10();
    __awaiter3 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger14 = new Logger(version10);
    allowedTransactionKeys = [
      "accessList",
      "ccipReadEnabled",
      "chainId",
      "customData",
      "data",
      "from",
      "gasLimit",
      "gasPrice",
      "maxFeePerGas",
      "maxPriorityFeePerGas",
      "nonce",
      "to",
      "type",
      "value"
    ];
    forwardErrors = [
      Logger.errors.INSUFFICIENT_FUNDS,
      Logger.errors.NONCE_EXPIRED,
      Logger.errors.REPLACEMENT_UNDERPRICED
    ];
    Signer = class _Signer {
      ///////////////////
      // Sub-classes MUST call super
      constructor() {
        logger14.checkAbstract(new.target, _Signer);
        defineReadOnly(this, "_isSigner", true);
      }
      ///////////////////
      // Sub-classes MAY override these
      getBalance(blockTag) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getBalance");
          return yield this.provider.getBalance(this.getAddress(), blockTag);
        });
      }
      getTransactionCount(blockTag) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getTransactionCount");
          return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
        });
      }
      // Populates "from" if unspecified, and estimates the gas for the transaction
      estimateGas(transaction) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("estimateGas");
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          return yield this.provider.estimateGas(tx);
        });
      }
      // Populates "from" if unspecified, and calls with the transaction
      call(transaction, blockTag) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("call");
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          return yield this.provider.call(tx, blockTag);
        });
      }
      // Populates all fields in a transaction, signs it and sends it to the network
      sendTransaction(transaction) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("sendTransaction");
          const tx = yield this.populateTransaction(transaction);
          const signedTx = yield this.signTransaction(tx);
          return yield this.provider.sendTransaction(signedTx);
        });
      }
      getChainId() {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getChainId");
          const network = yield this.provider.getNetwork();
          return network.chainId;
        });
      }
      getGasPrice() {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getGasPrice");
          return yield this.provider.getGasPrice();
        });
      }
      getFeeData() {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getFeeData");
          return yield this.provider.getFeeData();
        });
      }
      resolveName(name) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("resolveName");
          return yield this.provider.resolveName(name);
        });
      }
      // Checks a transaction does not contain invalid keys and if
      // no "from" is provided, populates it.
      // - does NOT require a provider
      // - adds "from" is not present
      // - returns a COPY (safe to mutate the result)
      // By default called from: (overriding these prevents it)
      //   - call
      //   - estimateGas
      //   - populateTransaction (and therefor sendTransaction)
      checkTransaction(transaction) {
        for (const key2 in transaction) {
          if (allowedTransactionKeys.indexOf(key2) === -1) {
            logger14.throwArgumentError("invalid transaction key: " + key2, "transaction", transaction);
          }
        }
        const tx = shallowCopy(transaction);
        if (tx.from == null) {
          tx.from = this.getAddress();
        } else {
          tx.from = Promise.all([
            Promise.resolve(tx.from),
            this.getAddress()
          ]).then((result) => {
            if (result[0].toLowerCase() !== result[1].toLowerCase()) {
              logger14.throwArgumentError("from address mismatch", "transaction", transaction);
            }
            return result[0];
          });
        }
        return tx;
      }
      // Populates ALL keys for a transaction and checks that "from" matches
      // this Signer. Should be used by sendTransaction but NOT by signTransaction.
      // By default called from: (overriding these prevents it)
      //   - sendTransaction
      //
      // Notes:
      //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
      populateTransaction(transaction) {
        return __awaiter3(this, void 0, void 0, function* () {
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          if (tx.to != null) {
            tx.to = Promise.resolve(tx.to).then((to) => __awaiter3(this, void 0, void 0, function* () {
              if (to == null) {
                return null;
              }
              const address = yield this.resolveName(to);
              if (address == null) {
                logger14.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
              }
              return address;
            }));
            tx.to.catch((error) => {
            });
          }
          const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
          if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
            logger14.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
          } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
            logger14.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
          }
          if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
            tx.type = 2;
          } else if (tx.type === 0 || tx.type === 1) {
            if (tx.gasPrice == null) {
              tx.gasPrice = this.getGasPrice();
            }
          } else {
            const feeData = yield this.getFeeData();
            if (tx.type == null) {
              if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                tx.type = 2;
                if (tx.gasPrice != null) {
                  const gasPrice = tx.gasPrice;
                  delete tx.gasPrice;
                  tx.maxFeePerGas = gasPrice;
                  tx.maxPriorityFeePerGas = gasPrice;
                } else {
                  if (tx.maxFeePerGas == null) {
                    tx.maxFeePerGas = feeData.maxFeePerGas;
                  }
                  if (tx.maxPriorityFeePerGas == null) {
                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                  }
                }
              } else if (feeData.gasPrice != null) {
                if (hasEip1559) {
                  logger14.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "populateTransaction"
                  });
                }
                if (tx.gasPrice == null) {
                  tx.gasPrice = feeData.gasPrice;
                }
                tx.type = 0;
              } else {
                logger14.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "signer.getFeeData"
                });
              }
            } else if (tx.type === 2) {
              if (tx.maxFeePerGas == null) {
                tx.maxFeePerGas = feeData.maxFeePerGas;
              }
              if (tx.maxPriorityFeePerGas == null) {
                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
            }
          }
          if (tx.nonce == null) {
            tx.nonce = this.getTransactionCount("pending");
          }
          if (tx.gasLimit == null) {
            tx.gasLimit = this.estimateGas(tx).catch((error) => {
              if (forwardErrors.indexOf(error.code) >= 0) {
                throw error;
              }
              return logger14.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error,
                tx
              });
            });
          }
          if (tx.chainId == null) {
            tx.chainId = this.getChainId();
          } else {
            tx.chainId = Promise.all([
              Promise.resolve(tx.chainId),
              this.getChainId()
            ]).then((results) => {
              if (results[1] !== 0 && results[0] !== results[1]) {
                logger14.throwArgumentError("chainId address mismatch", "transaction", transaction);
              }
              return results[0];
            });
          }
          return yield resolveProperties(tx);
        });
      }
      ///////////////////
      // Sub-classes SHOULD leave these alone
      _checkProvider(operation) {
        if (!this.provider) {
          logger14.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: operation || "_checkProvider"
          });
        }
      }
      static isSigner(value) {
        return !!(value && value._isSigner);
      }
    };
    VoidSigner = class _VoidSigner extends Signer {
      constructor(address, provider) {
        super();
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "provider", provider || null);
      }
      getAddress() {
        return Promise.resolve(this.address);
      }
      _fail(message, operation) {
        return Promise.resolve().then(() => {
          logger14.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation });
        });
      }
      signMessage(message) {
        return this._fail("VoidSigner cannot sign messages", "signMessage");
      }
      signTransaction(transaction) {
        return this._fail("VoidSigner cannot sign transactions", "signTransaction");
      }
      _signTypedData(domain, types, value) {
        return this._fail("VoidSigner cannot sign typed data", "signTypedData");
      }
      connect(provider) {
        return new _VoidSigner(this.address, provider);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/lib.esm/_version.js
var version11;
var init_version11 = __esm({
  "node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/lib.esm/_version.js"() {
    version11 = "contracts/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/lib.esm/index.js
function resolveName(resolver, nameOrPromise) {
  return __awaiter4(this, void 0, void 0, function* () {
    const name = yield nameOrPromise;
    if (typeof name !== "string") {
      logger15.throwArgumentError("invalid address or ENS name", "name", name);
    }
    try {
      return getAddress(name);
    } catch (error) {
    }
    if (!resolver) {
      logger15.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "resolveName"
      });
    }
    const address = yield resolver.resolveName(name);
    if (address == null) {
      logger15.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
    }
    return address;
  });
}
function resolveAddresses(resolver, value, paramType) {
  return __awaiter4(this, void 0, void 0, function* () {
    if (Array.isArray(paramType)) {
      return yield Promise.all(paramType.map((paramType2, index) => {
        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType2.name], paramType2);
      }));
    }
    if (paramType.type === "address") {
      return yield resolveName(resolver, value);
    }
    if (paramType.type === "tuple") {
      return yield resolveAddresses(resolver, value, paramType.components);
    }
    if (paramType.baseType === "array") {
      if (!Array.isArray(value)) {
        return Promise.reject(logger15.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
          argument: "value",
          value
        }));
      }
      return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));
    }
    return value;
  });
}
function populateTransaction(contract, fragment, args) {
  return __awaiter4(this, void 0, void 0, function* () {
    let overrides = {};
    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
      overrides = shallowCopy(args.pop());
    }
    logger15.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
    if (contract.signer) {
      if (overrides.from) {
        overrides.from = resolveProperties({
          override: resolveName(contract.signer, overrides.from),
          signer: contract.signer.getAddress()
        }).then((check) => __awaiter4(this, void 0, void 0, function* () {
          if (getAddress(check.signer) !== check.override) {
            logger15.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "overrides.from"
            });
          }
          return check.override;
        }));
      } else {
        overrides.from = contract.signer.getAddress();
      }
    } else if (overrides.from) {
      overrides.from = resolveName(contract.provider, overrides.from);
    }
    const resolved = yield resolveProperties({
      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
      address: contract.resolvedAddress,
      overrides: resolveProperties(overrides) || {}
    });
    const data = contract.interface.encodeFunctionData(fragment, resolved.args);
    const tx = {
      data,
      to: resolved.address
    };
    const ro = resolved.overrides;
    if (ro.nonce != null) {
      tx.nonce = BigNumber.from(ro.nonce).toNumber();
    }
    if (ro.gasLimit != null) {
      tx.gasLimit = BigNumber.from(ro.gasLimit);
    }
    if (ro.gasPrice != null) {
      tx.gasPrice = BigNumber.from(ro.gasPrice);
    }
    if (ro.maxFeePerGas != null) {
      tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
    }
    if (ro.maxPriorityFeePerGas != null) {
      tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
    }
    if (ro.from != null) {
      tx.from = ro.from;
    }
    if (ro.type != null) {
      tx.type = ro.type;
    }
    if (ro.accessList != null) {
      tx.accessList = accessListify(ro.accessList);
    }
    if (tx.gasLimit == null && fragment.gas != null) {
      let intrinsic = 21e3;
      const bytes = arrayify(data);
      for (let i = 0; i < bytes.length; i++) {
        intrinsic += 4;
        if (bytes[i]) {
          intrinsic += 64;
        }
      }
      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
    }
    if (ro.value) {
      const roValue = BigNumber.from(ro.value);
      if (!roValue.isZero() && !fragment.payable) {
        logger15.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "overrides.value",
          value: overrides.value
        });
      }
      tx.value = roValue;
    }
    if (ro.customData) {
      tx.customData = shallowCopy(ro.customData);
    }
    if (ro.ccipReadEnabled) {
      tx.ccipReadEnabled = !!ro.ccipReadEnabled;
    }
    delete overrides.nonce;
    delete overrides.gasLimit;
    delete overrides.gasPrice;
    delete overrides.from;
    delete overrides.value;
    delete overrides.type;
    delete overrides.accessList;
    delete overrides.maxFeePerGas;
    delete overrides.maxPriorityFeePerGas;
    delete overrides.customData;
    delete overrides.ccipReadEnabled;
    const leftovers = Object.keys(overrides).filter((key2) => overrides[key2] != null);
    if (leftovers.length) {
      logger15.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "overrides",
        overrides: leftovers
      });
    }
    return tx;
  });
}
function buildPopulate(contract, fragment) {
  return function(...args) {
    return populateTransaction(contract, fragment, args);
  };
}
function buildEstimate(contract, fragment) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!signerOrProvider) {
        logger15.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "estimateGas"
        });
      }
      const tx = yield populateTransaction(contract, fragment, args);
      return yield signerOrProvider.estimateGas(tx);
    });
  };
}
function addContractWait(contract, tx) {
  const wait = tx.wait.bind(tx);
  tx.wait = (confirmations) => {
    return wait(confirmations).then((receipt) => {
      receipt.events = receipt.logs.map((log) => {
        let event = deepCopy(log);
        let parsed = null;
        try {
          parsed = contract.interface.parseLog(log);
        } catch (e) {
        }
        if (parsed) {
          event.args = parsed.args;
          event.decode = (data, topics) => {
            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
          };
          event.event = parsed.name;
          event.eventSignature = parsed.signature;
        }
        event.removeListener = () => {
          return contract.provider;
        };
        event.getBlock = () => {
          return contract.provider.getBlock(receipt.blockHash);
        };
        event.getTransaction = () => {
          return contract.provider.getTransaction(receipt.transactionHash);
        };
        event.getTransactionReceipt = () => {
          return Promise.resolve(receipt);
        };
        return event;
      });
      return receipt;
    });
  };
}
function buildCall(contract, fragment, collapseSimple) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter4(this, void 0, void 0, function* () {
      let blockTag = void 0;
      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        const overrides = shallowCopy(args.pop());
        if (overrides.blockTag != null) {
          blockTag = yield overrides.blockTag;
        }
        delete overrides.blockTag;
        args.push(overrides);
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed(blockTag);
      }
      const tx = yield populateTransaction(contract, fragment, args);
      const result = yield signerOrProvider.call(tx, blockTag);
      try {
        let value = contract.interface.decodeFunctionResult(fragment, result);
        if (collapseSimple && fragment.outputs.length === 1) {
          value = value[0];
        }
        return value;
      } catch (error) {
        if (error.code === Logger.errors.CALL_EXCEPTION) {
          error.address = contract.address;
          error.args = args;
          error.transaction = tx;
        }
        throw error;
      }
    });
  };
}
function buildSend(contract, fragment) {
  return function(...args) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!contract.signer) {
        logger15.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "sendTransaction"
        });
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed();
      }
      const txRequest = yield populateTransaction(contract, fragment, args);
      const tx = yield contract.signer.sendTransaction(txRequest);
      addContractWait(contract, tx);
      return tx;
    });
  };
}
function buildDefault(contract, fragment, collapseSimple) {
  if (fragment.constant) {
    return buildCall(contract, fragment, collapseSimple);
  }
  return buildSend(contract, fragment);
}
function getEventTag(filter) {
  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
    return "*";
  }
  return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
    if (Array.isArray(topic)) {
      return topic.join("|");
    }
    return topic;
  }).join(":") : "");
}
var __awaiter4, logger15, allowedTransactionKeys2, RunningEvent, ErrorRunningEvent, FragmentRunningEvent, WildcardRunningEvent, BaseContract, Contract, ContractFactory;
var init_lib24 = __esm({
  "node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/lib.esm/index.js"() {
    "use strict";
    init_lib21();
    init_lib22();
    init_lib23();
    init_lib18();
    init_lib14();
    init_lib13();
    init_lib15();
    init_lib11();
    init_lib12();
    init_version11();
    __awaiter4 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger15 = new Logger(version11);
    allowedTransactionKeys2 = {
      chainId: true,
      data: true,
      from: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      value: true,
      type: true,
      accessList: true,
      maxFeePerGas: true,
      maxPriorityFeePerGas: true,
      customData: true,
      ccipReadEnabled: true
    };
    RunningEvent = class {
      constructor(tag, filter) {
        defineReadOnly(this, "tag", tag);
        defineReadOnly(this, "filter", filter);
        this._listeners = [];
      }
      addListener(listener, once) {
        this._listeners.push({ listener, once });
      }
      removeListener(listener) {
        let done = false;
        this._listeners = this._listeners.filter((item) => {
          if (done || item.listener !== listener) {
            return true;
          }
          done = true;
          return false;
        });
      }
      removeAllListeners() {
        this._listeners = [];
      }
      listeners() {
        return this._listeners.map((i) => i.listener);
      }
      listenerCount() {
        return this._listeners.length;
      }
      run(args) {
        const listenerCount = this.listenerCount();
        this._listeners = this._listeners.filter((item) => {
          const argsCopy = args.slice();
          setTimeout(() => {
            item.listener.apply(this, argsCopy);
          }, 0);
          return !item.once;
        });
        return listenerCount;
      }
      prepareEvent(event) {
      }
      // Returns the array that will be applied to an emit
      getEmit(event) {
        return [event];
      }
    };
    ErrorRunningEvent = class extends RunningEvent {
      constructor() {
        super("error", null);
      }
    };
    FragmentRunningEvent = class extends RunningEvent {
      constructor(address, contractInterface, fragment, topics) {
        const filter = {
          address
        };
        let topic = contractInterface.getEventTopic(fragment);
        if (topics) {
          if (topic !== topics[0]) {
            logger15.throwArgumentError("topic mismatch", "topics", topics);
          }
          filter.topics = topics.slice();
        } else {
          filter.topics = [topic];
        }
        super(getEventTag(filter), filter);
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "interface", contractInterface);
        defineReadOnly(this, "fragment", fragment);
      }
      prepareEvent(event) {
        super.prepareEvent(event);
        event.event = this.fragment.name;
        event.eventSignature = this.fragment.format();
        event.decode = (data, topics) => {
          return this.interface.decodeEventLog(this.fragment, data, topics);
        };
        try {
          event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
        } catch (error) {
          event.args = null;
          event.decodeError = error;
        }
      }
      getEmit(event) {
        const errors = checkResultErrors(event.args);
        if (errors.length) {
          throw errors[0].error;
        }
        const args = (event.args || []).slice();
        args.push(event);
        return args;
      }
    };
    WildcardRunningEvent = class extends RunningEvent {
      constructor(address, contractInterface) {
        super("*", { address });
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "interface", contractInterface);
      }
      prepareEvent(event) {
        super.prepareEvent(event);
        try {
          const parsed = this.interface.parseLog(event);
          event.event = parsed.name;
          event.eventSignature = parsed.signature;
          event.decode = (data, topics) => {
            return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
          };
          event.args = parsed.args;
        } catch (error) {
        }
      }
    };
    BaseContract = class {
      constructor(addressOrName, contractInterface, signerOrProvider) {
        defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
        if (signerOrProvider == null) {
          defineReadOnly(this, "provider", null);
          defineReadOnly(this, "signer", null);
        } else if (Signer.isSigner(signerOrProvider)) {
          defineReadOnly(this, "provider", signerOrProvider.provider || null);
          defineReadOnly(this, "signer", signerOrProvider);
        } else if (Provider.isProvider(signerOrProvider)) {
          defineReadOnly(this, "provider", signerOrProvider);
          defineReadOnly(this, "signer", null);
        } else {
          logger15.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
        }
        defineReadOnly(this, "callStatic", {});
        defineReadOnly(this, "estimateGas", {});
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "populateTransaction", {});
        defineReadOnly(this, "filters", {});
        {
          const uniqueFilters = {};
          Object.keys(this.interface.events).forEach((eventSignature) => {
            const event = this.interface.events[eventSignature];
            defineReadOnly(this.filters, eventSignature, (...args) => {
              return {
                address: this.address,
                topics: this.interface.encodeFilterTopics(event, args)
              };
            });
            if (!uniqueFilters[event.name]) {
              uniqueFilters[event.name] = [];
            }
            uniqueFilters[event.name].push(eventSignature);
          });
          Object.keys(uniqueFilters).forEach((name) => {
            const filters = uniqueFilters[name];
            if (filters.length === 1) {
              defineReadOnly(this.filters, name, this.filters[filters[0]]);
            } else {
              logger15.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
            }
          });
        }
        defineReadOnly(this, "_runningEvents", {});
        defineReadOnly(this, "_wrappedEmits", {});
        if (addressOrName == null) {
          logger15.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
        }
        defineReadOnly(this, "address", addressOrName);
        if (this.provider) {
          defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
        } else {
          try {
            defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
          } catch (error) {
            logger15.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new Contract"
            });
          }
        }
        this.resolvedAddress.catch((e) => {
        });
        const uniqueNames = {};
        const uniqueSignatures = {};
        Object.keys(this.interface.functions).forEach((signature2) => {
          const fragment = this.interface.functions[signature2];
          if (uniqueSignatures[signature2]) {
            logger15.warn(`Duplicate ABI entry for ${JSON.stringify(signature2)}`);
            return;
          }
          uniqueSignatures[signature2] = true;
          {
            const name = fragment.name;
            if (!uniqueNames[`%${name}`]) {
              uniqueNames[`%${name}`] = [];
            }
            uniqueNames[`%${name}`].push(signature2);
          }
          if (this[signature2] == null) {
            defineReadOnly(this, signature2, buildDefault(this, fragment, true));
          }
          if (this.functions[signature2] == null) {
            defineReadOnly(this.functions, signature2, buildDefault(this, fragment, false));
          }
          if (this.callStatic[signature2] == null) {
            defineReadOnly(this.callStatic, signature2, buildCall(this, fragment, true));
          }
          if (this.populateTransaction[signature2] == null) {
            defineReadOnly(this.populateTransaction, signature2, buildPopulate(this, fragment));
          }
          if (this.estimateGas[signature2] == null) {
            defineReadOnly(this.estimateGas, signature2, buildEstimate(this, fragment));
          }
        });
        Object.keys(uniqueNames).forEach((name) => {
          const signatures = uniqueNames[name];
          if (signatures.length > 1) {
            return;
          }
          name = name.substring(1);
          const signature2 = signatures[0];
          try {
            if (this[name] == null) {
              defineReadOnly(this, name, this[signature2]);
            }
          } catch (e) {
          }
          if (this.functions[name] == null) {
            defineReadOnly(this.functions, name, this.functions[signature2]);
          }
          if (this.callStatic[name] == null) {
            defineReadOnly(this.callStatic, name, this.callStatic[signature2]);
          }
          if (this.populateTransaction[name] == null) {
            defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature2]);
          }
          if (this.estimateGas[name] == null) {
            defineReadOnly(this.estimateGas, name, this.estimateGas[signature2]);
          }
        });
      }
      static getContractAddress(transaction) {
        return getContractAddress(transaction);
      }
      static getInterface(contractInterface) {
        if (Interface.isInterface(contractInterface)) {
          return contractInterface;
        }
        return new Interface(contractInterface);
      }
      // @TODO: Allow timeout?
      deployed() {
        return this._deployed();
      }
      _deployed(blockTag) {
        if (!this._deployedPromise) {
          if (this.deployTransaction) {
            this._deployedPromise = this.deployTransaction.wait().then(() => {
              return this;
            });
          } else {
            this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
              if (code === "0x") {
                logger15.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                  contractAddress: this.address,
                  operation: "getDeployed"
                });
              }
              return this;
            });
          }
        }
        return this._deployedPromise;
      }
      // @TODO:
      // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
      // @TODO:
      // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
      fallback(overrides) {
        if (!this.signer) {
          logger15.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
        }
        const tx = shallowCopy(overrides || {});
        ["from", "to"].forEach(function(key2) {
          if (tx[key2] == null) {
            return;
          }
          logger15.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
        });
        tx.to = this.resolvedAddress;
        return this.deployed().then(() => {
          return this.signer.sendTransaction(tx);
        });
      }
      // Reconnect to a different signer or provider
      connect(signerOrProvider) {
        if (typeof signerOrProvider === "string") {
          signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
        }
        const contract = new this.constructor(this.address, this.interface, signerOrProvider);
        if (this.deployTransaction) {
          defineReadOnly(contract, "deployTransaction", this.deployTransaction);
        }
        return contract;
      }
      // Re-attach to a different on-chain instance of this contract
      attach(addressOrName) {
        return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
      }
      static isIndexed(value) {
        return Indexed.isIndexed(value);
      }
      _normalizeRunningEvent(runningEvent) {
        if (this._runningEvents[runningEvent.tag]) {
          return this._runningEvents[runningEvent.tag];
        }
        return runningEvent;
      }
      _getRunningEvent(eventName) {
        if (typeof eventName === "string") {
          if (eventName === "error") {
            return this._normalizeRunningEvent(new ErrorRunningEvent());
          }
          if (eventName === "event") {
            return this._normalizeRunningEvent(new RunningEvent("event", null));
          }
          if (eventName === "*") {
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
          }
          const fragment = this.interface.getEvent(eventName);
          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
        }
        if (eventName.topics && eventName.topics.length > 0) {
          try {
            const topic = eventName.topics[0];
            if (typeof topic !== "string") {
              throw new Error("invalid topic");
            }
            const fragment = this.interface.getEvent(topic);
            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
          } catch (error) {
          }
          const filter = {
            address: this.address,
            topics: eventName.topics
          };
          return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
        }
        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
      }
      _checkRunningEvents(runningEvent) {
        if (runningEvent.listenerCount() === 0) {
          delete this._runningEvents[runningEvent.tag];
          const emit = this._wrappedEmits[runningEvent.tag];
          if (emit && runningEvent.filter) {
            this.provider.off(runningEvent.filter, emit);
            delete this._wrappedEmits[runningEvent.tag];
          }
        }
      }
      // Subclasses can override this to gracefully recover
      // from parse errors if they wish
      _wrapEvent(runningEvent, log, listener) {
        const event = deepCopy(log);
        event.removeListener = () => {
          if (!listener) {
            return;
          }
          runningEvent.removeListener(listener);
          this._checkRunningEvents(runningEvent);
        };
        event.getBlock = () => {
          return this.provider.getBlock(log.blockHash);
        };
        event.getTransaction = () => {
          return this.provider.getTransaction(log.transactionHash);
        };
        event.getTransactionReceipt = () => {
          return this.provider.getTransactionReceipt(log.transactionHash);
        };
        runningEvent.prepareEvent(event);
        return event;
      }
      _addEventListener(runningEvent, listener, once) {
        if (!this.provider) {
          logger15.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
        }
        runningEvent.addListener(listener, once);
        this._runningEvents[runningEvent.tag] = runningEvent;
        if (!this._wrappedEmits[runningEvent.tag]) {
          const wrappedEmit = (log) => {
            let event = this._wrapEvent(runningEvent, log, listener);
            if (event.decodeError == null) {
              try {
                const args = runningEvent.getEmit(event);
                this.emit(runningEvent.filter, ...args);
              } catch (error) {
                event.decodeError = error.error;
              }
            }
            if (runningEvent.filter != null) {
              this.emit("event", event);
            }
            if (event.decodeError != null) {
              this.emit("error", event.decodeError, event);
            }
          };
          this._wrappedEmits[runningEvent.tag] = wrappedEmit;
          if (runningEvent.filter != null) {
            this.provider.on(runningEvent.filter, wrappedEmit);
          }
        }
      }
      queryFilter(event, fromBlockOrBlockhash, toBlock) {
        const runningEvent = this._getRunningEvent(event);
        const filter = shallowCopy(runningEvent.filter);
        if (typeof fromBlockOrBlockhash === "string" && isHexString(fromBlockOrBlockhash, 32)) {
          if (toBlock != null) {
            logger15.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
          }
          filter.blockHash = fromBlockOrBlockhash;
        } else {
          filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
          filter.toBlock = toBlock != null ? toBlock : "latest";
        }
        return this.provider.getLogs(filter).then((logs) => {
          return logs.map((log) => this._wrapEvent(runningEvent, log, null));
        });
      }
      on(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, false);
        return this;
      }
      once(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, true);
        return this;
      }
      emit(eventName, ...args) {
        if (!this.provider) {
          return false;
        }
        const runningEvent = this._getRunningEvent(eventName);
        const result = runningEvent.run(args) > 0;
        this._checkRunningEvents(runningEvent);
        return result;
      }
      listenerCount(eventName) {
        if (!this.provider) {
          return 0;
        }
        if (eventName == null) {
          return Object.keys(this._runningEvents).reduce((accum, key2) => {
            return accum + this._runningEvents[key2].listenerCount();
          }, 0);
        }
        return this._getRunningEvent(eventName).listenerCount();
      }
      listeners(eventName) {
        if (!this.provider) {
          return [];
        }
        if (eventName == null) {
          const result = [];
          for (let tag in this._runningEvents) {
            this._runningEvents[tag].listeners().forEach((listener) => {
              result.push(listener);
            });
          }
          return result;
        }
        return this._getRunningEvent(eventName).listeners();
      }
      removeAllListeners(eventName) {
        if (!this.provider) {
          return this;
        }
        if (eventName == null) {
          for (const tag in this._runningEvents) {
            const runningEvent2 = this._runningEvents[tag];
            runningEvent2.removeAllListeners();
            this._checkRunningEvents(runningEvent2);
          }
          return this;
        }
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeAllListeners();
        this._checkRunningEvents(runningEvent);
        return this;
      }
      off(eventName, listener) {
        if (!this.provider) {
          return this;
        }
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeListener(listener);
        this._checkRunningEvents(runningEvent);
        return this;
      }
      removeListener(eventName, listener) {
        return this.off(eventName, listener);
      }
    };
    Contract = class extends BaseContract {
    };
    ContractFactory = class {
      constructor(contractInterface, bytecode, signer) {
        let bytecodeHex = null;
        if (typeof bytecode === "string") {
          bytecodeHex = bytecode;
        } else if (isBytes(bytecode)) {
          bytecodeHex = hexlify(bytecode);
        } else if (bytecode && typeof bytecode.object === "string") {
          bytecodeHex = bytecode.object;
        } else {
          bytecodeHex = "!";
        }
        if (bytecodeHex.substring(0, 2) !== "0x") {
          bytecodeHex = "0x" + bytecodeHex;
        }
        if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {
          logger15.throwArgumentError("invalid bytecode", "bytecode", bytecode);
        }
        if (signer && !Signer.isSigner(signer)) {
          logger15.throwArgumentError("invalid signer", "signer", signer);
        }
        defineReadOnly(this, "bytecode", bytecodeHex);
        defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
        defineReadOnly(this, "signer", signer || null);
      }
      // @TODO: Future; rename to populateTransaction?
      getDeployTransaction(...args) {
        let tx = {};
        if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
          tx = shallowCopy(args.pop());
          for (const key2 in tx) {
            if (!allowedTransactionKeys2[key2]) {
              throw new Error("unknown transaction override " + key2);
            }
          }
        }
        ["data", "from", "to"].forEach((key2) => {
          if (tx[key2] == null) {
            return;
          }
          logger15.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
        });
        if (tx.value) {
          const value = BigNumber.from(tx.value);
          if (!value.isZero() && !this.interface.deploy.payable) {
            logger15.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "overrides.value",
              value: tx.value
            });
          }
        }
        logger15.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
        tx.data = hexlify(concat([
          this.bytecode,
          this.interface.encodeDeploy(args)
        ]));
        return tx;
      }
      deploy(...args) {
        return __awaiter4(this, void 0, void 0, function* () {
          let overrides = {};
          if (args.length === this.interface.deploy.inputs.length + 1) {
            overrides = args.pop();
          }
          logger15.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
          const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
          params.push(overrides);
          const unsignedTx = this.getDeployTransaction(...params);
          const tx = yield this.signer.sendTransaction(unsignedTx);
          const address = getStatic(this.constructor, "getContractAddress")(tx);
          const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
          addContractWait(contract, tx);
          defineReadOnly(contract, "deployTransaction", tx);
          return contract;
        });
      }
      attach(address) {
        return this.constructor.getContract(address, this.interface, this.signer);
      }
      connect(signer) {
        return new this.constructor(this.interface, this.bytecode, signer);
      }
      static fromSolidity(compilerOutput, signer) {
        if (compilerOutput == null) {
          logger15.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
        }
        if (typeof compilerOutput === "string") {
          compilerOutput = JSON.parse(compilerOutput);
        }
        const abi = compilerOutput.abi;
        let bytecode = null;
        if (compilerOutput.bytecode) {
          bytecode = compilerOutput.bytecode;
        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
          bytecode = compilerOutput.evm.bytecode;
        }
        return new this(abi, bytecode, signer);
      }
      static getInterface(contractInterface) {
        return Contract.getInterface(contractInterface);
      }
      static getContractAddress(tx) {
        return getContractAddress(tx);
      }
      static getContract(address, contractInterface, signer) {
        return new Contract(address, contractInterface, signer);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+basex@5.7.0/node_modules/@ethersproject/basex/lib.esm/index.js
var BaseX, Base32, Base58;
var init_lib25 = __esm({
  "node_modules/.pnpm/@ethersproject+basex@5.7.0/node_modules/@ethersproject/basex/lib.esm/index.js"() {
    init_lib13();
    init_lib15();
    BaseX = class {
      constructor(alphabet) {
        defineReadOnly(this, "alphabet", alphabet);
        defineReadOnly(this, "base", alphabet.length);
        defineReadOnly(this, "_alphabetMap", {});
        defineReadOnly(this, "_leader", alphabet.charAt(0));
        for (let i = 0; i < alphabet.length; i++) {
          this._alphabetMap[alphabet.charAt(i)] = i;
        }
      }
      encode(value) {
        let source = arrayify(value);
        if (source.length === 0) {
          return "";
        }
        let digits = [0];
        for (let i = 0; i < source.length; ++i) {
          let carry = source[i];
          for (let j = 0; j < digits.length; ++j) {
            carry += digits[j] << 8;
            digits[j] = carry % this.base;
            carry = carry / this.base | 0;
          }
          while (carry > 0) {
            digits.push(carry % this.base);
            carry = carry / this.base | 0;
          }
        }
        let string = "";
        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
          string += this._leader;
        }
        for (let q = digits.length - 1; q >= 0; --q) {
          string += this.alphabet[digits[q]];
        }
        return string;
      }
      decode(value) {
        if (typeof value !== "string") {
          throw new TypeError("Expected String");
        }
        let bytes = [];
        if (value.length === 0) {
          return new Uint8Array(bytes);
        }
        bytes.push(0);
        for (let i = 0; i < value.length; i++) {
          let byte = this._alphabetMap[value[i]];
          if (byte === void 0) {
            throw new Error("Non-base" + this.base + " character");
          }
          let carry = byte;
          for (let j = 0; j < bytes.length; ++j) {
            carry += bytes[j] * this.base;
            bytes[j] = carry & 255;
            carry >>= 8;
          }
          while (carry > 0) {
            bytes.push(carry & 255);
            carry >>= 8;
          }
        }
        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
          bytes.push(0);
        }
        return arrayify(new Uint8Array(bytes.reverse()));
      }
    };
    Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  }
});

// node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/types.js
var SupportedAlgorithm;
var init_types = __esm({
  "node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/types.js"() {
    (function(SupportedAlgorithm2) {
      SupportedAlgorithm2["sha256"] = "sha256";
      SupportedAlgorithm2["sha512"] = "sha512";
    })(SupportedAlgorithm || (SupportedAlgorithm = {}));
  }
});

// node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/_version.js
var version12;
var init_version12 = __esm({
  "node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/_version.js"() {
    version12 = "sha2/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/sha2.js
function ripemd160(data) {
  return "0x" + import_hash2.default.ripemd160().update(arrayify(data)).digest("hex");
}
function sha256(data) {
  return "0x" + import_hash2.default.sha256().update(arrayify(data)).digest("hex");
}
function sha512(data) {
  return "0x" + import_hash2.default.sha512().update(arrayify(data)).digest("hex");
}
function computeHmac(algorithm, key2, data) {
  if (!SupportedAlgorithm[algorithm]) {
    logger16.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "hmac",
      algorithm
    });
  }
  return "0x" + import_hash2.default.hmac(import_hash2.default[algorithm], arrayify(key2)).update(arrayify(data)).digest("hex");
}
var import_hash2, logger16;
var init_sha2 = __esm({
  "node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/sha2.js"() {
    "use strict";
    import_hash2 = __toESM(require_hash());
    init_lib13();
    init_types();
    init_lib12();
    init_version12();
    logger16 = new Logger(version12);
  }
});

// node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/index.js
var init_lib26 = __esm({
  "node_modules/.pnpm/@ethersproject+sha2@5.7.0/node_modules/@ethersproject/sha2/lib.esm/index.js"() {
    init_sha2();
    init_types();
  }
});

// node_modules/.pnpm/@ethersproject+pbkdf2@5.7.0/node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js
function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
  password = arrayify(password);
  salt = arrayify(salt);
  let hLen;
  let l = 1;
  const DK = new Uint8Array(keylen);
  const block1 = new Uint8Array(salt.length + 4);
  block1.set(salt);
  let r;
  let T;
  for (let i = 1; i <= l; i++) {
    block1[salt.length] = i >> 24 & 255;
    block1[salt.length + 1] = i >> 16 & 255;
    block1[salt.length + 2] = i >> 8 & 255;
    block1[salt.length + 3] = i & 255;
    let U = arrayify(computeHmac(hashAlgorithm, password, block1));
    if (!hLen) {
      hLen = U.length;
      T = new Uint8Array(hLen);
      l = Math.ceil(keylen / hLen);
      r = keylen - (l - 1) * hLen;
    }
    T.set(U);
    for (let j = 1; j < iterations; j++) {
      U = arrayify(computeHmac(hashAlgorithm, password, U));
      for (let k = 0; k < hLen; k++)
        T[k] ^= U[k];
    }
    const destPos = (i - 1) * hLen;
    const len = i === l ? r : hLen;
    DK.set(arrayify(T).slice(0, len), destPos);
  }
  return hexlify(DK);
}
var init_pbkdf2 = __esm({
  "node_modules/.pnpm/@ethersproject+pbkdf2@5.7.0/node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js"() {
    "use strict";
    init_lib13();
    init_lib26();
  }
});

// node_modules/.pnpm/@ethersproject+pbkdf2@5.7.0/node_modules/@ethersproject/pbkdf2/lib.esm/index.js
var init_lib27 = __esm({
  "node_modules/.pnpm/@ethersproject+pbkdf2@5.7.0/node_modules/@ethersproject/pbkdf2/lib.esm/index.js"() {
    init_pbkdf2();
  }
});

// node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
function createCommonjsModule(fn, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn(module, module.exports), module.exports;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
function assert(val, msg) {
  if (!val)
    throw new Error(msg || "Assertion failed");
}
function BaseCurve(type, conf) {
  this.type = type;
  this.p = new import_bn2.default(conf.p, 16);
  this.red = conf.prime ? import_bn2.default.red(conf.prime) : import_bn2.default.mont(this.p);
  this.zero = new import_bn2.default(0).toRed(this.red);
  this.one = new import_bn2.default(1).toRed(this.red);
  this.two = new import_bn2.default(2).toRed(this.red);
  this.n = conf.n && new import_bn2.default(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0;
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
function ShortCurve(conf) {
  base.call(this, "short", conf);
  this.a = new import_bn2.default(conf.a, 16).toRed(this.red);
  this.b = new import_bn2.default(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
function Point(curve, x, y, isRed) {
  base.BasePoint.call(this, curve, "affine");
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new import_bn2.default(x, 16);
    this.y = new import_bn2.default(y, 16);
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
function JPoint(curve, x, y, z) {
  base.BasePoint.call(this, curve, "jacobian");
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new import_bn2.default(0);
  } else {
    this.x = new import_bn2.default(x, 16);
    this.y = new import_bn2.default(y, 16);
    this.z = new import_bn2.default(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}
function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
  var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
  minimalisticAssert(
    entropy.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  );
  this._init(entropy, nonce, pers);
}
function KeyPair(ec2, options) {
  this.ec = ec2;
  this.priv = null;
  this.pub = null;
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
function Signature(options, enc) {
  if (options instanceof Signature)
    return options;
  if (this._importDER(options, enc))
    return;
  assert$4(options.r && options.s, "Signature without r or s");
  this.r = new import_bn2.default(options.r, 16);
  this.s = new import_bn2.default(options.s, 16);
  if (options.recoveryParam === void 0)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
function Position() {
  this.place = 0;
}
function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 128)) {
    return initial;
  }
  var octetLen = initial & 15;
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }
  if (val <= 127) {
    return false;
  }
  p.place = off;
  return val;
}
function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}
function constructLength(arr, len) {
  if (len < 128) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 128);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 255);
  }
  arr.push(len);
}
function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);
  if (typeof options === "string") {
    assert$5(
      Object.prototype.hasOwnProperty.call(curves_1, options),
      "Unknown curve " + options
    );
    options = curves_1[options];
  }
  if (options instanceof curves_1.PresetCurve)
    options = { curve: options };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);
  this.hash = options.hash || options.curve.hash;
}
var import_bn2, import_hash3, minimalisticAssert, utils_1, utils_1$1, getNAF, getJSF, assert$1, base, inherits_browser, assert$2, short_1, curve_1, curves_1, hmacDrbg, assert$3, key, assert$4, signature, rand, assert$5, ec, elliptic_1, EC$1;
var init_elliptic = __esm({
  "node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js"() {
    import_bn2 = __toESM(require_bn());
    import_hash3 = __toESM(require_hash());
    minimalisticAssert = assert;
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || "Assertion failed: " + l + " != " + r);
    };
    utils_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      function toArray(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i = 0; i < msg.length; i++)
            res[i] = msg[i] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (var i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        } else {
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            var hi = c >> 8;
            var lo = c & 255;
            if (hi)
              res.push(hi, lo);
            else
              res.push(lo);
          }
        }
        return res;
      }
      utils.toArray = toArray;
      function zero2(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      utils.zero2 = zero2;
      function toHex2(msg) {
        var res = "";
        for (var i = 0; i < msg.length; i++)
          res += zero2(msg[i].toString(16));
        return res;
      }
      utils.toHex = toHex2;
      utils.encode = function encode4(arr, enc) {
        if (enc === "hex")
          return toHex2(arr);
        else
          return arr;
      };
    });
    utils_1$1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      utils.assert = minimalisticAssert;
      utils.toArray = utils_1.toArray;
      utils.zero2 = utils_1.zero2;
      utils.toHex = utils_1.toHex;
      utils.encode = utils_1.encode;
      function getNAF2(num, w, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        naf.fill(0);
        var ws = 1 << w + 1;
        var k = num.clone();
        for (var i = 0; i < naf.length; i++) {
          var z;
          var mod = k.andln(ws - 1);
          if (k.isOdd()) {
            if (mod > (ws >> 1) - 1)
              z = (ws >> 1) - mod;
            else
              z = mod;
            k.isubn(z);
          } else {
            z = 0;
          }
          naf[i] = z;
          k.iushrn(1);
        }
        return naf;
      }
      utils.getNAF = getNAF2;
      function getJSF2(k1, k2) {
        var jsf = [
          [],
          []
        ];
        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
          var m14 = k1.andln(3) + d1 & 3;
          var m24 = k2.andln(3) + d2 & 3;
          if (m14 === 3)
            m14 = -1;
          if (m24 === 3)
            m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
              u1 = -m14;
            else
              u1 = m14;
          }
          jsf[0].push(u1);
          var u2;
          if ((m24 & 1) === 0) {
            u2 = 0;
          } else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
              u2 = -m24;
            else
              u2 = m24;
          }
          jsf[1].push(u2);
          if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
          if (2 * d2 === u2 + 1)
            d2 = 1 - d2;
          k1.iushrn(1);
          k2.iushrn(1);
        }
        return jsf;
      }
      utils.getJSF = getJSF2;
      function cachedProperty(obj, name, computer) {
        var key2 = "_" + name;
        obj.prototype[name] = function cachedProperty2() {
          return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
        };
      }
      utils.cachedProperty = cachedProperty;
      function parseBytes(bytes) {
        return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
      }
      utils.parseBytes = parseBytes;
      function intFromLE(bytes) {
        return new import_bn2.default(bytes, "hex", "le");
      }
      utils.intFromLE = intFromLE;
    });
    getNAF = utils_1$1.getNAF;
    getJSF = utils_1$1.getJSF;
    assert$1 = utils_1$1.assert;
    base = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$1(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);
        if (i < 0)
          break;
        var z = naf[i];
        assert$1(z !== 0);
        if (p.type === "affine") {
          if (z > 0)
            acc = acc.mixedAdd(wnd[z - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0)
            acc = acc.add(wnd[z - 1 >> 1]);
          else
            acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [
          points[a],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b]
          /* 7 */
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][z - 1 >> 1];
          else if (z < 0)
            p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === "affine")
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      for (i = 0; i < len; i++)
        wnd[i] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate2() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert$1(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode2(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode2(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl3 = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl3);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };
    inherits_browser = createCommonjsModule(function(module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    });
    assert$2 = utils_1$1.assert;
    inherits_browser(ShortCurve, base);
    short_1 = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new import_bn2.default(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new import_bn2.default(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new import_bn2.default(vec.a, 16),
            b: new import_bn2.default(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : import_bn2.default.mont(num);
      var tinv = new import_bn2.default(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new import_bn2.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new import_bn2.default(1);
      var y1 = new import_bn2.default(0);
      var x2 = new import_bn2.default(0);
      var y2 = new import_bn2.default(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new import_bn2.default(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve.prototype.validate = function validate3(point3) {
      if (point3.inf)
        return true;
      var x = point3.x;
      var y = point3.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    inherits_browser(Point, base.BasePoint);
    ShortCurve.prototype.point = function point2(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta2() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p) {
      if (this.inf)
        return p;
      if (p.inf)
        return this;
      if (this.eq(p))
        return this.dbl();
      if (this.neg().eq(p))
        return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k) {
      k = new import_bn2.default(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq2(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    inherits_browser(JPoint, base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg2() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add2(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      if (this.isInfinity())
        return p.toJ();
      if (p.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp2(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl2() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul2(k, kbase) {
      k = new import_bn2.default(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint.prototype.eq = function eq3(p) {
      if (p.type === "affine")
        return this.eq(p.toJ());
      if (this === p)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect2() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity2() {
      return this.z.cmpn(0) === 0;
    };
    curve_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curve = exports;
      curve.base = base;
      curve.short = short_1;
      curve.mont = /*RicMoo:ethers:require(./mont)*/
      null;
      curve.edwards = /*RicMoo:ethers:require(./edwards)*/
      null;
    });
    curves_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curves = exports;
      var assert2 = utils_1$1.assert;
      function PresetCurve(options) {
        if (options.type === "short")
          this.curve = new curve_1.short(options);
        else if (options.type === "edwards")
          this.curve = new curve_1.edwards(options);
        else
          this.curve = new curve_1.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert2(this.g.validate(), "Invalid curve");
        assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves.PresetCurve = PresetCurve;
      function defineCurve(name, options) {
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          get: function() {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name, {
              configurable: true,
              enumerable: true,
              value: curve
            });
            return curve;
          }
        });
      }
      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: import_hash3.default.sha256,
        gRed: false,
        g: [
          "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
          "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
      });
      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: import_hash3.default.sha256,
        gRed: false,
        g: [
          "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
          "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
      });
      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: import_hash3.default.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
      });
      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: import_hash3.default.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
      });
      defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: import_hash3.default.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
      });
      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash3.default.sha256,
        gRed: false,
        g: [
          "9"
        ]
      });
      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        // -121665 * (121666^(-1)) (mod P)
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash3.default.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
          // 4/5
          "6666666666666666666666666666666666666666666666666666666666666658"
        ]
      });
      var pre;
      try {
        pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/
        null.crash();
      } catch (e) {
        pre = void 0;
      }
      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: import_hash3.default.sha256,
        // Precomputed endomorphism
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
          }
        ],
        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre
        ]
      });
    });
    hmacDrbg = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0;
        this.V[i] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new import_hash3.default.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add3;
        add3 = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils_1.toArray(entropy, entropyEnc);
      add3 = utils_1.toArray(add3, addEnc);
      minimalisticAssert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add3 || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add3;
        add3 = enc;
        enc = null;
      }
      if (add3) {
        add3 = utils_1.toArray(add3, addEnc || "hex");
        this._update(add3);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add3);
      this._reseed++;
      return utils_1.encode(res, enc);
    };
    assert$3 = utils_1$1.assert;
    key = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate4() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
      this.priv = new import_bn2.default(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert$3(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert$3(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert$3(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature2) {
      return this.ec.verify(msg, signature2, this);
    };
    KeyPair.prototype.inspect = function inspect3() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
    assert$4 = utils_1$1.assert;
    signature = Signature;
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 128) {
          r = r.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new import_bn2.default(r);
      this.s = new import_bn2.default(s);
      this.recoveryParam = null;
      return true;
    };
    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
      if (r[0] & 128)
        r = [0].concat(r);
      if (s[0] & 128)
        s = [0].concat(s);
      r = rmPadding(r);
      s = rmPadding(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(2);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
    };
    rand = /*RicMoo:ethers:require(brorand)*/
    (function() {
      throw new Error("unsupported");
    });
    assert$5 = utils_1$1.assert;
    ec = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new key(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new import_bn2.default(2));
      for (; ; ) {
        var priv = new import_bn2.default(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign2(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new import_bn2.default(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new import_bn2.default(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;
        var s = k.invm(this.n).mul(r.mul(key2.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new signature({ r, s, recoveryParam });
      }
    };
    EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      key2 = this.keyFromPublic(key2, enc);
      signature$1 = new signature(signature$1, "hex");
      var r = signature$1.r;
      var s = signature$1.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key2.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.getX().umod(this.n).cmp(r) === 0;
      }
      p = this.g.jmulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.eqXToP(r);
    };
    EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
      assert$5((3 & j) === j, "The recovery param is more than two bits");
      signature$1 = new signature(signature$1, enc);
      var n = this.n;
      var e = new import_bn2.default(msg);
      var r = signature$1.r;
      var s = signature$1.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature$1.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r, s2);
    };
    EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature$1, i);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error("Unable to find valid recovery factor");
    };
    elliptic_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var elliptic = exports;
      elliptic.version = /*RicMoo:ethers*/
      { version: "6.5.4" }.version;
      elliptic.utils = utils_1$1;
      elliptic.rand = /*RicMoo:ethers:require(brorand)*/
      (function() {
        throw new Error("unsupported");
      });
      elliptic.curve = curve_1;
      elliptic.curves = curves_1;
      elliptic.ec = ec;
      elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/
      null;
    });
    EC$1 = elliptic_1.ec;
  }
});

// node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/_version.js
var version13;
var init_version13 = __esm({
  "node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/_version.js"() {
    version13 = "signing-key/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/index.js
function getCurve() {
  if (!_curve) {
    _curve = new EC$1("secp256k1");
  }
  return _curve;
}
function recoverPublicKey(digest, signature2) {
  const sig = splitSignature(signature2);
  const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
  return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key2, compressed) {
  const bytes = arrayify(key2);
  if (bytes.length === 32) {
    const signingKey = new SigningKey(bytes);
    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
    }
    return signingKey.publicKey;
  } else if (bytes.length === 33) {
    if (compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
  } else if (bytes.length === 65) {
    if (!compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
  }
  return logger17.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
var logger17, _curve, SigningKey;
var init_lib28 = __esm({
  "node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/index.js"() {
    "use strict";
    init_elliptic();
    init_lib13();
    init_lib15();
    init_lib12();
    init_version13();
    logger17 = new Logger(version13);
    _curve = null;
    SigningKey = class {
      constructor(privateKey) {
        defineReadOnly(this, "curve", "secp256k1");
        defineReadOnly(this, "privateKey", hexlify(privateKey));
        if (hexDataLength(this.privateKey) !== 32) {
          logger17.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
        }
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
        defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
        defineReadOnly(this, "_isSigningKey", true);
      }
      _addPoint(other) {
        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
        const p1 = getCurve().keyFromPublic(arrayify(other));
        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
      }
      signDigest(digest) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const digestBytes = arrayify(digest);
        if (digestBytes.length !== 32) {
          logger17.throwArgumentError("bad digest length", "digest", digest);
        }
        const signature2 = keyPair2.sign(digestBytes, { canonical: true });
        return splitSignature({
          recoveryParam: signature2.recoveryParam,
          r: hexZeroPad("0x" + signature2.r.toString(16), 32),
          s: hexZeroPad("0x" + signature2.s.toString(16), 32)
        });
      }
      computeSharedSecret(otherKey) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
        return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
      }
      static isSigningKey(value) {
        return !!(value && value._isSigningKey);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/_version.js
var version14;
var init_version14 = __esm({
  "node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/_version.js"() {
    version14 = "wordlists/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/wordlist.js
var exportWordlist, logger18, Wordlist;
var init_wordlist = __esm({
  "node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/wordlist.js"() {
    "use strict";
    init_lib10();
    init_lib15();
    init_lib12();
    init_version14();
    exportWordlist = false;
    logger18 = new Logger(version14);
    Wordlist = class _Wordlist {
      constructor(locale) {
        logger18.checkAbstract(new.target, _Wordlist);
        defineReadOnly(this, "locale", locale);
      }
      // Subclasses may override this
      split(mnemonic) {
        return mnemonic.toLowerCase().split(/ +/g);
      }
      // Subclasses may override this
      join(words2) {
        return words2.join(" ");
      }
      static check(wordlist2) {
        const words2 = [];
        for (let i = 0; i < 2048; i++) {
          const word = wordlist2.getWord(i);
          if (i !== wordlist2.getWordIndex(word)) {
            return "0x";
          }
          words2.push(word);
        }
        return id(words2.join("\n") + "\n");
      }
      static register(lang, name) {
        if (!name) {
          name = lang.locale;
        }
        if (exportWordlist) {
          try {
            const anyGlobal2 = window;
            if (anyGlobal2._ethers && anyGlobal2._ethers.wordlists) {
              if (!anyGlobal2._ethers.wordlists[name]) {
                defineReadOnly(anyGlobal2._ethers.wordlists, name, lang);
              }
            }
          } catch (error) {
          }
        }
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/lang-en.js
function loadWords(lang) {
  if (wordlist != null) {
    return;
  }
  wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
  if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
    wordlist = null;
    throw new Error("BIP39 Wordlist for en (English) FAILED");
  }
}
var words, wordlist, LangEn, langEn;
var init_lang_en = __esm({
  "node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/lang-en.js"() {
    "use strict";
    init_wordlist();
    words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    wordlist = null;
    LangEn = class extends Wordlist {
      constructor() {
        super("en");
      }
      getWord(index) {
        loadWords(this);
        return wordlist[index];
      }
      getWordIndex(word) {
        loadWords(this);
        return wordlist.indexOf(word);
      }
    };
    langEn = new LangEn();
    Wordlist.register(langEn);
  }
});

// node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/wordlists.js
var wordlists;
var init_wordlists = __esm({
  "node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/wordlists.js"() {
    "use strict";
    init_lang_en();
    wordlists = {
      en: langEn
    };
  }
});

// node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/index.js
var init_lib29 = __esm({
  "node_modules/.pnpm/@ethersproject+wordlists@5.7.0/node_modules/@ethersproject/wordlists/lib.esm/index.js"() {
    "use strict";
    init_wordlist();
    init_wordlists();
  }
});

// node_modules/.pnpm/@ethersproject+hdnode@5.7.0/node_modules/@ethersproject/hdnode/lib.esm/_version.js
var version15;
var init_version15 = __esm({
  "node_modules/.pnpm/@ethersproject+hdnode@5.7.0/node_modules/@ethersproject/hdnode/lib.esm/_version.js"() {
    version15 = "hdnode/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+hdnode@5.7.0/node_modules/@ethersproject/hdnode/lib.esm/index.js
function getUpperMask(bits) {
  return (1 << bits) - 1 << 8 - bits;
}
function getLowerMask(bits) {
  return (1 << bits) - 1;
}
function bytes32(value) {
  return hexZeroPad(hexlify(value), 32);
}
function base58check(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
function getWordlist(wordlist2) {
  if (wordlist2 == null) {
    return wordlists["en"];
  }
  if (typeof wordlist2 === "string") {
    const words2 = wordlists[wordlist2];
    if (words2 == null) {
      logger19.throwArgumentError("unknown locale", "wordlist", wordlist2);
    }
    return words2;
  }
  return wordlist2;
}
function mnemonicToSeed(mnemonic, password) {
  if (!password) {
    password = "";
  }
  const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
}
function mnemonicToEntropy(mnemonic, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  logger19.checkNormalize();
  const words2 = wordlist2.split(mnemonic);
  if (words2.length % 3 !== 0) {
    throw new Error("invalid mnemonic");
  }
  const entropy = arrayify(new Uint8Array(Math.ceil(11 * words2.length / 8)));
  let offset = 0;
  for (let i = 0; i < words2.length; i++) {
    let index = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
    if (index === -1) {
      throw new Error("invalid mnemonic");
    }
    for (let bit = 0; bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset++;
    }
  }
  const entropyBits = 32 * words2.length / 3;
  const checksumBits = words2.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
    throw new Error("invalid checksum");
  }
  return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  entropy = arrayify(entropy);
  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new Error("invalid entropy");
  }
  const indices = [0];
  let remainingBits = 11;
  for (let i = 0; i < entropy.length; i++) {
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i];
      remainingBits -= 8;
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
      indices.push(entropy[i] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  const checksumBits = entropy.length / 4;
  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum >> 8 - checksumBits;
  return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
}
function isValidMnemonic(mnemonic, wordlist2) {
  try {
    mnemonicToEntropy(mnemonic, wordlist2);
    return true;
  } catch (error) {
  }
  return false;
}
function getAccountPath(index) {
  if (typeof index !== "number" || index < 0 || index >= HardenedBit || index % 1) {
    logger19.throwArgumentError("invalid account index", "index", index);
  }
  return `m/44'/60'/${index}'/0/0`;
}
var logger19, N, MasterSecret, HardenedBit, _constructorGuard4, defaultPath, HDNode;
var init_lib30 = __esm({
  "node_modules/.pnpm/@ethersproject+hdnode@5.7.0/node_modules/@ethersproject/hdnode/lib.esm/index.js"() {
    "use strict";
    init_lib25();
    init_lib13();
    init_lib14();
    init_lib20();
    init_lib27();
    init_lib15();
    init_lib28();
    init_lib26();
    init_lib11();
    init_lib29();
    init_lib12();
    init_version15();
    logger19 = new Logger(version15);
    N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    MasterSecret = toUtf8Bytes("Bitcoin seed");
    HardenedBit = 2147483648;
    _constructorGuard4 = {};
    defaultPath = "m/44'/60'/0'/0/0";
    HDNode = class _HDNode {
      /**
       *  This constructor should not be called directly.
       *
       *  Please use:
       *   - fromMnemonic
       *   - fromSeed
       */
      constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
        if (constructorGuard !== _constructorGuard4) {
          throw new Error("HDNode constructor cannot be called directly");
        }
        if (privateKey) {
          const signingKey = new SigningKey(privateKey);
          defineReadOnly(this, "privateKey", signingKey.privateKey);
          defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
        } else {
          defineReadOnly(this, "privateKey", null);
          defineReadOnly(this, "publicKey", hexlify(publicKey));
        }
        defineReadOnly(this, "parentFingerprint", parentFingerprint);
        defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));
        defineReadOnly(this, "address", computeAddress(this.publicKey));
        defineReadOnly(this, "chainCode", chainCode);
        defineReadOnly(this, "index", index);
        defineReadOnly(this, "depth", depth);
        if (mnemonicOrPath == null) {
          defineReadOnly(this, "mnemonic", null);
          defineReadOnly(this, "path", null);
        } else if (typeof mnemonicOrPath === "string") {
          defineReadOnly(this, "mnemonic", null);
          defineReadOnly(this, "path", mnemonicOrPath);
        } else {
          defineReadOnly(this, "mnemonic", mnemonicOrPath);
          defineReadOnly(this, "path", mnemonicOrPath.path);
        }
      }
      get extendedKey() {
        if (this.depth >= 256) {
          throw new Error("Depth too large!");
        }
        return base58check(concat([
          this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
          hexlify(this.depth),
          this.parentFingerprint,
          hexZeroPad(hexlify(this.index), 4),
          this.chainCode,
          this.privateKey != null ? concat(["0x00", this.privateKey]) : this.publicKey
        ]));
      }
      neuter() {
        return new _HDNode(_constructorGuard4, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
      }
      _derive(index) {
        if (index > 4294967295) {
          throw new Error("invalid index - " + String(index));
        }
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
        }
        const data = new Uint8Array(37);
        if (index & HardenedBit) {
          if (!this.privateKey) {
            throw new Error("cannot derive child of neutered node");
          }
          data.set(arrayify(this.privateKey), 1);
          if (path) {
            path += "'";
          }
        } else {
          data.set(arrayify(this.publicKey));
        }
        for (let i = 24; i >= 0; i -= 8) {
          data[33 + (i >> 3)] = index >> 24 - i & 255;
        }
        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
        const IL = I.slice(0, 32);
        const IR = I.slice(32);
        let ki = null;
        let Ki = null;
        if (this.privateKey) {
          ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
        } else {
          const ek = new SigningKey(hexlify(IL));
          Ki = ek._addPoint(this.publicKey);
        }
        let mnemonicOrPath = path;
        const srcMnemonic = this.mnemonic;
        if (srcMnemonic) {
          mnemonicOrPath = Object.freeze({
            phrase: srcMnemonic.phrase,
            path,
            locale: srcMnemonic.locale || "en"
          });
        }
        return new _HDNode(_constructorGuard4, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
      }
      derivePath(path) {
        const components = path.split("/");
        if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
          throw new Error("invalid path - " + path);
        }
        if (components[0] === "m") {
          components.shift();
        }
        let result = this;
        for (let i = 0; i < components.length; i++) {
          const component = components[i];
          if (component.match(/^[0-9]+'$/)) {
            const index = parseInt(component.substring(0, component.length - 1));
            if (index >= HardenedBit) {
              throw new Error("invalid path index - " + component);
            }
            result = result._derive(HardenedBit + index);
          } else if (component.match(/^[0-9]+$/)) {
            const index = parseInt(component);
            if (index >= HardenedBit) {
              throw new Error("invalid path index - " + component);
            }
            result = result._derive(index);
          } else {
            throw new Error("invalid path component - " + component);
          }
        }
        return result;
      }
      static _fromSeed(seed, mnemonic) {
        const seedArray = arrayify(seed);
        if (seedArray.length < 16 || seedArray.length > 64) {
          throw new Error("invalid seed");
        }
        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
        return new _HDNode(_constructorGuard4, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
      }
      static fromMnemonic(mnemonic, password, wordlist2) {
        wordlist2 = getWordlist(wordlist2);
        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist2), wordlist2);
        return _HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
          phrase: mnemonic,
          path: "m",
          locale: wordlist2.locale
        });
      }
      static fromSeed(seed) {
        return _HDNode._fromSeed(seed, null);
      }
      static fromExtendedKey(extendedKey) {
        const bytes = Base58.decode(extendedKey);
        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
          logger19.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        }
        const depth = bytes[4];
        const parentFingerprint = hexlify(bytes.slice(5, 9));
        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
        const chainCode = hexlify(bytes.slice(13, 45));
        const key2 = bytes.slice(45, 78);
        switch (hexlify(bytes.slice(0, 4))) {
          // Public Key
          case "0x0488b21e":
          case "0x043587cf":
            return new _HDNode(_constructorGuard4, null, hexlify(key2), parentFingerprint, chainCode, index, depth, null);
          // Private Key
          case "0x0488ade4":
          case "0x04358394 ":
            if (key2[0] !== 0) {
              break;
            }
            return new _HDNode(_constructorGuard4, hexlify(key2.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
        }
        return logger19.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+random@5.7.0/node_modules/@ethersproject/random/lib.esm/_version.js
var version16;
var init_version16 = __esm({
  "node_modules/.pnpm/@ethersproject+random@5.7.0/node_modules/@ethersproject/random/lib.esm/_version.js"() {
    version16 = "random/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+random@5.7.0/node_modules/@ethersproject/random/lib.esm/random.js
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
function randomBytes(length) {
  if (length <= 0 || length > 1024 || length % 1 || length != length) {
    logger20.throwArgumentError("invalid length", "length", length);
  }
  const result = new Uint8Array(length);
  crypto.getRandomValues(result);
  return arrayify(result);
}
var logger20, anyGlobal, crypto;
var init_random = __esm({
  "node_modules/.pnpm/@ethersproject+random@5.7.0/node_modules/@ethersproject/random/lib.esm/random.js"() {
    "use strict";
    init_lib13();
    init_lib12();
    init_version16();
    logger20 = new Logger(version16);
    anyGlobal = getGlobal();
    crypto = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto || !crypto.getRandomValues) {
      logger20.warn("WARNING: Missing strong random number source");
      crypto = {
        getRandomValues: function(buffer) {
          return logger20.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "crypto.getRandomValues"
          });
        }
      };
    }
  }
});

// node_modules/.pnpm/@ethersproject+random@5.7.0/node_modules/@ethersproject/random/lib.esm/shuffle.js
function shuffled(array) {
  array = array.slice();
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    const tmp = array[i];
    array[i] = array[j];
    array[j] = tmp;
  }
  return array;
}
var init_shuffle = __esm({
  "node_modules/.pnpm/@ethersproject+random@5.7.0/node_modules/@ethersproject/random/lib.esm/shuffle.js"() {
    "use strict";
  }
});

// node_modules/.pnpm/@ethersproject+random@5.7.0/node_modules/@ethersproject/random/lib.esm/index.js
var init_lib31 = __esm({
  "node_modules/.pnpm/@ethersproject+random@5.7.0/node_modules/@ethersproject/random/lib.esm/index.js"() {
    "use strict";
    init_random();
    init_shuffle();
  }
});

// node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/_version.js
var version17;
var init_version17 = __esm({
  "node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/_version.js"() {
    version17 = "json-wallets/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/utils.js
function looseArrayify(hexString) {
  if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
    hexString = "0x" + hexString;
  }
  return arrayify(hexString);
}
function zpad(value, length) {
  value = String(value);
  while (value.length < length) {
    value = "0" + value;
  }
  return value;
}
function getPassword(password) {
  if (typeof password === "string") {
    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
  }
  return arrayify(password);
}
function searchPath(object, path) {
  let currentChild = object;
  const comps = path.toLowerCase().split("/");
  for (let i = 0; i < comps.length; i++) {
    let matchingChild = null;
    for (const key2 in currentChild) {
      if (key2.toLowerCase() === comps[i]) {
        matchingChild = currentChild[key2];
        break;
      }
    }
    if (matchingChild === null) {
      return null;
    }
    currentChild = matchingChild;
  }
  return currentChild;
}
function uuidV4(randomBytes2) {
  const bytes = arrayify(randomBytes2);
  bytes[6] = bytes[6] & 15 | 64;
  bytes[8] = bytes[8] & 63 | 128;
  const value = hexlify(bytes);
  return [
    value.substring(2, 10),
    value.substring(10, 14),
    value.substring(14, 18),
    value.substring(18, 22),
    value.substring(22, 34)
  ].join("-");
}
var init_utils = __esm({
  "node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/utils.js"() {
    "use strict";
    init_lib13();
    init_lib20();
  }
});

// node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js
function decrypt(json, password) {
  const data = JSON.parse(json);
  password = getPassword(password);
  const ethaddr = getAddress(searchPath(data, "ethaddr"));
  const encseed = looseArrayify(searchPath(data, "encseed"));
  if (!encseed || encseed.length % 16 !== 0) {
    logger21.throwArgumentError("invalid encseed", "json", json);
  }
  const key2 = arrayify(pbkdf2(password, password, 2e3, 32, "sha256")).slice(0, 16);
  const iv = encseed.slice(0, 16);
  const encryptedSeed = encseed.slice(16);
  const aesCbc = new import_aes_js.default.ModeOfOperation.cbc(key2, iv);
  const seed = import_aes_js.default.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
  let seedHex = "";
  for (let i = 0; i < seed.length; i++) {
    seedHex += String.fromCharCode(seed[i]);
  }
  const seedHexBytes = toUtf8Bytes(seedHex);
  const privateKey = keccak256(seedHexBytes);
  return new CrowdsaleAccount({
    _isCrowdsaleAccount: true,
    address: ethaddr,
    privateKey
  });
}
var import_aes_js, logger21, CrowdsaleAccount;
var init_crowdsale = __esm({
  "node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js"() {
    "use strict";
    import_aes_js = __toESM(require_aes_js());
    init_lib18();
    init_lib13();
    init_lib16();
    init_lib27();
    init_lib20();
    init_lib15();
    init_lib12();
    init_version17();
    init_utils();
    logger21 = new Logger(version17);
    CrowdsaleAccount = class extends Description {
      isCrowdsaleAccount(value) {
        return !!(value && value._isCrowdsaleAccount);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/inspect.js
function isCrowdsaleWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  return data.encseed && data.ethaddr;
}
function isKeystoreWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
    return false;
  }
  return true;
}
function getJsonWalletAddress(json) {
  if (isCrowdsaleWallet(json)) {
    try {
      return getAddress(JSON.parse(json).ethaddr);
    } catch (error) {
      return null;
    }
  }
  if (isKeystoreWallet(json)) {
    try {
      return getAddress(JSON.parse(json).address);
    } catch (error) {
      return null;
    }
  }
  return null;
}
var init_inspect = __esm({
  "node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/inspect.js"() {
    "use strict";
    init_lib18();
  }
});

// node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/keystore.js
function hasMnemonic(value) {
  return value != null && value.mnemonic && value.mnemonic.phrase;
}
function _decrypt(data, key2, ciphertext) {
  const cipher = searchPath(data, "crypto/cipher");
  if (cipher === "aes-128-ctr") {
    const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(key2, counter);
    return arrayify(aesCtr.decrypt(ciphertext));
  }
  return null;
}
function _getAccount(data, key2) {
  const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
  const computedMAC = hexlify(keccak256(concat([key2.slice(16, 32), ciphertext]))).substring(2);
  if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
    throw new Error("invalid password");
  }
  const privateKey = _decrypt(data, key2.slice(0, 16), ciphertext);
  if (!privateKey) {
    logger22.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "decrypt"
    });
  }
  const mnemonicKey = key2.slice(32, 64);
  const address = computeAddress(privateKey);
  if (data.address) {
    let check = data.address.toLowerCase();
    if (check.substring(0, 2) !== "0x") {
      check = "0x" + check;
    }
    if (getAddress(check) !== address) {
      throw new Error("address mismatch");
    }
  }
  const account = {
    _isKeystoreAccount: true,
    address,
    privateKey: hexlify(privateKey)
  };
  if (searchPath(data, "x-ethers/version") === "0.1") {
    const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
    const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
    const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
    const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
    const path = searchPath(data, "x-ethers/path") || defaultPath;
    const locale = searchPath(data, "x-ethers/locale") || "en";
    const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
    try {
      const mnemonic = entropyToMnemonic(entropy, locale);
      const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
      account.mnemonic = node.mnemonic;
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
        throw error;
      }
    }
  }
  return new KeystoreAccount(account);
}
function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
  return arrayify(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
}
function pbkdf22(passwordBytes, salt, count, dkLen, prfFunc) {
  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
}
function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
  const passwordBytes = getPassword(password);
  const kdf = searchPath(data, "crypto/kdf");
  if (kdf && typeof kdf === "string") {
    const throwError = function(name, value) {
      return logger22.throwArgumentError("invalid key-derivation function parameters", name, value);
    };
    if (kdf.toLowerCase() === "scrypt") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      const N2 = parseInt(searchPath(data, "crypto/kdfparams/n"));
      const r = parseInt(searchPath(data, "crypto/kdfparams/r"));
      const p = parseInt(searchPath(data, "crypto/kdfparams/p"));
      if (!N2 || !r || !p) {
        throwError("kdf", kdf);
      }
      if ((N2 & N2 - 1) !== 0) {
        throwError("N", N2);
      }
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return scryptFunc(passwordBytes, salt, N2, r, p, 64, progressCallback);
    } else if (kdf.toLowerCase() === "pbkdf2") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      let prfFunc = null;
      const prf = searchPath(data, "crypto/kdfparams/prf");
      if (prf === "hmac-sha256") {
        prfFunc = "sha256";
      } else if (prf === "hmac-sha512") {
        prfFunc = "sha512";
      } else {
        throwError("prf", prf);
      }
      const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
    }
  }
  return logger22.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
}
function decryptSync(json, password) {
  const data = JSON.parse(json);
  const key2 = _computeKdfKey(data, password, pbkdf2Sync, import_scrypt_js.default.syncScrypt);
  return _getAccount(data, key2);
}
function decrypt2(json, password, progressCallback) {
  return __awaiter5(this, void 0, void 0, function* () {
    const data = JSON.parse(json);
    const key2 = yield _computeKdfKey(data, password, pbkdf22, import_scrypt_js.default.scrypt, progressCallback);
    return _getAccount(data, key2);
  });
}
function encrypt(account, password, options, progressCallback) {
  try {
    if (getAddress(account.address) !== computeAddress(account.privateKey)) {
      throw new Error("address/privateKey mismatch");
    }
    if (hasMnemonic(account)) {
      const mnemonic = account.mnemonic;
      const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
    }
  } catch (e) {
    return Promise.reject(e);
  }
  if (typeof options === "function" && !progressCallback) {
    progressCallback = options;
    options = {};
  }
  if (!options) {
    options = {};
  }
  const privateKey = arrayify(account.privateKey);
  const passwordBytes = getPassword(password);
  let entropy = null;
  let path = null;
  let locale = null;
  if (hasMnemonic(account)) {
    const srcMnemonic = account.mnemonic;
    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
    path = srcMnemonic.path || defaultPath;
    locale = srcMnemonic.locale || "en";
  }
  let client = options.client;
  if (!client) {
    client = "ethers.js";
  }
  let salt = null;
  if (options.salt) {
    salt = arrayify(options.salt);
  } else {
    salt = randomBytes(32);
    ;
  }
  let iv = null;
  if (options.iv) {
    iv = arrayify(options.iv);
    if (iv.length !== 16) {
      throw new Error("invalid iv");
    }
  } else {
    iv = randomBytes(16);
  }
  let uuidRandom = null;
  if (options.uuid) {
    uuidRandom = arrayify(options.uuid);
    if (uuidRandom.length !== 16) {
      throw new Error("invalid uuid");
    }
  } else {
    uuidRandom = randomBytes(16);
  }
  let N2 = 1 << 17, r = 8, p = 1;
  if (options.scrypt) {
    if (options.scrypt.N) {
      N2 = options.scrypt.N;
    }
    if (options.scrypt.r) {
      r = options.scrypt.r;
    }
    if (options.scrypt.p) {
      p = options.scrypt.p;
    }
  }
  return import_scrypt_js.default.scrypt(passwordBytes, salt, N2, r, p, 64, progressCallback).then((key2) => {
    key2 = arrayify(key2);
    const derivedKey = key2.slice(0, 16);
    const macPrefix = key2.slice(16, 32);
    const mnemonicKey = key2.slice(32, 64);
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(derivedKey, counter);
    const ciphertext = arrayify(aesCtr.encrypt(privateKey));
    const mac = keccak256(concat([macPrefix, ciphertext]));
    const data = {
      address: account.address.substring(2).toLowerCase(),
      id: uuidV4(uuidRandom),
      version: 3,
      crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: hexlify(iv).substring(2)
        },
        ciphertext: hexlify(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: hexlify(salt).substring(2),
          n: N2,
          dklen: 32,
          p,
          r
        },
        mac: mac.substring(2)
      }
    };
    if (entropy) {
      const mnemonicIv = randomBytes(16);
      const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
      const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
      const now2 = /* @__PURE__ */ new Date();
      const timestamp = now2.getUTCFullYear() + "-" + zpad(now2.getUTCMonth() + 1, 2) + "-" + zpad(now2.getUTCDate(), 2) + "T" + zpad(now2.getUTCHours(), 2) + "-" + zpad(now2.getUTCMinutes(), 2) + "-" + zpad(now2.getUTCSeconds(), 2) + ".0Z";
      data["x-ethers"] = {
        client,
        gethFilename: "UTC--" + timestamp + "--" + data.address,
        mnemonicCounter: hexlify(mnemonicIv).substring(2),
        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
        path,
        locale,
        version: "0.1"
      };
    }
    return JSON.stringify(data);
  });
}
var import_aes_js2, import_scrypt_js, __awaiter5, logger22, KeystoreAccount;
var init_keystore = __esm({
  "node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/keystore.js"() {
    "use strict";
    import_aes_js2 = __toESM(require_aes_js());
    import_scrypt_js = __toESM(require_scrypt());
    init_lib18();
    init_lib13();
    init_lib30();
    init_lib16();
    init_lib27();
    init_lib31();
    init_lib15();
    init_lib11();
    init_utils();
    init_lib12();
    init_version17();
    __awaiter5 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger22 = new Logger(version17);
    KeystoreAccount = class extends Description {
      isKeystoreAccount(value) {
        return !!(value && value._isKeystoreAccount);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/index.js
function decryptJsonWallet(json, password, progressCallback) {
  if (isCrowdsaleWallet(json)) {
    if (progressCallback) {
      progressCallback(0);
    }
    const account = decrypt(json, password);
    if (progressCallback) {
      progressCallback(1);
    }
    return Promise.resolve(account);
  }
  if (isKeystoreWallet(json)) {
    return decrypt2(json, password, progressCallback);
  }
  return Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(json, password) {
  if (isCrowdsaleWallet(json)) {
    return decrypt(json, password);
  }
  if (isKeystoreWallet(json)) {
    return decryptSync(json, password);
  }
  throw new Error("invalid JSON wallet");
}
var init_lib32 = __esm({
  "node_modules/.pnpm/@ethersproject+json-wallets@5.7.0/node_modules/@ethersproject/json-wallets/lib.esm/index.js"() {
    "use strict";
    init_crowdsale();
    init_inspect();
    init_keystore();
  }
});

// node_modules/.pnpm/@ethersproject+wallet@5.7.0/node_modules/@ethersproject/wallet/lib.esm/_version.js
var version18;
var init_version18 = __esm({
  "node_modules/.pnpm/@ethersproject+wallet@5.7.0/node_modules/@ethersproject/wallet/lib.esm/_version.js"() {
    version18 = "wallet/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+wallet@5.7.0/node_modules/@ethersproject/wallet/lib.esm/index.js
function isAccount(value) {
  return value != null && isHexString(value.privateKey, 32) && value.address != null;
}
function hasMnemonic2(value) {
  const mnemonic = value.mnemonic;
  return mnemonic && mnemonic.phrase;
}
function verifyMessage(message, signature2) {
  return recoverAddress(hashMessage(message), signature2);
}
function verifyTypedData(domain, types, value, signature2) {
  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature2);
}
var __awaiter6, logger23, Wallet;
var init_lib33 = __esm({
  "node_modules/.pnpm/@ethersproject+wallet@5.7.0/node_modules/@ethersproject/wallet/lib.esm/index.js"() {
    "use strict";
    init_lib18();
    init_lib22();
    init_lib23();
    init_lib13();
    init_lib10();
    init_lib30();
    init_lib16();
    init_lib15();
    init_lib31();
    init_lib28();
    init_lib32();
    init_lib11();
    init_lib12();
    init_version18();
    __awaiter6 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger23 = new Logger(version18);
    Wallet = class _Wallet extends Signer {
      constructor(privateKey, provider) {
        super();
        if (isAccount(privateKey)) {
          const signingKey = new SigningKey(privateKey.privateKey);
          defineReadOnly(this, "_signingKey", () => signingKey);
          defineReadOnly(this, "address", computeAddress(this.publicKey));
          if (this.address !== getAddress(privateKey.address)) {
            logger23.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
          }
          if (hasMnemonic2(privateKey)) {
            const srcMnemonic = privateKey.mnemonic;
            defineReadOnly(this, "_mnemonic", () => ({
              phrase: srcMnemonic.phrase,
              path: srcMnemonic.path || defaultPath,
              locale: srcMnemonic.locale || "en"
            }));
            const mnemonic = this.mnemonic;
            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
            if (computeAddress(node.privateKey) !== this.address) {
              logger23.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
            }
          } else {
            defineReadOnly(this, "_mnemonic", () => null);
          }
        } else {
          if (SigningKey.isSigningKey(privateKey)) {
            if (privateKey.curve !== "secp256k1") {
              logger23.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
            }
            defineReadOnly(this, "_signingKey", () => privateKey);
          } else {
            if (typeof privateKey === "string") {
              if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                privateKey = "0x" + privateKey;
              }
            }
            const signingKey = new SigningKey(privateKey);
            defineReadOnly(this, "_signingKey", () => signingKey);
          }
          defineReadOnly(this, "_mnemonic", () => null);
          defineReadOnly(this, "address", computeAddress(this.publicKey));
        }
        if (provider && !Provider.isProvider(provider)) {
          logger23.throwArgumentError("invalid provider", "provider", provider);
        }
        defineReadOnly(this, "provider", provider || null);
      }
      get mnemonic() {
        return this._mnemonic();
      }
      get privateKey() {
        return this._signingKey().privateKey;
      }
      get publicKey() {
        return this._signingKey().publicKey;
      }
      getAddress() {
        return Promise.resolve(this.address);
      }
      connect(provider) {
        return new _Wallet(this, provider);
      }
      signTransaction(transaction) {
        return resolveProperties(transaction).then((tx) => {
          if (tx.from != null) {
            if (getAddress(tx.from) !== this.address) {
              logger23.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
            }
            delete tx.from;
          }
          const signature2 = this._signingKey().signDigest(keccak256(serialize(tx)));
          return serialize(tx, signature2);
        });
      }
      signMessage(message) {
        return __awaiter6(this, void 0, void 0, function* () {
          return joinSignature(this._signingKey().signDigest(hashMessage(message)));
        });
      }
      _signTypedData(domain, types, value) {
        return __awaiter6(this, void 0, void 0, function* () {
          const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
            if (this.provider == null) {
              logger23.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resolveName",
                value: name
              });
            }
            return this.provider.resolveName(name);
          });
          return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
        });
      }
      encrypt(password, options, progressCallback) {
        if (typeof options === "function" && !progressCallback) {
          progressCallback = options;
          options = {};
        }
        if (progressCallback && typeof progressCallback !== "function") {
          throw new Error("invalid callback");
        }
        if (!options) {
          options = {};
        }
        return encrypt(this, password, options, progressCallback);
      }
      /**
       *  Static methods to create Wallet instances.
       */
      static createRandom(options) {
        let entropy = randomBytes(16);
        if (!options) {
          options = {};
        }
        if (options.extraEntropy) {
          entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));
        }
        const mnemonic = entropyToMnemonic(entropy, options.locale);
        return _Wallet.fromMnemonic(mnemonic, options.path, options.locale);
      }
      static fromEncryptedJson(json, password, progressCallback) {
        return decryptJsonWallet(json, password, progressCallback).then((account) => {
          return new _Wallet(account);
        });
      }
      static fromEncryptedJsonSync(json, password) {
        return new _Wallet(decryptJsonWalletSync(json, password));
      }
      static fromMnemonic(mnemonic, path, wordlist2) {
        if (!path) {
          path = defaultPath;
        }
        return new _Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path));
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+networks@5.7.1/node_modules/@ethersproject/networks/lib.esm/_version.js
var version19;
var init_version19 = __esm({
  "node_modules/.pnpm/@ethersproject+networks@5.7.1/node_modules/@ethersproject/networks/lib.esm/_version.js"() {
    version19 = "networks/5.7.1";
  }
});

// node_modules/.pnpm/@ethersproject+networks@5.7.1/node_modules/@ethersproject/networks/lib.esm/index.js
function isRenetworkable(value) {
  return value && typeof value.renetwork === "function";
}
function ethDefaultProvider(network) {
  const func = function(providers, options) {
    if (options == null) {
      options = {};
    }
    const providerList = [];
    if (providers.InfuraProvider && options.infura !== "-") {
      try {
        providerList.push(new providers.InfuraProvider(network, options.infura));
      } catch (error) {
      }
    }
    if (providers.EtherscanProvider && options.etherscan !== "-") {
      try {
        providerList.push(new providers.EtherscanProvider(network, options.etherscan));
      } catch (error) {
      }
    }
    if (providers.AlchemyProvider && options.alchemy !== "-") {
      try {
        providerList.push(new providers.AlchemyProvider(network, options.alchemy));
      } catch (error) {
      }
    }
    if (providers.PocketProvider && options.pocket !== "-") {
      const skip = ["goerli", "ropsten", "rinkeby", "sepolia"];
      try {
        const provider = new providers.PocketProvider(network, options.pocket);
        if (provider.network && skip.indexOf(provider.network.name) === -1) {
          providerList.push(provider);
        }
      } catch (error) {
      }
    }
    if (providers.CloudflareProvider && options.cloudflare !== "-") {
      try {
        providerList.push(new providers.CloudflareProvider(network));
      } catch (error) {
      }
    }
    if (providers.AnkrProvider && options.ankr !== "-") {
      try {
        const skip = ["ropsten"];
        const provider = new providers.AnkrProvider(network, options.ankr);
        if (provider.network && skip.indexOf(provider.network.name) === -1) {
          providerList.push(provider);
        }
      } catch (error) {
      }
    }
    if (providerList.length === 0) {
      return null;
    }
    if (providers.FallbackProvider) {
      let quorum = 1;
      if (options.quorum != null) {
        quorum = options.quorum;
      } else if (network === "homestead") {
        quorum = 2;
      }
      return new providers.FallbackProvider(providerList, quorum);
    }
    return providerList[0];
  };
  func.renetwork = function(network2) {
    return ethDefaultProvider(network2);
  };
  return func;
}
function etcDefaultProvider(url, network) {
  const func = function(providers, options) {
    if (providers.JsonRpcProvider) {
      return new providers.JsonRpcProvider(url, network);
    }
    return null;
  };
  func.renetwork = function(network2) {
    return etcDefaultProvider(url, network2);
  };
  return func;
}
function getNetwork(network) {
  if (network == null) {
    return null;
  }
  if (typeof network === "number") {
    for (const name in networks) {
      const standard2 = networks[name];
      if (standard2.chainId === network) {
        return {
          name: standard2.name,
          chainId: standard2.chainId,
          ensAddress: standard2.ensAddress || null,
          _defaultProvider: standard2._defaultProvider || null
        };
      }
    }
    return {
      chainId: network,
      name: "unknown"
    };
  }
  if (typeof network === "string") {
    const standard2 = networks[network];
    if (standard2 == null) {
      return null;
    }
    return {
      name: standard2.name,
      chainId: standard2.chainId,
      ensAddress: standard2.ensAddress,
      _defaultProvider: standard2._defaultProvider || null
    };
  }
  const standard = networks[network.name];
  if (!standard) {
    if (typeof network.chainId !== "number") {
      logger24.throwArgumentError("invalid network chainId", "network", network);
    }
    return network;
  }
  if (network.chainId !== 0 && network.chainId !== standard.chainId) {
    logger24.throwArgumentError("network chainId mismatch", "network", network);
  }
  let defaultProvider = network._defaultProvider || null;
  if (defaultProvider == null && standard._defaultProvider) {
    if (isRenetworkable(standard._defaultProvider)) {
      defaultProvider = standard._defaultProvider.renetwork(network);
    } else {
      defaultProvider = standard._defaultProvider;
    }
  }
  return {
    name: network.name,
    chainId: standard.chainId,
    ensAddress: network.ensAddress || standard.ensAddress || null,
    _defaultProvider: defaultProvider
  };
}
var logger24, homestead, ropsten, classicMordor, networks;
var init_lib34 = __esm({
  "node_modules/.pnpm/@ethersproject+networks@5.7.1/node_modules/@ethersproject/networks/lib.esm/index.js"() {
    "use strict";
    init_lib12();
    init_version19();
    logger24 = new Logger(version19);
    homestead = {
      chainId: 1,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "homestead",
      _defaultProvider: ethDefaultProvider("homestead")
    };
    ropsten = {
      chainId: 3,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "ropsten",
      _defaultProvider: ethDefaultProvider("ropsten")
    };
    classicMordor = {
      chainId: 63,
      name: "classicMordor",
      _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    networks = {
      unspecified: { chainId: 0, name: "unspecified" },
      homestead,
      mainnet: homestead,
      morden: { chainId: 2, name: "morden" },
      ropsten,
      testnet: ropsten,
      rinkeby: {
        chainId: 4,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "rinkeby",
        _defaultProvider: ethDefaultProvider("rinkeby")
      },
      kovan: {
        chainId: 42,
        name: "kovan",
        _defaultProvider: ethDefaultProvider("kovan")
      },
      goerli: {
        chainId: 5,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "goerli",
        _defaultProvider: ethDefaultProvider("goerli")
      },
      kintsugi: { chainId: 1337702, name: "kintsugi" },
      sepolia: {
        chainId: 11155111,
        name: "sepolia",
        _defaultProvider: ethDefaultProvider("sepolia")
      },
      // ETC (See: #351)
      classic: {
        chainId: 61,
        name: "classic",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
      },
      classicMorden: { chainId: 62, name: "classicMorden" },
      classicMordor,
      classicTestnet: classicMordor,
      classicKotti: {
        chainId: 6,
        name: "classicKotti",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
      },
      xdai: { chainId: 100, name: "xdai" },
      matic: {
        chainId: 137,
        name: "matic",
        _defaultProvider: ethDefaultProvider("matic")
      },
      maticmum: { chainId: 80001, name: "maticmum" },
      optimism: {
        chainId: 10,
        name: "optimism",
        _defaultProvider: ethDefaultProvider("optimism")
      },
      "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
      "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
      arbitrum: { chainId: 42161, name: "arbitrum" },
      "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
      "arbitrum-goerli": { chainId: 421613, name: "arbitrum-goerli" },
      bnb: { chainId: 56, name: "bnb" },
      bnbt: { chainId: 97, name: "bnbt" }
    };
  }
});

// node_modules/.pnpm/@ethersproject+base64@5.7.0/node_modules/@ethersproject/base64/lib.esm/base64.js
function decode2(textData) {
  textData = atob(textData);
  const data = [];
  for (let i = 0; i < textData.length; i++) {
    data.push(textData.charCodeAt(i));
  }
  return arrayify(data);
}
function encode3(data) {
  data = arrayify(data);
  let textData = "";
  for (let i = 0; i < data.length; i++) {
    textData += String.fromCharCode(data[i]);
  }
  return btoa(textData);
}
var init_base64 = __esm({
  "node_modules/.pnpm/@ethersproject+base64@5.7.0/node_modules/@ethersproject/base64/lib.esm/base64.js"() {
    "use strict";
    init_lib13();
  }
});

// node_modules/.pnpm/@ethersproject+base64@5.7.0/node_modules/@ethersproject/base64/lib.esm/index.js
var lib_exports12 = {};
__export(lib_exports12, {
  decode: () => decode2,
  encode: () => encode3
});
var init_lib35 = __esm({
  "node_modules/.pnpm/@ethersproject+base64@5.7.0/node_modules/@ethersproject/base64/lib.esm/index.js"() {
    "use strict";
    init_base64();
  }
});

// node_modules/.pnpm/@ethersproject+web@5.7.1/node_modules/@ethersproject/web/lib.esm/_version.js
var version20;
var init_version20 = __esm({
  "node_modules/.pnpm/@ethersproject+web@5.7.1/node_modules/@ethersproject/web/lib.esm/_version.js"() {
    version20 = "web/5.7.1";
  }
});

// node_modules/.pnpm/@ethersproject+web@5.7.1/node_modules/@ethersproject/web/lib.esm/geturl.js
function getUrl(href, options) {
  return __awaiter7(this, void 0, void 0, function* () {
    if (options == null) {
      options = {};
    }
    const request = {
      method: options.method || "GET",
      headers: options.headers || {},
      body: options.body || void 0
    };
    if (options.skipFetchSetup !== true) {
      request.mode = "cors";
      request.cache = "no-cache";
      request.credentials = "same-origin";
      request.redirect = "follow";
      request.referrer = "client";
    }
    ;
    if (options.fetchOptions != null) {
      const opts = options.fetchOptions;
      if (opts.mode) {
        request.mode = opts.mode;
      }
      if (opts.cache) {
        request.cache = opts.cache;
      }
      if (opts.credentials) {
        request.credentials = opts.credentials;
      }
      if (opts.redirect) {
        request.redirect = opts.redirect;
      }
      if (opts.referrer) {
        request.referrer = opts.referrer;
      }
    }
    const response = yield fetch(href, request);
    const body = yield response.arrayBuffer();
    const headers = {};
    if (response.headers.forEach) {
      response.headers.forEach((value, key2) => {
        headers[key2.toLowerCase()] = value;
      });
    } else {
      response.headers.keys().forEach((key2) => {
        headers[key2.toLowerCase()] = response.headers.get(key2);
      });
    }
    return {
      headers,
      statusCode: response.status,
      statusMessage: response.statusText,
      body: arrayify(new Uint8Array(body))
    };
  });
}
var __awaiter7;
var init_geturl = __esm({
  "node_modules/.pnpm/@ethersproject+web@5.7.1/node_modules/@ethersproject/web/lib.esm/geturl.js"() {
    "use strict";
    init_lib13();
    __awaiter7 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
  }
});

// node_modules/.pnpm/@ethersproject+web@5.7.1/node_modules/@ethersproject/web/lib.esm/index.js
function staller(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function bodyify(value, type) {
  if (value == null) {
    return null;
  }
  if (typeof value === "string") {
    return value;
  }
  if (isBytesLike(value)) {
    if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
      try {
        return toUtf8String(value);
      } catch (error) {
      }
      ;
    }
    return hexlify(value);
  }
  return value;
}
function unpercent(value) {
  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
    return String.fromCharCode(parseInt(code, 16));
  }));
}
function _fetchData(connection, body, processFunc) {
  const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
  logger25.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
  const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
  const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
  logger25.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
  const errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
  const headers = {};
  let url = null;
  const options = {
    method: "GET"
  };
  let allow304 = false;
  let timeout = 2 * 60 * 1e3;
  if (typeof connection === "string") {
    url = connection;
  } else if (typeof connection === "object") {
    if (connection == null || connection.url == null) {
      logger25.throwArgumentError("missing URL", "connection.url", connection);
    }
    url = connection.url;
    if (typeof connection.timeout === "number" && connection.timeout > 0) {
      timeout = connection.timeout;
    }
    if (connection.headers) {
      for (const key2 in connection.headers) {
        headers[key2.toLowerCase()] = { key: key2, value: String(connection.headers[key2]) };
        if (["if-none-match", "if-modified-since"].indexOf(key2.toLowerCase()) >= 0) {
          allow304 = true;
        }
      }
    }
    options.allowGzip = !!connection.allowGzip;
    if (connection.user != null && connection.password != null) {
      if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
        logger25.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url, user: connection.user, password: "[REDACTED]" });
      }
      const authorization = connection.user + ":" + connection.password;
      headers["authorization"] = {
        key: "Authorization",
        value: "Basic " + encode3(toUtf8Bytes(authorization))
      };
    }
    if (connection.skipFetchSetup != null) {
      options.skipFetchSetup = !!connection.skipFetchSetup;
    }
    if (connection.fetchOptions != null) {
      options.fetchOptions = shallowCopy(connection.fetchOptions);
    }
  }
  const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
  const dataMatch = url ? url.match(reData) : null;
  if (dataMatch) {
    try {
      const response = {
        statusCode: 200,
        statusMessage: "OK",
        headers: { "content-type": dataMatch[1] || "text/plain" },
        body: dataMatch[2] ? decode2(dataMatch[3]) : unpercent(dataMatch[3])
      };
      let result = response.body;
      if (processFunc) {
        result = processFunc(response.body, response);
      }
      return Promise.resolve(result);
    } catch (error) {
      logger25.throwError("processing response error", Logger.errors.SERVER_ERROR, {
        body: bodyify(dataMatch[1], dataMatch[2]),
        error,
        requestBody: null,
        requestMethod: "GET",
        url
      });
    }
  }
  if (body) {
    options.method = "POST";
    options.body = body;
    if (headers["content-type"] == null) {
      headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
    }
    if (headers["content-length"] == null) {
      headers["content-length"] = { key: "Content-Length", value: String(body.length) };
    }
  }
  const flatHeaders = {};
  Object.keys(headers).forEach((key2) => {
    const header = headers[key2];
    flatHeaders[header.key] = header.value;
  });
  options.headers = flatHeaders;
  const runningTimeout = (function() {
    let timer2 = null;
    const promise = new Promise(function(resolve, reject) {
      if (timeout) {
        timer2 = setTimeout(() => {
          if (timer2 == null) {
            return;
          }
          timer2 = null;
          reject(logger25.makeError("timeout", Logger.errors.TIMEOUT, {
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            timeout,
            url
          }));
        }, timeout);
      }
    });
    const cancel = function() {
      if (timer2 == null) {
        return;
      }
      clearTimeout(timer2);
      timer2 = null;
    };
    return { promise, cancel };
  })();
  const runningFetch = (function() {
    return __awaiter8(this, void 0, void 0, function* () {
      for (let attempt = 0; attempt < attemptLimit; attempt++) {
        let response = null;
        try {
          response = yield getUrl(url, options);
          if (attempt < attemptLimit) {
            if (response.statusCode === 301 || response.statusCode === 302) {
              const location = response.headers.location || "";
              if (options.method === "GET" && location.match(/^https:/)) {
                url = response.headers.location;
                continue;
              }
            } else if (response.statusCode === 429) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                let stall3 = 0;
                const retryAfter = response.headers["retry-after"];
                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                  stall3 = parseInt(retryAfter) * 1e3;
                } else {
                  stall3 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                }
                yield staller(stall3);
                continue;
              }
            }
          }
        } catch (error) {
          response = error.response;
          if (response == null) {
            runningTimeout.cancel();
            logger25.throwError("missing response", Logger.errors.SERVER_ERROR, {
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              serverError: error,
              url
            });
          }
        }
        let body2 = response.body;
        if (allow304 && response.statusCode === 304) {
          body2 = null;
        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
          runningTimeout.cancel();
          logger25.throwError("bad response", Logger.errors.SERVER_ERROR, {
            status: response.statusCode,
            headers: response.headers,
            body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            url
          });
        }
        if (processFunc) {
          try {
            const result = yield processFunc(body2, response);
            runningTimeout.cancel();
            return result;
          } catch (error) {
            if (error.throttleRetry && attempt < attemptLimit) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                const timeout2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                yield staller(timeout2);
                continue;
              }
            }
            runningTimeout.cancel();
            logger25.throwError("processing response error", Logger.errors.SERVER_ERROR, {
              body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
              error,
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              url
            });
          }
        }
        runningTimeout.cancel();
        return body2;
      }
      return logger25.throwError("failed response", Logger.errors.SERVER_ERROR, {
        requestBody: bodyify(options.body, flatHeaders["content-type"]),
        requestMethod: options.method,
        url
      });
    });
  })();
  return Promise.race([runningTimeout.promise, runningFetch]);
}
function fetchJson(connection, json, processFunc) {
  let processJsonFunc = (value, response) => {
    let result = null;
    if (value != null) {
      try {
        result = JSON.parse(toUtf8String(value));
      } catch (error) {
        logger25.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
          body: value,
          error
        });
      }
    }
    if (processFunc) {
      result = processFunc(result, response);
    }
    return result;
  };
  let body = null;
  if (json != null) {
    body = toUtf8Bytes(json);
    const updated = typeof connection === "string" ? { url: connection } : shallowCopy(connection);
    if (updated.headers) {
      const hasContentType = Object.keys(updated.headers).filter((k) => k.toLowerCase() === "content-type").length !== 0;
      if (!hasContentType) {
        updated.headers = shallowCopy(updated.headers);
        updated.headers["content-type"] = "application/json";
      }
    } else {
      updated.headers = { "content-type": "application/json" };
    }
    connection = updated;
  }
  return _fetchData(connection, body, processJsonFunc);
}
function poll(func, options) {
  if (!options) {
    options = {};
  }
  options = shallowCopy(options);
  if (options.floor == null) {
    options.floor = 0;
  }
  if (options.ceiling == null) {
    options.ceiling = 1e4;
  }
  if (options.interval == null) {
    options.interval = 250;
  }
  return new Promise(function(resolve, reject) {
    let timer2 = null;
    let done = false;
    const cancel = () => {
      if (done) {
        return false;
      }
      done = true;
      if (timer2) {
        clearTimeout(timer2);
      }
      return true;
    };
    if (options.timeout) {
      timer2 = setTimeout(() => {
        if (cancel()) {
          reject(new Error("timeout"));
        }
      }, options.timeout);
    }
    const retryLimit = options.retryLimit;
    let attempt = 0;
    function check() {
      return func().then(function(result) {
        if (result !== void 0) {
          if (cancel()) {
            resolve(result);
          }
        } else if (options.oncePoll) {
          options.oncePoll.once("poll", check);
        } else if (options.onceBlock) {
          options.onceBlock.once("block", check);
        } else if (!done) {
          attempt++;
          if (attempt > retryLimit) {
            if (cancel()) {
              reject(new Error("retry limit reached"));
            }
            return;
          }
          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
          if (timeout < options.floor) {
            timeout = options.floor;
          }
          if (timeout > options.ceiling) {
            timeout = options.ceiling;
          }
          setTimeout(check, timeout);
        }
        return null;
      }, function(error) {
        if (cancel()) {
          reject(error);
        }
      });
    }
    check();
  });
}
var __awaiter8, logger25;
var init_lib36 = __esm({
  "node_modules/.pnpm/@ethersproject+web@5.7.1/node_modules/@ethersproject/web/lib.esm/index.js"() {
    "use strict";
    init_lib35();
    init_lib13();
    init_lib15();
    init_lib20();
    init_lib12();
    init_version20();
    init_geturl();
    __awaiter8 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger25 = new Logger(version20);
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/_version.js
var version21;
var init_version21 = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/_version.js"() {
    version21 = "providers/5.7.2";
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/formatter.js
function isCommunityResourcable(value) {
  return value && typeof value.isCommunityResource === "function";
}
function isCommunityResource(value) {
  return isCommunityResourcable(value) && value.isCommunityResource();
}
function showThrottleMessage() {
  if (throttleMessage) {
    return;
  }
  throttleMessage = true;
  console.log("========= NOTICE =========");
  console.log("Request-Rate Exceeded  (this message will not be repeated)");
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https://docs.ethers.io/api-keys/");
  console.log("==========================");
}
var logger26, Formatter, throttleMessage;
var init_formatter = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/formatter.js"() {
    "use strict";
    init_lib18();
    init_lib14();
    init_lib13();
    init_lib19();
    init_lib15();
    init_lib11();
    init_lib12();
    init_version21();
    logger26 = new Logger(version21);
    Formatter = class _Formatter {
      constructor() {
        this.formats = this.getDefaultFormats();
      }
      getDefaultFormats() {
        const formats = {};
        const address = this.address.bind(this);
        const bigNumber = this.bigNumber.bind(this);
        const blockTag = this.blockTag.bind(this);
        const data = this.data.bind(this);
        const hash3 = this.hash.bind(this);
        const hex = this.hex.bind(this);
        const number = this.number.bind(this);
        const type = this.type.bind(this);
        const strictData = (v) => {
          return this.data(v, true);
        };
        formats.transaction = {
          hash: hash3,
          type,
          accessList: _Formatter.allowNull(this.accessList.bind(this), null),
          blockHash: _Formatter.allowNull(hash3, null),
          blockNumber: _Formatter.allowNull(number, null),
          transactionIndex: _Formatter.allowNull(number, null),
          confirmations: _Formatter.allowNull(number, null),
          from: address,
          // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
          // must be set
          gasPrice: _Formatter.allowNull(bigNumber),
          maxPriorityFeePerGas: _Formatter.allowNull(bigNumber),
          maxFeePerGas: _Formatter.allowNull(bigNumber),
          gasLimit: bigNumber,
          to: _Formatter.allowNull(address, null),
          value: bigNumber,
          nonce: number,
          data,
          r: _Formatter.allowNull(this.uint256),
          s: _Formatter.allowNull(this.uint256),
          v: _Formatter.allowNull(number),
          creates: _Formatter.allowNull(address, null),
          raw: _Formatter.allowNull(data)
        };
        formats.transactionRequest = {
          from: _Formatter.allowNull(address),
          nonce: _Formatter.allowNull(number),
          gasLimit: _Formatter.allowNull(bigNumber),
          gasPrice: _Formatter.allowNull(bigNumber),
          maxPriorityFeePerGas: _Formatter.allowNull(bigNumber),
          maxFeePerGas: _Formatter.allowNull(bigNumber),
          to: _Formatter.allowNull(address),
          value: _Formatter.allowNull(bigNumber),
          data: _Formatter.allowNull(strictData),
          type: _Formatter.allowNull(number),
          accessList: _Formatter.allowNull(this.accessList.bind(this), null)
        };
        formats.receiptLog = {
          transactionIndex: number,
          blockNumber: number,
          transactionHash: hash3,
          address,
          topics: _Formatter.arrayOf(hash3),
          data,
          logIndex: number,
          blockHash: hash3
        };
        formats.receipt = {
          to: _Formatter.allowNull(this.address, null),
          from: _Formatter.allowNull(this.address, null),
          contractAddress: _Formatter.allowNull(address, null),
          transactionIndex: number,
          // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
          root: _Formatter.allowNull(hex),
          gasUsed: bigNumber,
          logsBloom: _Formatter.allowNull(data),
          blockHash: hash3,
          transactionHash: hash3,
          logs: _Formatter.arrayOf(this.receiptLog.bind(this)),
          blockNumber: number,
          confirmations: _Formatter.allowNull(number, null),
          cumulativeGasUsed: bigNumber,
          effectiveGasPrice: _Formatter.allowNull(bigNumber),
          status: _Formatter.allowNull(number),
          type
        };
        formats.block = {
          hash: _Formatter.allowNull(hash3),
          parentHash: hash3,
          number,
          timestamp: number,
          nonce: _Formatter.allowNull(hex),
          difficulty: this.difficulty.bind(this),
          gasLimit: bigNumber,
          gasUsed: bigNumber,
          miner: _Formatter.allowNull(address),
          extraData: data,
          transactions: _Formatter.allowNull(_Formatter.arrayOf(hash3)),
          baseFeePerGas: _Formatter.allowNull(bigNumber)
        };
        formats.blockWithTransactions = shallowCopy(formats.block);
        formats.blockWithTransactions.transactions = _Formatter.allowNull(_Formatter.arrayOf(this.transactionResponse.bind(this)));
        formats.filter = {
          fromBlock: _Formatter.allowNull(blockTag, void 0),
          toBlock: _Formatter.allowNull(blockTag, void 0),
          blockHash: _Formatter.allowNull(hash3, void 0),
          address: _Formatter.allowNull(address, void 0),
          topics: _Formatter.allowNull(this.topics.bind(this), void 0)
        };
        formats.filterLog = {
          blockNumber: _Formatter.allowNull(number),
          blockHash: _Formatter.allowNull(hash3),
          transactionIndex: number,
          removed: _Formatter.allowNull(this.boolean.bind(this)),
          address,
          data: _Formatter.allowFalsish(data, "0x"),
          topics: _Formatter.arrayOf(hash3),
          transactionHash: hash3,
          logIndex: number
        };
        return formats;
      }
      accessList(accessList) {
        return accessListify(accessList || []);
      }
      // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
      // Strict! Used on input.
      number(number) {
        if (number === "0x") {
          return 0;
        }
        return BigNumber.from(number).toNumber();
      }
      type(number) {
        if (number === "0x" || number == null) {
          return 0;
        }
        return BigNumber.from(number).toNumber();
      }
      // Strict! Used on input.
      bigNumber(value) {
        return BigNumber.from(value);
      }
      // Requires a boolean, "true" or  "false"; returns a boolean
      boolean(value) {
        if (typeof value === "boolean") {
          return value;
        }
        if (typeof value === "string") {
          value = value.toLowerCase();
          if (value === "true") {
            return true;
          }
          if (value === "false") {
            return false;
          }
        }
        throw new Error("invalid boolean - " + value);
      }
      hex(value, strict) {
        if (typeof value === "string") {
          if (!strict && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
          }
          if (isHexString(value)) {
            return value.toLowerCase();
          }
        }
        return logger26.throwArgumentError("invalid hash", "value", value);
      }
      data(value, strict) {
        const result = this.hex(value, strict);
        if (result.length % 2 !== 0) {
          throw new Error("invalid data; odd-length - " + value);
        }
        return result;
      }
      // Requires an address
      // Strict! Used on input.
      address(value) {
        return getAddress(value);
      }
      callAddress(value) {
        if (!isHexString(value, 32)) {
          return null;
        }
        const address = getAddress(hexDataSlice(value, 12));
        return address === AddressZero ? null : address;
      }
      contractAddress(value) {
        return getContractAddress(value);
      }
      // Strict! Used on input.
      blockTag(blockTag) {
        if (blockTag == null) {
          return "latest";
        }
        if (blockTag === "earliest") {
          return "0x0";
        }
        switch (blockTag) {
          case "earliest":
            return "0x0";
          case "latest":
          case "pending":
          case "safe":
          case "finalized":
            return blockTag;
        }
        if (typeof blockTag === "number" || isHexString(blockTag)) {
          return hexValue(blockTag);
        }
        throw new Error("invalid blockTag");
      }
      // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
      hash(value, strict) {
        const result = this.hex(value, strict);
        if (hexDataLength(result) !== 32) {
          return logger26.throwArgumentError("invalid hash", "value", value);
        }
        return result;
      }
      // Returns the difficulty as a number, or if too large (i.e. PoA network) null
      difficulty(value) {
        if (value == null) {
          return null;
        }
        const v = BigNumber.from(value);
        try {
          return v.toNumber();
        } catch (error) {
        }
        return null;
      }
      uint256(value) {
        if (!isHexString(value)) {
          throw new Error("invalid uint256");
        }
        return hexZeroPad(value, 32);
      }
      _block(value, format) {
        if (value.author != null && value.miner == null) {
          value.miner = value.author;
        }
        const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
        const result = _Formatter.check(format, value);
        result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);
        return result;
      }
      block(value) {
        return this._block(value, this.formats.block);
      }
      blockWithTransactions(value) {
        return this._block(value, this.formats.blockWithTransactions);
      }
      // Strict! Used on input.
      transactionRequest(value) {
        return _Formatter.check(this.formats.transactionRequest, value);
      }
      transactionResponse(transaction) {
        if (transaction.gas != null && transaction.gasLimit == null) {
          transaction.gasLimit = transaction.gas;
        }
        if (transaction.to && BigNumber.from(transaction.to).isZero()) {
          transaction.to = "0x0000000000000000000000000000000000000000";
        }
        if (transaction.input != null && transaction.data == null) {
          transaction.data = transaction.input;
        }
        if (transaction.to == null && transaction.creates == null) {
          transaction.creates = this.contractAddress(transaction);
        }
        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
          transaction.accessList = [];
        }
        const result = _Formatter.check(this.formats.transaction, transaction);
        if (transaction.chainId != null) {
          let chainId = transaction.chainId;
          if (isHexString(chainId)) {
            chainId = BigNumber.from(chainId).toNumber();
          }
          result.chainId = chainId;
        } else {
          let chainId = transaction.networkId;
          if (chainId == null && result.v == null) {
            chainId = transaction.chainId;
          }
          if (isHexString(chainId)) {
            chainId = BigNumber.from(chainId).toNumber();
          }
          if (typeof chainId !== "number" && result.v != null) {
            chainId = (result.v - 35) / 2;
            if (chainId < 0) {
              chainId = 0;
            }
            chainId = parseInt(chainId);
          }
          if (typeof chainId !== "number") {
            chainId = 0;
          }
          result.chainId = chainId;
        }
        if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
          result.blockHash = null;
        }
        return result;
      }
      transaction(value) {
        return parse(value);
      }
      receiptLog(value) {
        return _Formatter.check(this.formats.receiptLog, value);
      }
      receipt(value) {
        const result = _Formatter.check(this.formats.receipt, value);
        if (result.root != null) {
          if (result.root.length <= 4) {
            const value2 = BigNumber.from(result.root).toNumber();
            if (value2 === 0 || value2 === 1) {
              if (result.status != null && result.status !== value2) {
                logger26.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
              }
              result.status = value2;
              delete result.root;
            } else {
              logger26.throwArgumentError("invalid alt-root-status", "value.root", result.root);
            }
          } else if (result.root.length !== 66) {
            logger26.throwArgumentError("invalid root hash", "value.root", result.root);
          }
        }
        if (result.status != null) {
          result.byzantium = true;
        }
        return result;
      }
      topics(value) {
        if (Array.isArray(value)) {
          return value.map((v) => this.topics(v));
        } else if (value != null) {
          return this.hash(value, true);
        }
        return null;
      }
      filter(value) {
        return _Formatter.check(this.formats.filter, value);
      }
      filterLog(value) {
        return _Formatter.check(this.formats.filterLog, value);
      }
      static check(format, object) {
        const result = {};
        for (const key2 in format) {
          try {
            const value = format[key2](object[key2]);
            if (value !== void 0) {
              result[key2] = value;
            }
          } catch (error) {
            error.checkKey = key2;
            error.checkValue = object[key2];
            throw error;
          }
        }
        return result;
      }
      // if value is null-ish, nullValue is returned
      static allowNull(format, nullValue) {
        return (function(value) {
          if (value == null) {
            return nullValue;
          }
          return format(value);
        });
      }
      // If value is false-ish, replaceValue is returned
      static allowFalsish(format, replaceValue) {
        return (function(value) {
          if (!value) {
            return replaceValue;
          }
          return format(value);
        });
      }
      // Requires an Array satisfying check
      static arrayOf(format) {
        return (function(array) {
          if (!Array.isArray(array)) {
            throw new Error("not an array");
          }
          const result = [];
          array.forEach(function(value) {
            result.push(format(value));
          });
          return result;
        });
      }
    };
    throttleMessage = false;
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/base-provider.js
function checkTopic(topic) {
  if (topic == null) {
    return "null";
  }
  if (hexDataLength(topic) !== 32) {
    logger27.throwArgumentError("invalid topic", "topic", topic);
  }
  return topic.toLowerCase();
}
function serializeTopics(topics) {
  topics = topics.slice();
  while (topics.length > 0 && topics[topics.length - 1] == null) {
    topics.pop();
  }
  return topics.map((topic) => {
    if (Array.isArray(topic)) {
      const unique = {};
      topic.forEach((topic2) => {
        unique[checkTopic(topic2)] = true;
      });
      const sorted = Object.keys(unique);
      sorted.sort();
      return sorted.join("|");
    } else {
      return checkTopic(topic);
    }
  }).join("&");
}
function deserializeTopics(data) {
  if (data === "") {
    return [];
  }
  return data.split(/&/g).map((topic) => {
    if (topic === "") {
      return [];
    }
    const comps = topic.split("|").map((topic2) => {
      return topic2 === "null" ? null : topic2;
    });
    return comps.length === 1 ? comps[0] : comps;
  });
}
function getEventTag2(eventName) {
  if (typeof eventName === "string") {
    eventName = eventName.toLowerCase();
    if (hexDataLength(eventName) === 32) {
      return "tx:" + eventName;
    }
    if (eventName.indexOf(":") === -1) {
      return eventName;
    }
  } else if (Array.isArray(eventName)) {
    return "filter:*:" + serializeTopics(eventName);
  } else if (ForkEvent.isForkEvent(eventName)) {
    logger27.warn("not implemented");
    throw new Error("not implemented");
  } else if (eventName && typeof eventName === "object") {
    return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
  }
  throw new Error("invalid event - " + eventName);
}
function getTime() {
  return (/* @__PURE__ */ new Date()).getTime();
}
function stall(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function bytes32ify(value) {
  return hexZeroPad(BigNumber.from(value).toHexString(), 32);
}
function base58Encode(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
function _parseString(result, start) {
  try {
    return toUtf8String(_parseBytes(result, start));
  } catch (error) {
  }
  return null;
}
function _parseBytes(result, start) {
  if (result === "0x") {
    return null;
  }
  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();
  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
  return hexDataSlice(result, offset + 32, offset + 32 + length);
}
function getIpfsLink(link) {
  if (link.match(/^ipfs:\/\/ipfs\//i)) {
    link = link.substring(12);
  } else if (link.match(/^ipfs:\/\//i)) {
    link = link.substring(7);
  } else {
    logger27.throwArgumentError("unsupported IPFS format", "link", link);
  }
  return `https://gateway.ipfs.io/ipfs/${link}`;
}
function numPad(value) {
  const result = arrayify(value);
  if (result.length > 32) {
    throw new Error("internal; should not happen");
  }
  const padded = new Uint8Array(32);
  padded.set(result, 32 - result.length);
  return padded;
}
function bytesPad(value) {
  if (value.length % 32 === 0) {
    return value;
  }
  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
  result.set(value);
  return result;
}
function encodeBytes(datas) {
  const result = [];
  let byteCount = 0;
  for (let i = 0; i < datas.length; i++) {
    result.push(null);
    byteCount += 32;
  }
  for (let i = 0; i < datas.length; i++) {
    const data = arrayify(datas[i]);
    result[i] = numPad(byteCount);
    result.push(numPad(data.length));
    result.push(bytesPad(data));
    byteCount += 32 + Math.ceil(data.length / 32) * 32;
  }
  return hexConcat(result);
}
var import_bech32, __awaiter9, logger27, MAX_CCIP_REDIRECTS, PollableEvents, Event, coinInfos, matcherIpfs, matchers, Resolver, defaultFormatter, nextPollId, BaseProvider;
var init_base_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/base-provider.js"() {
    "use strict";
    init_lib22();
    init_lib35();
    init_lib25();
    init_lib14();
    init_lib13();
    init_lib19();
    init_lib10();
    init_lib34();
    init_lib15();
    init_lib26();
    init_lib20();
    init_lib36();
    import_bech32 = __toESM(require_bech32());
    init_lib12();
    init_version21();
    init_formatter();
    __awaiter9 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger27 = new Logger(version21);
    MAX_CCIP_REDIRECTS = 10;
    PollableEvents = ["block", "network", "pending", "poll"];
    Event = class {
      constructor(tag, listener, once) {
        defineReadOnly(this, "tag", tag);
        defineReadOnly(this, "listener", listener);
        defineReadOnly(this, "once", once);
        this._lastBlockNumber = -2;
        this._inflight = false;
      }
      get event() {
        switch (this.type) {
          case "tx":
            return this.hash;
          case "filter":
            return this.filter;
        }
        return this.tag;
      }
      get type() {
        return this.tag.split(":")[0];
      }
      get hash() {
        const comps = this.tag.split(":");
        if (comps[0] !== "tx") {
          return null;
        }
        return comps[1];
      }
      get filter() {
        const comps = this.tag.split(":");
        if (comps[0] !== "filter") {
          return null;
        }
        const address = comps[1];
        const topics = deserializeTopics(comps[2]);
        const filter = {};
        if (topics.length > 0) {
          filter.topics = topics;
        }
        if (address && address !== "*") {
          filter.address = address;
        }
        return filter;
      }
      pollable() {
        return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
      }
    };
    coinInfos = {
      "0": { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" },
      "2": { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" },
      "3": { symbol: "doge", p2pkh: 30, p2sh: 22 },
      "60": { symbol: "eth", ilk: "eth" },
      "61": { symbol: "etc", ilk: "eth" },
      "700": { symbol: "xdai", ilk: "eth" }
    };
    matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
    matchers = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
    ];
    Resolver = class {
      // The resolvedAddress is only for creating a ReverseLookup resolver
      constructor(provider, address, name, resolvedAddress) {
        defineReadOnly(this, "provider", provider);
        defineReadOnly(this, "name", name);
        defineReadOnly(this, "address", provider.formatter.address(address));
        defineReadOnly(this, "_resolvedAddress", resolvedAddress);
      }
      supportsWildcard() {
        if (!this._supportsEip2544) {
          this._supportsEip2544 = this.provider.call({
            to: this.address,
            data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
          }).then((result) => {
            return BigNumber.from(result).eq(1);
          }).catch((error) => {
            if (error.code === Logger.errors.CALL_EXCEPTION) {
              return false;
            }
            this._supportsEip2544 = null;
            throw error;
          });
        }
        return this._supportsEip2544;
      }
      _fetch(selector, parameters) {
        return __awaiter9(this, void 0, void 0, function* () {
          const tx = {
            to: this.address,
            ccipReadEnabled: true,
            data: hexConcat([selector, namehash(this.name), parameters || "0x"])
          };
          let parseBytes = false;
          if (yield this.supportsWildcard()) {
            parseBytes = true;
            tx.data = hexConcat(["0x9061b923", encodeBytes([dnsEncode(this.name), tx.data])]);
          }
          try {
            let result = yield this.provider.call(tx);
            if (arrayify(result).length % 32 === 4) {
              logger27.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
                transaction: tx,
                data: result
              });
            }
            if (parseBytes) {
              result = _parseBytes(result, 0);
            }
            return result;
          } catch (error) {
            if (error.code === Logger.errors.CALL_EXCEPTION) {
              return null;
            }
            throw error;
          }
        });
      }
      _fetchBytes(selector, parameters) {
        return __awaiter9(this, void 0, void 0, function* () {
          const result = yield this._fetch(selector, parameters);
          if (result != null) {
            return _parseBytes(result, 0);
          }
          return null;
        });
      }
      _getAddress(coinType, hexBytes) {
        const coinInfo = coinInfos[String(coinType)];
        if (coinInfo == null) {
          logger27.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: `getAddress(${coinType})`
          });
        }
        if (coinInfo.ilk === "eth") {
          return this.provider.formatter.address(hexBytes);
        }
        const bytes = arrayify(hexBytes);
        if (coinInfo.p2pkh != null) {
          const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
          if (p2pkh) {
            const length = parseInt(p2pkh[1], 16);
            if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
              return base58Encode(concat([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
            }
          }
        }
        if (coinInfo.p2sh != null) {
          const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
          if (p2sh) {
            const length = parseInt(p2sh[1], 16);
            if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
              return base58Encode(concat([[coinInfo.p2sh], "0x" + p2sh[2]]));
            }
          }
        }
        if (coinInfo.prefix != null) {
          const length = bytes[1];
          let version25 = bytes[0];
          if (version25 === 0) {
            if (length !== 20 && length !== 32) {
              version25 = -1;
            }
          } else {
            version25 = -1;
          }
          if (version25 >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
            const words2 = import_bech32.default.toWords(bytes.slice(2));
            words2.unshift(version25);
            return import_bech32.default.encode(coinInfo.prefix, words2);
          }
        }
        return null;
      }
      getAddress(coinType) {
        return __awaiter9(this, void 0, void 0, function* () {
          if (coinType == null) {
            coinType = 60;
          }
          if (coinType === 60) {
            try {
              const result = yield this._fetch("0x3b3b57de");
              if (result === "0x" || result === HashZero) {
                return null;
              }
              return this.provider.formatter.callAddress(result);
            } catch (error) {
              if (error.code === Logger.errors.CALL_EXCEPTION) {
                return null;
              }
              throw error;
            }
          }
          const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
          if (hexBytes == null || hexBytes === "0x") {
            return null;
          }
          const address = this._getAddress(coinType, hexBytes);
          if (address == null) {
            logger27.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
              operation: `getAddress(${coinType})`,
              coinType,
              data: hexBytes
            });
          }
          return address;
        });
      }
      getAvatar() {
        return __awaiter9(this, void 0, void 0, function* () {
          const linkage = [{ type: "name", content: this.name }];
          try {
            const avatar = yield this.getText("avatar");
            if (avatar == null) {
              return null;
            }
            for (let i = 0; i < matchers.length; i++) {
              const match = avatar.match(matchers[i]);
              if (match == null) {
                continue;
              }
              const scheme = match[1].toLowerCase();
              switch (scheme) {
                case "https":
                  linkage.push({ type: "url", content: avatar });
                  return { linkage, url: avatar };
                case "data":
                  linkage.push({ type: "data", content: avatar });
                  return { linkage, url: avatar };
                case "ipfs":
                  linkage.push({ type: "ipfs", content: avatar });
                  return { linkage, url: getIpfsLink(avatar) };
                case "erc721":
                case "erc1155": {
                  const selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                  linkage.push({ type: scheme, content: avatar });
                  const owner = this._resolvedAddress || (yield this.getAddress());
                  const comps = (match[2] || "").split("/");
                  if (comps.length !== 2) {
                    return null;
                  }
                  const addr = yield this.provider.formatter.address(comps[0]);
                  const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
                  if (scheme === "erc721") {
                    const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                      to: addr,
                      data: hexConcat(["0x6352211e", tokenId])
                    }));
                    if (owner !== tokenOwner) {
                      return null;
                    }
                    linkage.push({ type: "owner", content: tokenOwner });
                  } else if (scheme === "erc1155") {
                    const balance = BigNumber.from(yield this.provider.call({
                      to: addr,
                      data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                    }));
                    if (balance.isZero()) {
                      return null;
                    }
                    linkage.push({ type: "balance", content: balance.toString() });
                  }
                  const tx = {
                    to: this.provider.formatter.address(comps[0]),
                    data: hexConcat([selector, tokenId])
                  };
                  let metadataUrl = _parseString(yield this.provider.call(tx), 0);
                  if (metadataUrl == null) {
                    return null;
                  }
                  linkage.push({ type: "metadata-url-base", content: metadataUrl });
                  if (scheme === "erc1155") {
                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                    linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                  }
                  if (metadataUrl.match(/^ipfs:/i)) {
                    metadataUrl = getIpfsLink(metadataUrl);
                  }
                  linkage.push({ type: "metadata-url", content: metadataUrl });
                  const metadata = yield fetchJson(metadataUrl);
                  if (!metadata) {
                    return null;
                  }
                  linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                  let imageUrl = metadata.image;
                  if (typeof imageUrl !== "string") {
                    return null;
                  }
                  if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                  } else {
                    const ipfs = imageUrl.match(matcherIpfs);
                    if (ipfs == null) {
                      return null;
                    }
                    linkage.push({ type: "url-ipfs", content: imageUrl });
                    imageUrl = getIpfsLink(imageUrl);
                  }
                  linkage.push({ type: "url", content: imageUrl });
                  return { linkage, url: imageUrl };
                }
              }
            }
          } catch (error) {
          }
          return null;
        });
      }
      getContentHash() {
        return __awaiter9(this, void 0, void 0, function* () {
          const hexBytes = yield this._fetchBytes("0xbc1c58d1");
          if (hexBytes == null || hexBytes === "0x") {
            return null;
          }
          const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
          if (ipfs) {
            const length = parseInt(ipfs[3], 16);
            if (ipfs[4].length === length * 2) {
              return "ipfs://" + Base58.encode("0x" + ipfs[1]);
            }
          }
          const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
          if (ipns) {
            const length = parseInt(ipns[3], 16);
            if (ipns[4].length === length * 2) {
              return "ipns://" + Base58.encode("0x" + ipns[1]);
            }
          }
          const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
          if (swarm) {
            if (swarm[1].length === 32 * 2) {
              return "bzz://" + swarm[1];
            }
          }
          const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
          if (skynet) {
            if (skynet[1].length === 34 * 2) {
              const urlSafe = { "=": "", "+": "-", "/": "_" };
              const hash3 = encode3("0x" + skynet[1]).replace(/[=+\/]/g, (a) => urlSafe[a]);
              return "sia://" + hash3;
            }
          }
          return logger27.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "getContentHash()",
            data: hexBytes
          });
        });
      }
      getText(key2) {
        return __awaiter9(this, void 0, void 0, function* () {
          let keyBytes = toUtf8Bytes(key2);
          keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
          if (keyBytes.length % 32 !== 0) {
            keyBytes = concat([keyBytes, hexZeroPad("0x", 32 - key2.length % 32)]);
          }
          const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
          if (hexBytes == null || hexBytes === "0x") {
            return null;
          }
          return toUtf8String(hexBytes);
        });
      }
    };
    defaultFormatter = null;
    nextPollId = 1;
    BaseProvider = class extends Provider {
      /**
       *  ready
       *
       *  A Promise<Network> that resolves only once the provider is ready.
       *
       *  Sub-classes that call the super with a network without a chainId
       *  MUST set this. Standard named networks have a known chainId.
       *
       */
      constructor(network) {
        super();
        this._events = [];
        this._emitted = { block: -2 };
        this.disableCcipRead = false;
        this.formatter = new.target.getFormatter();
        defineReadOnly(this, "anyNetwork", network === "any");
        if (this.anyNetwork) {
          network = this.detectNetwork();
        }
        if (network instanceof Promise) {
          this._networkPromise = network;
          network.catch((error) => {
          });
          this._ready().catch((error) => {
          });
        } else {
          const knownNetwork = getStatic(new.target, "getNetwork")(network);
          if (knownNetwork) {
            defineReadOnly(this, "_network", knownNetwork);
            this.emit("network", knownNetwork, null);
          } else {
            logger27.throwArgumentError("invalid network", "network", network);
          }
        }
        this._maxInternalBlockNumber = -1024;
        this._lastBlockNumber = -2;
        this._maxFilterBlockRange = 10;
        this._pollingInterval = 4e3;
        this._fastQueryDate = 0;
      }
      _ready() {
        return __awaiter9(this, void 0, void 0, function* () {
          if (this._network == null) {
            let network = null;
            if (this._networkPromise) {
              try {
                network = yield this._networkPromise;
              } catch (error) {
              }
            }
            if (network == null) {
              network = yield this.detectNetwork();
            }
            if (!network) {
              logger27.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
            }
            if (this._network == null) {
              if (this.anyNetwork) {
                this._network = network;
              } else {
                defineReadOnly(this, "_network", network);
              }
              this.emit("network", network, null);
            }
          }
          return this._network;
        });
      }
      // This will always return the most recently established network.
      // For "any", this can change (a "network" event is emitted before
      // any change is reflected); otherwise this cannot change
      get ready() {
        return poll(() => {
          return this._ready().then((network) => {
            return network;
          }, (error) => {
            if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
              return void 0;
            }
            throw error;
          });
        });
      }
      // @TODO: Remove this and just create a singleton formatter
      static getFormatter() {
        if (defaultFormatter == null) {
          defaultFormatter = new Formatter();
        }
        return defaultFormatter;
      }
      // @TODO: Remove this and just use getNetwork
      static getNetwork(network) {
        return getNetwork(network == null ? "homestead" : network);
      }
      ccipReadFetch(tx, calldata, urls) {
        return __awaiter9(this, void 0, void 0, function* () {
          if (this.disableCcipRead || urls.length === 0) {
            return null;
          }
          const sender = tx.to.toLowerCase();
          const data = calldata.toLowerCase();
          const errorMessages = [];
          for (let i = 0; i < urls.length; i++) {
            const url = urls[i];
            const href = url.replace("{sender}", sender).replace("{data}", data);
            const json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({ data, sender });
            const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
              value.status = response.statusCode;
              return value;
            });
            if (result.data) {
              return result.data;
            }
            const errorMessage = result.message || "unknown error";
            if (result.status >= 400 && result.status < 500) {
              return logger27.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });
            }
            errorMessages.push(errorMessage);
          }
          return logger27.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, Logger.errors.SERVER_ERROR, {
            urls,
            errorMessages
          });
        });
      }
      // Fetches the blockNumber, but will reuse any result that is less
      // than maxAge old or has been requested since the last request
      _getInternalBlockNumber(maxAge) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this._ready();
          if (maxAge > 0) {
            while (this._internalBlockNumber) {
              const internalBlockNumber = this._internalBlockNumber;
              try {
                const result = yield internalBlockNumber;
                if (getTime() - result.respTime <= maxAge) {
                  return result.blockNumber;
                }
                break;
              } catch (error) {
                if (this._internalBlockNumber === internalBlockNumber) {
                  break;
                }
              }
            }
          }
          const reqTime = getTime();
          const checkInternalBlockNumber = resolveProperties({
            blockNumber: this.perform("getBlockNumber", {}),
            networkError: this.getNetwork().then((network) => null, (error) => error)
          }).then(({ blockNumber, networkError }) => {
            if (networkError) {
              if (this._internalBlockNumber === checkInternalBlockNumber) {
                this._internalBlockNumber = null;
              }
              throw networkError;
            }
            const respTime = getTime();
            blockNumber = BigNumber.from(blockNumber).toNumber();
            if (blockNumber < this._maxInternalBlockNumber) {
              blockNumber = this._maxInternalBlockNumber;
            }
            this._maxInternalBlockNumber = blockNumber;
            this._setFastBlockNumber(blockNumber);
            return { blockNumber, reqTime, respTime };
          });
          this._internalBlockNumber = checkInternalBlockNumber;
          checkInternalBlockNumber.catch((error) => {
            if (this._internalBlockNumber === checkInternalBlockNumber) {
              this._internalBlockNumber = null;
            }
          });
          return (yield checkInternalBlockNumber).blockNumber;
        });
      }
      poll() {
        return __awaiter9(this, void 0, void 0, function* () {
          const pollId = nextPollId++;
          const runners = [];
          let blockNumber = null;
          try {
            blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
          } catch (error) {
            this.emit("error", error);
            return;
          }
          this._setFastBlockNumber(blockNumber);
          this.emit("poll", pollId, blockNumber);
          if (blockNumber === this._lastBlockNumber) {
            this.emit("didPoll", pollId);
            return;
          }
          if (this._emitted.block === -2) {
            this._emitted.block = blockNumber - 1;
          }
          if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
            logger27.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
            this.emit("error", logger27.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
              blockNumber,
              event: "blockSkew",
              previousBlockNumber: this._emitted.block
            }));
            this.emit("block", blockNumber);
          } else {
            for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
              this.emit("block", i);
            }
          }
          if (this._emitted.block !== blockNumber) {
            this._emitted.block = blockNumber;
            Object.keys(this._emitted).forEach((key2) => {
              if (key2 === "block") {
                return;
              }
              const eventBlockNumber = this._emitted[key2];
              if (eventBlockNumber === "pending") {
                return;
              }
              if (blockNumber - eventBlockNumber > 12) {
                delete this._emitted[key2];
              }
            });
          }
          if (this._lastBlockNumber === -2) {
            this._lastBlockNumber = blockNumber - 1;
          }
          this._events.forEach((event) => {
            switch (event.type) {
              case "tx": {
                const hash3 = event.hash;
                let runner = this.getTransactionReceipt(hash3).then((receipt) => {
                  if (!receipt || receipt.blockNumber == null) {
                    return null;
                  }
                  this._emitted["t:" + hash3] = receipt.blockNumber;
                  this.emit(hash3, receipt);
                  return null;
                }).catch((error) => {
                  this.emit("error", error);
                });
                runners.push(runner);
                break;
              }
              case "filter": {
                if (!event._inflight) {
                  event._inflight = true;
                  if (event._lastBlockNumber === -2) {
                    event._lastBlockNumber = blockNumber - 1;
                  }
                  const filter = event.filter;
                  filter.fromBlock = event._lastBlockNumber + 1;
                  filter.toBlock = blockNumber;
                  const minFromBlock = filter.toBlock - this._maxFilterBlockRange;
                  if (minFromBlock > filter.fromBlock) {
                    filter.fromBlock = minFromBlock;
                  }
                  if (filter.fromBlock < 0) {
                    filter.fromBlock = 0;
                  }
                  const runner = this.getLogs(filter).then((logs) => {
                    event._inflight = false;
                    if (logs.length === 0) {
                      return;
                    }
                    logs.forEach((log) => {
                      if (log.blockNumber > event._lastBlockNumber) {
                        event._lastBlockNumber = log.blockNumber;
                      }
                      this._emitted["b:" + log.blockHash] = log.blockNumber;
                      this._emitted["t:" + log.transactionHash] = log.blockNumber;
                      this.emit(filter, log);
                    });
                  }).catch((error) => {
                    this.emit("error", error);
                    event._inflight = false;
                  });
                  runners.push(runner);
                }
                break;
              }
            }
          });
          this._lastBlockNumber = blockNumber;
          Promise.all(runners).then(() => {
            this.emit("didPoll", pollId);
          }).catch((error) => {
            this.emit("error", error);
          });
          return;
        });
      }
      // Deprecated; do not use this
      resetEventsBlock(blockNumber) {
        this._lastBlockNumber = blockNumber - 1;
        if (this.polling) {
          this.poll();
        }
      }
      get network() {
        return this._network;
      }
      // This method should query the network if the underlying network
      // can change, such as when connected to a JSON-RPC backend
      detectNetwork() {
        return __awaiter9(this, void 0, void 0, function* () {
          return logger27.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "provider.detectNetwork"
          });
        });
      }
      getNetwork() {
        return __awaiter9(this, void 0, void 0, function* () {
          const network = yield this._ready();
          const currentNetwork = yield this.detectNetwork();
          if (network.chainId !== currentNetwork.chainId) {
            if (this.anyNetwork) {
              this._network = currentNetwork;
              this._lastBlockNumber = -2;
              this._fastBlockNumber = null;
              this._fastBlockNumberPromise = null;
              this._fastQueryDate = 0;
              this._emitted.block = -2;
              this._maxInternalBlockNumber = -1024;
              this._internalBlockNumber = null;
              this.emit("network", currentNetwork, network);
              yield stall(0);
              return this._network;
            }
            const error = logger27.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
              event: "changed",
              network,
              detectedNetwork: currentNetwork
            });
            this.emit("error", error);
            throw error;
          }
          return network;
        });
      }
      get blockNumber() {
        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
          this._setFastBlockNumber(blockNumber);
        }, (error) => {
        });
        return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
      }
      get polling() {
        return this._poller != null;
      }
      set polling(value) {
        if (value && !this._poller) {
          this._poller = setInterval(() => {
            this.poll();
          }, this.pollingInterval);
          if (!this._bootstrapPoll) {
            this._bootstrapPoll = setTimeout(() => {
              this.poll();
              this._bootstrapPoll = setTimeout(() => {
                if (!this._poller) {
                  this.poll();
                }
                this._bootstrapPoll = null;
              }, this.pollingInterval);
            }, 0);
          }
        } else if (!value && this._poller) {
          clearInterval(this._poller);
          this._poller = null;
        }
      }
      get pollingInterval() {
        return this._pollingInterval;
      }
      set pollingInterval(value) {
        if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
          throw new Error("invalid polling interval");
        }
        this._pollingInterval = value;
        if (this._poller) {
          clearInterval(this._poller);
          this._poller = setInterval(() => {
            this.poll();
          }, this._pollingInterval);
        }
      }
      _getFastBlockNumber() {
        const now2 = getTime();
        if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {
          this._fastQueryDate = now2;
          this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
              this._fastBlockNumber = blockNumber;
            }
            return this._fastBlockNumber;
          });
        }
        return this._fastBlockNumberPromise;
      }
      _setFastBlockNumber(blockNumber) {
        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
          return;
        }
        this._fastQueryDate = getTime();
        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
          this._fastBlockNumber = blockNumber;
          this._fastBlockNumberPromise = Promise.resolve(blockNumber);
        }
      }
      waitForTransaction(transactionHash, confirmations, timeout) {
        return __awaiter9(this, void 0, void 0, function* () {
          return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);
        });
      }
      _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
        return __awaiter9(this, void 0, void 0, function* () {
          const receipt = yield this.getTransactionReceipt(transactionHash);
          if ((receipt ? receipt.confirmations : 0) >= confirmations) {
            return receipt;
          }
          return new Promise((resolve, reject) => {
            const cancelFuncs = [];
            let done = false;
            const alreadyDone = function() {
              if (done) {
                return true;
              }
              done = true;
              cancelFuncs.forEach((func) => {
                func();
              });
              return false;
            };
            const minedHandler = (receipt2) => {
              if (receipt2.confirmations < confirmations) {
                return;
              }
              if (alreadyDone()) {
                return;
              }
              resolve(receipt2);
            };
            this.on(transactionHash, minedHandler);
            cancelFuncs.push(() => {
              this.removeListener(transactionHash, minedHandler);
            });
            if (replaceable) {
              let lastBlockNumber = replaceable.startBlock;
              let scannedBlock = null;
              const replaceHandler = (blockNumber) => __awaiter9(this, void 0, void 0, function* () {
                if (done) {
                  return;
                }
                yield stall(1e3);
                this.getTransactionCount(replaceable.from).then((nonce) => __awaiter9(this, void 0, void 0, function* () {
                  if (done) {
                    return;
                  }
                  if (nonce <= replaceable.nonce) {
                    lastBlockNumber = blockNumber;
                  } else {
                    {
                      const mined = yield this.getTransaction(transactionHash);
                      if (mined && mined.blockNumber != null) {
                        return;
                      }
                    }
                    if (scannedBlock == null) {
                      scannedBlock = lastBlockNumber - 3;
                      if (scannedBlock < replaceable.startBlock) {
                        scannedBlock = replaceable.startBlock;
                      }
                    }
                    while (scannedBlock <= blockNumber) {
                      if (done) {
                        return;
                      }
                      const block = yield this.getBlockWithTransactions(scannedBlock);
                      for (let ti = 0; ti < block.transactions.length; ti++) {
                        const tx = block.transactions[ti];
                        if (tx.hash === transactionHash) {
                          return;
                        }
                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                          if (done) {
                            return;
                          }
                          const receipt2 = yield this.waitForTransaction(tx.hash, confirmations);
                          if (alreadyDone()) {
                            return;
                          }
                          let reason = "replaced";
                          if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                            reason = "repriced";
                          } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                            reason = "cancelled";
                          }
                          reject(logger27.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                            cancelled: reason === "replaced" || reason === "cancelled",
                            reason,
                            replacement: this._wrapTransaction(tx),
                            hash: transactionHash,
                            receipt: receipt2
                          }));
                          return;
                        }
                      }
                      scannedBlock++;
                    }
                  }
                  if (done) {
                    return;
                  }
                  this.once("block", replaceHandler);
                }), (error) => {
                  if (done) {
                    return;
                  }
                  this.once("block", replaceHandler);
                });
              });
              if (done) {
                return;
              }
              this.once("block", replaceHandler);
              cancelFuncs.push(() => {
                this.removeListener("block", replaceHandler);
              });
            }
            if (typeof timeout === "number" && timeout > 0) {
              const timer2 = setTimeout(() => {
                if (alreadyDone()) {
                  return;
                }
                reject(logger27.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout }));
              }, timeout);
              if (timer2.unref) {
                timer2.unref();
              }
              cancelFuncs.push(() => {
                clearTimeout(timer2);
              });
            }
          });
        });
      }
      getBlockNumber() {
        return __awaiter9(this, void 0, void 0, function* () {
          return this._getInternalBlockNumber(0);
        });
      }
      getGasPrice() {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const result = yield this.perform("getGasPrice", {});
          try {
            return BigNumber.from(result);
          } catch (error) {
            return logger27.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getGasPrice",
              result,
              error
            });
          }
        });
      }
      getBalance(addressOrName, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("getBalance", params);
          try {
            return BigNumber.from(result);
          } catch (error) {
            return logger27.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getBalance",
              params,
              result,
              error
            });
          }
        });
      }
      getTransactionCount(addressOrName, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("getTransactionCount", params);
          try {
            return BigNumber.from(result).toNumber();
          } catch (error) {
            return logger27.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getTransactionCount",
              params,
              result,
              error
            });
          }
        });
      }
      getCode(addressOrName, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("getCode", params);
          try {
            return hexlify(result);
          } catch (error) {
            return logger27.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getCode",
              params,
              result,
              error
            });
          }
        });
      }
      getStorageAt(addressOrName, position, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag),
            position: Promise.resolve(position).then((p) => hexValue(p))
          });
          const result = yield this.perform("getStorageAt", params);
          try {
            return hexlify(result);
          } catch (error) {
            return logger27.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getStorageAt",
              params,
              result,
              error
            });
          }
        });
      }
      // This should be called by any subclass wrapping a TransactionResponse
      _wrapTransaction(tx, hash3, startBlock) {
        if (hash3 != null && hexDataLength(hash3) !== 32) {
          throw new Error("invalid response - sendTransaction");
        }
        const result = tx;
        if (hash3 != null && tx.hash !== hash3) {
          logger27.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash3 });
        }
        result.wait = (confirms, timeout) => __awaiter9(this, void 0, void 0, function* () {
          if (confirms == null) {
            confirms = 1;
          }
          if (timeout == null) {
            timeout = 0;
          }
          let replacement = void 0;
          if (confirms !== 0 && startBlock != null) {
            replacement = {
              data: tx.data,
              from: tx.from,
              nonce: tx.nonce,
              to: tx.to,
              value: tx.value,
              startBlock
            };
          }
          const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
          if (receipt == null && confirms === 0) {
            return null;
          }
          this._emitted["t:" + tx.hash] = receipt.blockNumber;
          if (receipt.status === 0) {
            logger27.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
              transactionHash: tx.hash,
              transaction: tx,
              receipt
            });
          }
          return receipt;
        });
        return result;
      }
      sendTransaction(signedTransaction) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const hexTx = yield Promise.resolve(signedTransaction).then((t) => hexlify(t));
          const tx = this.formatter.transaction(signedTransaction);
          if (tx.confirmations == null) {
            tx.confirmations = 0;
          }
          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
          try {
            const hash3 = yield this.perform("sendTransaction", { signedTransaction: hexTx });
            return this._wrapTransaction(tx, hash3, blockNumber);
          } catch (error) {
            error.transaction = tx;
            error.transactionHash = tx.hash;
            throw error;
          }
        });
      }
      _getTransactionRequest(transaction) {
        return __awaiter9(this, void 0, void 0, function* () {
          const values = yield transaction;
          const tx = {};
          ["from", "to"].forEach((key2) => {
            if (values[key2] == null) {
              return;
            }
            tx[key2] = Promise.resolve(values[key2]).then((v) => v ? this._getAddress(v) : null);
          });
          ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key2) => {
            if (values[key2] == null) {
              return;
            }
            tx[key2] = Promise.resolve(values[key2]).then((v) => v ? BigNumber.from(v) : null);
          });
          ["type"].forEach((key2) => {
            if (values[key2] == null) {
              return;
            }
            tx[key2] = Promise.resolve(values[key2]).then((v) => v != null ? v : null);
          });
          if (values.accessList) {
            tx.accessList = this.formatter.accessList(values.accessList);
          }
          ["data"].forEach((key2) => {
            if (values[key2] == null) {
              return;
            }
            tx[key2] = Promise.resolve(values[key2]).then((v) => v ? hexlify(v) : null);
          });
          return this.formatter.transactionRequest(yield resolveProperties(tx));
        });
      }
      _getFilter(filter) {
        return __awaiter9(this, void 0, void 0, function* () {
          filter = yield filter;
          const result = {};
          if (filter.address != null) {
            result.address = this._getAddress(filter.address);
          }
          ["blockHash", "topics"].forEach((key2) => {
            if (filter[key2] == null) {
              return;
            }
            result[key2] = filter[key2];
          });
          ["fromBlock", "toBlock"].forEach((key2) => {
            if (filter[key2] == null) {
              return;
            }
            result[key2] = this._getBlockTag(filter[key2]);
          });
          return this.formatter.filter(yield resolveProperties(result));
        });
      }
      _call(transaction, blockTag, attempt) {
        return __awaiter9(this, void 0, void 0, function* () {
          if (attempt >= MAX_CCIP_REDIRECTS) {
            logger27.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
              redirects: attempt,
              transaction
            });
          }
          const txSender = transaction.to;
          const result = yield this.perform("call", { transaction, blockTag });
          if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && hexDataLength(result) % 32 === 4) {
            try {
              const data = hexDataSlice(result, 4);
              const sender = hexDataSlice(data, 0, 32);
              if (!BigNumber.from(sender).eq(txSender)) {
                logger27.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
                  name: "OffchainLookup",
                  signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                  transaction,
                  data: result
                });
              }
              const urls = [];
              const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();
              const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
              const urlsData = hexDataSlice(data, urlsOffset + 32);
              for (let u = 0; u < urlsLength; u++) {
                const url = _parseString(urlsData, u * 32);
                if (url == null) {
                  logger27.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                    name: "OffchainLookup",
                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                    transaction,
                    data: result
                  });
                }
                urls.push(url);
              }
              const calldata = _parseBytes(data, 64);
              if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {
                logger27.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
                  name: "OffchainLookup",
                  signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                  transaction,
                  data: result
                });
              }
              const callbackSelector = hexDataSlice(data, 96, 100);
              const extraData = _parseBytes(data, 128);
              const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
              if (ccipResult == null) {
                logger27.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
                  name: "OffchainLookup",
                  signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                  transaction,
                  data: result
                });
              }
              const tx = {
                to: txSender,
                data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])
              };
              return this._call(tx, blockTag, attempt + 1);
            } catch (error) {
              if (error.code === Logger.errors.SERVER_ERROR) {
                throw error;
              }
            }
          }
          try {
            return hexlify(result);
          } catch (error) {
            return logger27.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "call",
              params: { transaction, blockTag },
              result,
              error
            });
          }
        });
      }
      call(transaction, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const resolved = yield resolveProperties({
            transaction: this._getTransactionRequest(transaction),
            blockTag: this._getBlockTag(blockTag),
            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
          });
          return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
        });
      }
      estimateGas(transaction) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            transaction: this._getTransactionRequest(transaction)
          });
          const result = yield this.perform("estimateGas", params);
          try {
            return BigNumber.from(result);
          } catch (error) {
            return logger27.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "estimateGas",
              params,
              result,
              error
            });
          }
        });
      }
      _getAddress(addressOrName) {
        return __awaiter9(this, void 0, void 0, function* () {
          addressOrName = yield addressOrName;
          if (typeof addressOrName !== "string") {
            logger27.throwArgumentError("invalid address or ENS name", "name", addressOrName);
          }
          const address = yield this.resolveName(addressOrName);
          if (address == null) {
            logger27.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: `resolveName(${JSON.stringify(addressOrName)})`
            });
          }
          return address;
        });
      }
      _getBlock(blockHashOrBlockTag, includeTransactions) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          blockHashOrBlockTag = yield blockHashOrBlockTag;
          let blockNumber = -128;
          const params = {
            includeTransactions: !!includeTransactions
          };
          if (isHexString(blockHashOrBlockTag, 32)) {
            params.blockHash = blockHashOrBlockTag;
          } else {
            try {
              params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
              if (isHexString(params.blockTag)) {
                blockNumber = parseInt(params.blockTag.substring(2), 16);
              }
            } catch (error) {
              logger27.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
            }
          }
          return poll(() => __awaiter9(this, void 0, void 0, function* () {
            const block = yield this.perform("getBlock", params);
            if (block == null) {
              if (params.blockHash != null) {
                if (this._emitted["b:" + params.blockHash] == null) {
                  return null;
                }
              }
              if (params.blockTag != null) {
                if (blockNumber > this._emitted.block) {
                  return null;
                }
              }
              return void 0;
            }
            if (includeTransactions) {
              let blockNumber2 = null;
              for (let i = 0; i < block.transactions.length; i++) {
                const tx = block.transactions[i];
                if (tx.blockNumber == null) {
                  tx.confirmations = 0;
                } else if (tx.confirmations == null) {
                  if (blockNumber2 == null) {
                    blockNumber2 = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                  }
                  let confirmations = blockNumber2 - tx.blockNumber + 1;
                  if (confirmations <= 0) {
                    confirmations = 1;
                  }
                  tx.confirmations = confirmations;
                }
              }
              const blockWithTxs = this.formatter.blockWithTransactions(block);
              blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
              return blockWithTxs;
            }
            return this.formatter.block(block);
          }), { oncePoll: this });
        });
      }
      getBlock(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, false);
      }
      getBlockWithTransactions(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, true);
      }
      getTransaction(transactionHash) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          transactionHash = yield transactionHash;
          const params = { transactionHash: this.formatter.hash(transactionHash, true) };
          return poll(() => __awaiter9(this, void 0, void 0, function* () {
            const result = yield this.perform("getTransaction", params);
            if (result == null) {
              if (this._emitted["t:" + transactionHash] == null) {
                return null;
              }
              return void 0;
            }
            const tx = this.formatter.transactionResponse(result);
            if (tx.blockNumber == null) {
              tx.confirmations = 0;
            } else if (tx.confirmations == null) {
              const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              let confirmations = blockNumber - tx.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              tx.confirmations = confirmations;
            }
            return this._wrapTransaction(tx);
          }), { oncePoll: this });
        });
      }
      getTransactionReceipt(transactionHash) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          transactionHash = yield transactionHash;
          const params = { transactionHash: this.formatter.hash(transactionHash, true) };
          return poll(() => __awaiter9(this, void 0, void 0, function* () {
            const result = yield this.perform("getTransactionReceipt", params);
            if (result == null) {
              if (this._emitted["t:" + transactionHash] == null) {
                return null;
              }
              return void 0;
            }
            if (result.blockHash == null) {
              return void 0;
            }
            const receipt = this.formatter.receipt(result);
            if (receipt.blockNumber == null) {
              receipt.confirmations = 0;
            } else if (receipt.confirmations == null) {
              const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              let confirmations = blockNumber - receipt.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              receipt.confirmations = confirmations;
            }
            return receipt;
          }), { oncePoll: this });
        });
      }
      getLogs(filter) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({ filter: this._getFilter(filter) });
          const logs = yield this.perform("getLogs", params);
          logs.forEach((log) => {
            if (log.removed == null) {
              log.removed = false;
            }
          });
          return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
        });
      }
      getEtherPrice() {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          return this.perform("getEtherPrice", {});
        });
      }
      _getBlockTag(blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          blockTag = yield blockTag;
          if (typeof blockTag === "number" && blockTag < 0) {
            if (blockTag % 1) {
              logger27.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
            }
            let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
            blockNumber += blockTag;
            if (blockNumber < 0) {
              blockNumber = 0;
            }
            return this.formatter.blockTag(blockNumber);
          }
          return this.formatter.blockTag(blockTag);
        });
      }
      getResolver(name) {
        return __awaiter9(this, void 0, void 0, function* () {
          let currentName = name;
          while (true) {
            if (currentName === "" || currentName === ".") {
              return null;
            }
            if (name !== "eth" && currentName === "eth") {
              return null;
            }
            const addr = yield this._getResolver(currentName, "getResolver");
            if (addr != null) {
              const resolver = new Resolver(this, addr, name);
              if (currentName !== name && !(yield resolver.supportsWildcard())) {
                return null;
              }
              return resolver;
            }
            currentName = currentName.split(".").slice(1).join(".");
          }
        });
      }
      _getResolver(name, operation) {
        return __awaiter9(this, void 0, void 0, function* () {
          if (operation == null) {
            operation = "ENS";
          }
          const network = yield this.getNetwork();
          if (!network.ensAddress) {
            logger27.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
          }
          try {
            const addrData = yield this.call({
              to: network.ensAddress,
              data: "0x0178b8bf" + namehash(name).substring(2)
            });
            return this.formatter.callAddress(addrData);
          } catch (error) {
          }
          return null;
        });
      }
      resolveName(name) {
        return __awaiter9(this, void 0, void 0, function* () {
          name = yield name;
          try {
            return Promise.resolve(this.formatter.address(name));
          } catch (error) {
            if (isHexString(name)) {
              throw error;
            }
          }
          if (typeof name !== "string") {
            logger27.throwArgumentError("invalid ENS name", "name", name);
          }
          const resolver = yield this.getResolver(name);
          if (!resolver) {
            return null;
          }
          return yield resolver.getAddress();
        });
      }
      lookupAddress(address) {
        return __awaiter9(this, void 0, void 0, function* () {
          address = yield address;
          address = this.formatter.address(address);
          const node = address.substring(2).toLowerCase() + ".addr.reverse";
          const resolverAddr = yield this._getResolver(node, "lookupAddress");
          if (resolverAddr == null) {
            return null;
          }
          const name = _parseString(yield this.call({
            to: resolverAddr,
            data: "0x691f3431" + namehash(node).substring(2)
          }), 0);
          const addr = yield this.resolveName(name);
          if (addr != address) {
            return null;
          }
          return name;
        });
      }
      getAvatar(nameOrAddress) {
        return __awaiter9(this, void 0, void 0, function* () {
          let resolver = null;
          if (isHexString(nameOrAddress)) {
            const address = this.formatter.address(nameOrAddress);
            const node = address.substring(2).toLowerCase() + ".addr.reverse";
            const resolverAddress = yield this._getResolver(node, "getAvatar");
            if (!resolverAddress) {
              return null;
            }
            resolver = new Resolver(this, resolverAddress, node);
            try {
              const avatar2 = yield resolver.getAvatar();
              if (avatar2) {
                return avatar2.url;
              }
            } catch (error) {
              if (error.code !== Logger.errors.CALL_EXCEPTION) {
                throw error;
              }
            }
            try {
              const name = _parseString(yield this.call({
                to: resolverAddress,
                data: "0x691f3431" + namehash(node).substring(2)
              }), 0);
              resolver = yield this.getResolver(name);
            } catch (error) {
              if (error.code !== Logger.errors.CALL_EXCEPTION) {
                throw error;
              }
              return null;
            }
          } else {
            resolver = yield this.getResolver(nameOrAddress);
            if (!resolver) {
              return null;
            }
          }
          const avatar = yield resolver.getAvatar();
          if (avatar == null) {
            return null;
          }
          return avatar.url;
        });
      }
      perform(method, params) {
        return logger27.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
      }
      _startEvent(event) {
        this.polling = this._events.filter((e) => e.pollable()).length > 0;
      }
      _stopEvent(event) {
        this.polling = this._events.filter((e) => e.pollable()).length > 0;
      }
      _addEventListener(eventName, listener, once) {
        const event = new Event(getEventTag2(eventName), listener, once);
        this._events.push(event);
        this._startEvent(event);
        return this;
      }
      on(eventName, listener) {
        return this._addEventListener(eventName, listener, false);
      }
      once(eventName, listener) {
        return this._addEventListener(eventName, listener, true);
      }
      emit(eventName, ...args) {
        let result = false;
        let stopped = [];
        let eventTag = getEventTag2(eventName);
        this._events = this._events.filter((event) => {
          if (event.tag !== eventTag) {
            return true;
          }
          setTimeout(() => {
            event.listener.apply(this, args);
          }, 0);
          result = true;
          if (event.once) {
            stopped.push(event);
            return false;
          }
          return true;
        });
        stopped.forEach((event) => {
          this._stopEvent(event);
        });
        return result;
      }
      listenerCount(eventName) {
        if (!eventName) {
          return this._events.length;
        }
        let eventTag = getEventTag2(eventName);
        return this._events.filter((event) => {
          return event.tag === eventTag;
        }).length;
      }
      listeners(eventName) {
        if (eventName == null) {
          return this._events.map((event) => event.listener);
        }
        let eventTag = getEventTag2(eventName);
        return this._events.filter((event) => event.tag === eventTag).map((event) => event.listener);
      }
      off(eventName, listener) {
        if (listener == null) {
          return this.removeAllListeners(eventName);
        }
        const stopped = [];
        let found = false;
        let eventTag = getEventTag2(eventName);
        this._events = this._events.filter((event) => {
          if (event.tag !== eventTag || event.listener != listener) {
            return true;
          }
          if (found) {
            return true;
          }
          found = true;
          stopped.push(event);
          return false;
        });
        stopped.forEach((event) => {
          this._stopEvent(event);
        });
        return this;
      }
      removeAllListeners(eventName) {
        let stopped = [];
        if (eventName == null) {
          stopped = this._events;
          this._events = [];
        } else {
          const eventTag = getEventTag2(eventName);
          this._events = this._events.filter((event) => {
            if (event.tag !== eventTag) {
              return true;
            }
            stopped.push(event);
            return false;
          });
        }
        stopped.forEach((event) => {
          this._stopEvent(event);
        });
        return this;
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js
function spelunk(value, requireData) {
  if (value == null) {
    return null;
  }
  if (typeof value.message === "string" && value.message.match("reverted")) {
    const data = isHexString(value.data) ? value.data : null;
    if (!requireData || data) {
      return { message: value.message, data };
    }
  }
  if (typeof value === "object") {
    for (const key2 in value) {
      const result = spelunk(value[key2], requireData);
      if (result) {
        return result;
      }
    }
    return null;
  }
  if (typeof value === "string") {
    try {
      return spelunk(JSON.parse(value), requireData);
    } catch (error) {
    }
  }
  return null;
}
function checkError(method, error, params) {
  const transaction = params.transaction || params.signedTransaction;
  if (method === "call") {
    const result = spelunk(error, true);
    if (result) {
      return result.data;
    }
    logger28.throwError("missing revert data in call exception; Transaction reverted without a reason string", Logger.errors.CALL_EXCEPTION, {
      data: "0x",
      transaction,
      error
    });
  }
  if (method === "estimateGas") {
    let result = spelunk(error.body, false);
    if (result == null) {
      result = spelunk(error, false);
    }
    if (result) {
      logger28.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
        reason: result.message,
        method,
        transaction,
        error
      });
    }
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
    message = error.error.message;
  } else if (typeof error.body === "string") {
    message = error.body;
  } else if (typeof error.responseText === "string") {
    message = error.responseText;
  }
  message = (message || "").toLowerCase();
  if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
    logger28.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/nonce (is )?too low/i)) {
    logger28.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
    logger28.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/only replay-protected/i)) {
    logger28.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
      error,
      method,
      transaction
    });
  }
  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
    logger28.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
function timer(timeout) {
  return new Promise(function(resolve) {
    setTimeout(resolve, timeout);
  });
}
function getResult(payload) {
  if (payload.error) {
    const error = new Error(payload.error.message);
    error.code = payload.error.code;
    error.data = payload.error.data;
    throw error;
  }
  return payload.result;
}
function getLowerCase(value) {
  if (value) {
    return value.toLowerCase();
  }
  return value;
}
var __awaiter10, logger28, errorGas, _constructorGuard5, JsonRpcSigner, UncheckedJsonRpcSigner, allowedTransactionKeys3, JsonRpcProvider;
var init_json_rpc_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"() {
    "use strict";
    init_lib23();
    init_lib14();
    init_lib13();
    init_lib10();
    init_lib15();
    init_lib20();
    init_lib11();
    init_lib36();
    init_lib12();
    init_version21();
    init_base_provider();
    __awaiter10 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger28 = new Logger(version21);
    errorGas = ["call", "estimateGas"];
    _constructorGuard5 = {};
    JsonRpcSigner = class extends Signer {
      constructor(constructorGuard, provider, addressOrIndex) {
        super();
        if (constructorGuard !== _constructorGuard5) {
          throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
        }
        defineReadOnly(this, "provider", provider);
        if (addressOrIndex == null) {
          addressOrIndex = 0;
        }
        if (typeof addressOrIndex === "string") {
          defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
          defineReadOnly(this, "_index", null);
        } else if (typeof addressOrIndex === "number") {
          defineReadOnly(this, "_index", addressOrIndex);
          defineReadOnly(this, "_address", null);
        } else {
          logger28.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
        }
      }
      connect(provider) {
        return logger28.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "connect"
        });
      }
      connectUnchecked() {
        return new UncheckedJsonRpcSigner(_constructorGuard5, this.provider, this._address || this._index);
      }
      getAddress() {
        if (this._address) {
          return Promise.resolve(this._address);
        }
        return this.provider.send("eth_accounts", []).then((accounts) => {
          if (accounts.length <= this._index) {
            logger28.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "getAddress"
            });
          }
          return this.provider.formatter.address(accounts[this._index]);
        });
      }
      sendUncheckedTransaction(transaction) {
        transaction = shallowCopy(transaction);
        const fromAddress = this.getAddress().then((address) => {
          if (address) {
            address = address.toLowerCase();
          }
          return address;
        });
        if (transaction.gasLimit == null) {
          const estimate = shallowCopy(transaction);
          estimate.from = fromAddress;
          transaction.gasLimit = this.provider.estimateGas(estimate);
        }
        if (transaction.to != null) {
          transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter10(this, void 0, void 0, function* () {
            if (to == null) {
              return null;
            }
            const address = yield this.provider.resolveName(to);
            if (address == null) {
              logger28.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
            }
            return address;
          }));
        }
        return resolveProperties({
          tx: resolveProperties(transaction),
          sender: fromAddress
        }).then(({ tx, sender }) => {
          if (tx.from != null) {
            if (tx.from.toLowerCase() !== sender) {
              logger28.throwArgumentError("from address mismatch", "transaction", transaction);
            }
          } else {
            tx.from = sender;
          }
          const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
          return this.provider.send("eth_sendTransaction", [hexTx]).then((hash3) => {
            return hash3;
          }, (error) => {
            if (typeof error.message === "string" && error.message.match(/user denied/i)) {
              logger28.throwError("user rejected transaction", Logger.errors.ACTION_REJECTED, {
                action: "sendTransaction",
                transaction: tx
              });
            }
            return checkError("sendTransaction", error, hexTx);
          });
        });
      }
      signTransaction(transaction) {
        return logger28.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "signTransaction"
        });
      }
      sendTransaction(transaction) {
        return __awaiter10(this, void 0, void 0, function* () {
          const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
          const hash3 = yield this.sendUncheckedTransaction(transaction);
          try {
            return yield poll(() => __awaiter10(this, void 0, void 0, function* () {
              const tx = yield this.provider.getTransaction(hash3);
              if (tx === null) {
                return void 0;
              }
              return this.provider._wrapTransaction(tx, hash3, blockNumber);
            }), { oncePoll: this.provider });
          } catch (error) {
            error.transactionHash = hash3;
            throw error;
          }
        });
      }
      signMessage(message) {
        return __awaiter10(this, void 0, void 0, function* () {
          const data = typeof message === "string" ? toUtf8Bytes(message) : message;
          const address = yield this.getAddress();
          try {
            return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
          } catch (error) {
            if (typeof error.message === "string" && error.message.match(/user denied/i)) {
              logger28.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                action: "signMessage",
                from: address,
                messageData: message
              });
            }
            throw error;
          }
        });
      }
      _legacySignMessage(message) {
        return __awaiter10(this, void 0, void 0, function* () {
          const data = typeof message === "string" ? toUtf8Bytes(message) : message;
          const address = yield this.getAddress();
          try {
            return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
          } catch (error) {
            if (typeof error.message === "string" && error.message.match(/user denied/i)) {
              logger28.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                action: "_legacySignMessage",
                from: address,
                messageData: message
              });
            }
            throw error;
          }
        });
      }
      _signTypedData(domain, types, value) {
        return __awaiter10(this, void 0, void 0, function* () {
          const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
            return this.provider.resolveName(name);
          });
          const address = yield this.getAddress();
          try {
            return yield this.provider.send("eth_signTypedData_v4", [
              address.toLowerCase(),
              JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
            ]);
          } catch (error) {
            if (typeof error.message === "string" && error.message.match(/user denied/i)) {
              logger28.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                action: "_signTypedData",
                from: address,
                messageData: { domain: populated.domain, types, value: populated.value }
              });
            }
            throw error;
          }
        });
      }
      unlock(password) {
        return __awaiter10(this, void 0, void 0, function* () {
          const provider = this.provider;
          const address = yield this.getAddress();
          return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
        });
      }
    };
    UncheckedJsonRpcSigner = class extends JsonRpcSigner {
      sendTransaction(transaction) {
        return this.sendUncheckedTransaction(transaction).then((hash3) => {
          return {
            hash: hash3,
            nonce: null,
            gasLimit: null,
            gasPrice: null,
            data: null,
            value: null,
            chainId: null,
            confirmations: 0,
            from: null,
            wait: (confirmations) => {
              return this.provider.waitForTransaction(hash3, confirmations);
            }
          };
        });
      }
    };
    allowedTransactionKeys3 = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      value: true,
      type: true,
      accessList: true,
      maxFeePerGas: true,
      maxPriorityFeePerGas: true
    };
    JsonRpcProvider = class extends BaseProvider {
      constructor(url, network) {
        let networkOrReady = network;
        if (networkOrReady == null) {
          networkOrReady = new Promise((resolve, reject) => {
            setTimeout(() => {
              this.detectNetwork().then((network2) => {
                resolve(network2);
              }, (error) => {
                reject(error);
              });
            }, 0);
          });
        }
        super(networkOrReady);
        if (!url) {
          url = getStatic(this.constructor, "defaultUrl")();
        }
        if (typeof url === "string") {
          defineReadOnly(this, "connection", Object.freeze({
            url
          }));
        } else {
          defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
        }
        this._nextId = 42;
      }
      get _cache() {
        if (this._eventLoopCache == null) {
          this._eventLoopCache = {};
        }
        return this._eventLoopCache;
      }
      static defaultUrl() {
        return "http://localhost:8545";
      }
      detectNetwork() {
        if (!this._cache["detectNetwork"]) {
          this._cache["detectNetwork"] = this._uncachedDetectNetwork();
          setTimeout(() => {
            this._cache["detectNetwork"] = null;
          }, 0);
        }
        return this._cache["detectNetwork"];
      }
      _uncachedDetectNetwork() {
        return __awaiter10(this, void 0, void 0, function* () {
          yield timer(0);
          let chainId = null;
          try {
            chainId = yield this.send("eth_chainId", []);
          } catch (error) {
            try {
              chainId = yield this.send("net_version", []);
            } catch (error2) {
            }
          }
          if (chainId != null) {
            const getNetwork2 = getStatic(this.constructor, "getNetwork");
            try {
              return getNetwork2(BigNumber.from(chainId).toNumber());
            } catch (error) {
              return logger28.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                chainId,
                event: "invalidNetwork",
                serverError: error
              });
            }
          }
          return logger28.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
            event: "noNetwork"
          });
        });
      }
      getSigner(addressOrIndex) {
        return new JsonRpcSigner(_constructorGuard5, this, addressOrIndex);
      }
      getUncheckedSigner(addressOrIndex) {
        return this.getSigner(addressOrIndex).connectUnchecked();
      }
      listAccounts() {
        return this.send("eth_accounts", []).then((accounts) => {
          return accounts.map((a) => this.formatter.address(a));
        });
      }
      send(method, params) {
        const request = {
          method,
          params,
          id: this._nextId++,
          jsonrpc: "2.0"
        };
        this.emit("debug", {
          action: "request",
          request: deepCopy(request),
          provider: this
        });
        const cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
        if (cache && this._cache[method]) {
          return this._cache[method];
        }
        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result2) => {
          this.emit("debug", {
            action: "response",
            request,
            response: result2,
            provider: this
          });
          return result2;
        }, (error) => {
          this.emit("debug", {
            action: "response",
            error,
            request,
            provider: this
          });
          throw error;
        });
        if (cache) {
          this._cache[method] = result;
          setTimeout(() => {
            this._cache[method] = null;
          }, 0);
        }
        return result;
      }
      prepareRequest(method, params) {
        switch (method) {
          case "getBlockNumber":
            return ["eth_blockNumber", []];
          case "getGasPrice":
            return ["eth_gasPrice", []];
          case "getBalance":
            return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
          case "getTransactionCount":
            return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
          case "getCode":
            return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
          case "getStorageAt":
            return ["eth_getStorageAt", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];
          case "sendTransaction":
            return ["eth_sendRawTransaction", [params.signedTransaction]];
          case "getBlock":
            if (params.blockTag) {
              return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
            } else if (params.blockHash) {
              return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
            }
            return null;
          case "getTransaction":
            return ["eth_getTransactionByHash", [params.transactionHash]];
          case "getTransactionReceipt":
            return ["eth_getTransactionReceipt", [params.transactionHash]];
          case "call": {
            const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
          }
          case "estimateGas": {
            const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
          }
          case "getLogs":
            if (params.filter && params.filter.address != null) {
              params.filter.address = getLowerCase(params.filter.address);
            }
            return ["eth_getLogs", [params.filter]];
          default:
            break;
        }
        return null;
      }
      perform(method, params) {
        return __awaiter10(this, void 0, void 0, function* () {
          if (method === "call" || method === "estimateGas") {
            const tx = params.transaction;
            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
              if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                const feeData = yield this.getFeeData();
                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                  params = shallowCopy(params);
                  params.transaction = shallowCopy(tx);
                  delete params.transaction.type;
                }
              }
            }
          }
          const args = this.prepareRequest(method, params);
          if (args == null) {
            logger28.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
          }
          try {
            return yield this.send(args[0], args[1]);
          } catch (error) {
            return checkError(method, error, params);
          }
        });
      }
      _startEvent(event) {
        if (event.tag === "pending") {
          this._startPending();
        }
        super._startEvent(event);
      }
      _startPending() {
        if (this._pendingFilter != null) {
          return;
        }
        const self2 = this;
        const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
        this._pendingFilter = pendingFilter;
        pendingFilter.then(function(filterId) {
          function poll2() {
            self2.send("eth_getFilterChanges", [filterId]).then(function(hashes) {
              if (self2._pendingFilter != pendingFilter) {
                return null;
              }
              let seq = Promise.resolve();
              hashes.forEach(function(hash3) {
                self2._emitted["t:" + hash3.toLowerCase()] = "pending";
                seq = seq.then(function() {
                  return self2.getTransaction(hash3).then(function(tx) {
                    self2.emit("pending", tx);
                    return null;
                  });
                });
              });
              return seq.then(function() {
                return timer(1e3);
              });
            }).then(function() {
              if (self2._pendingFilter != pendingFilter) {
                self2.send("eth_uninstallFilter", [filterId]);
                return;
              }
              setTimeout(function() {
                poll2();
              }, 0);
              return null;
            }).catch((error) => {
            });
          }
          poll2();
          return filterId;
        }).catch((error) => {
        });
      }
      _stopEvent(event) {
        if (event.tag === "pending" && this.listenerCount("pending") === 0) {
          this._pendingFilter = null;
        }
        super._stopEvent(event);
      }
      // Convert an ethers.js transaction into a JSON-RPC transaction
      //  - gasLimit => gas
      //  - All values hexlified
      //  - All numeric values zero-striped
      //  - All addresses are lowercased
      // NOTE: This allows a TransactionRequest, but all values should be resolved
      //       before this is called
      // @TODO: This will likely be removed in future versions and prepareRequest
      //        will be the preferred method for this.
      static hexlifyTransaction(transaction, allowExtra) {
        const allowed = shallowCopy(allowedTransactionKeys3);
        if (allowExtra) {
          for (const key2 in allowExtra) {
            if (allowExtra[key2]) {
              allowed[key2] = true;
            }
          }
        }
        checkProperties(transaction, allowed);
        const result = {};
        ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function(key2) {
          if (transaction[key2] == null) {
            return;
          }
          const value = hexValue(BigNumber.from(transaction[key2]));
          if (key2 === "gasLimit") {
            key2 = "gas";
          }
          result[key2] = value;
        });
        ["from", "to", "data"].forEach(function(key2) {
          if (transaction[key2] == null) {
            return;
          }
          result[key2] = hexlify(transaction[key2]);
        });
        if (transaction.accessList) {
          result["accessList"] = accessListify(transaction.accessList);
        }
        return result;
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ws.js
var WS;
var init_ws = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ws.js"() {
    "use strict";
    init_lib12();
    init_version21();
    WS = null;
    try {
      WS = WebSocket;
      if (WS == null) {
        throw new Error("inject please");
      }
    } catch (error) {
      const logger44 = new Logger(version21);
      WS = function() {
        logger44.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new WebSocket()"
        });
      };
    }
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js
var __awaiter11, logger29, NextId, WebSocketProvider;
var init_websocket_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js"() {
    "use strict";
    init_lib14();
    init_lib15();
    init_json_rpc_provider();
    init_ws();
    init_lib12();
    init_version21();
    __awaiter11 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger29 = new Logger(version21);
    NextId = 1;
    WebSocketProvider = class extends JsonRpcProvider {
      constructor(url, network) {
        if (network === "any") {
          logger29.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "network:any"
          });
        }
        if (typeof url === "string") {
          super(url, network);
        } else {
          super("_websocket", network);
        }
        this._pollingInterval = -1;
        this._wsReady = false;
        if (typeof url === "string") {
          defineReadOnly(this, "_websocket", new WS(this.connection.url));
        } else {
          defineReadOnly(this, "_websocket", url);
        }
        defineReadOnly(this, "_requests", {});
        defineReadOnly(this, "_subs", {});
        defineReadOnly(this, "_subIds", {});
        defineReadOnly(this, "_detectNetwork", super.detectNetwork());
        this.websocket.onopen = () => {
          this._wsReady = true;
          Object.keys(this._requests).forEach((id2) => {
            this.websocket.send(this._requests[id2].payload);
          });
        };
        this.websocket.onmessage = (messageEvent) => {
          const data = messageEvent.data;
          const result = JSON.parse(data);
          if (result.id != null) {
            const id2 = String(result.id);
            const request = this._requests[id2];
            delete this._requests[id2];
            if (result.result !== void 0) {
              request.callback(null, result.result);
              this.emit("debug", {
                action: "response",
                request: JSON.parse(request.payload),
                response: result.result,
                provider: this
              });
            } else {
              let error = null;
              if (result.error) {
                error = new Error(result.error.message || "unknown error");
                defineReadOnly(error, "code", result.error.code || null);
                defineReadOnly(error, "response", data);
              } else {
                error = new Error("unknown error");
              }
              request.callback(error, void 0);
              this.emit("debug", {
                action: "response",
                error,
                request: JSON.parse(request.payload),
                provider: this
              });
            }
          } else if (result.method === "eth_subscription") {
            const sub = this._subs[result.params.subscription];
            if (sub) {
              sub.processFunc(result.params.result);
            }
          } else {
            console.warn("this should not happen");
          }
        };
        const fauxPoll = setInterval(() => {
          this.emit("poll");
        }, 1e3);
        if (fauxPoll.unref) {
          fauxPoll.unref();
        }
      }
      // Cannot narrow the type of _websocket, as that is not backwards compatible
      // so we add a getter and let the WebSocket be a public API.
      get websocket() {
        return this._websocket;
      }
      detectNetwork() {
        return this._detectNetwork;
      }
      get pollingInterval() {
        return 0;
      }
      resetEventsBlock(blockNumber) {
        logger29.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "resetEventBlock"
        });
      }
      set pollingInterval(value) {
        logger29.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setPollingInterval"
        });
      }
      poll() {
        return __awaiter11(this, void 0, void 0, function* () {
          return null;
        });
      }
      set polling(value) {
        if (!value) {
          return;
        }
        logger29.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setPolling"
        });
      }
      send(method, params) {
        const rid = NextId++;
        return new Promise((resolve, reject) => {
          function callback(error, result) {
            if (error) {
              return reject(error);
            }
            return resolve(result);
          }
          const payload = JSON.stringify({
            method,
            params,
            id: rid,
            jsonrpc: "2.0"
          });
          this.emit("debug", {
            action: "request",
            request: JSON.parse(payload),
            provider: this
          });
          this._requests[String(rid)] = { callback, payload };
          if (this._wsReady) {
            this.websocket.send(payload);
          }
        });
      }
      static defaultUrl() {
        return "ws://localhost:8546";
      }
      _subscribe(tag, param, processFunc) {
        return __awaiter11(this, void 0, void 0, function* () {
          let subIdPromise = this._subIds[tag];
          if (subIdPromise == null) {
            subIdPromise = Promise.all(param).then((param2) => {
              return this.send("eth_subscribe", param2);
            });
            this._subIds[tag] = subIdPromise;
          }
          const subId = yield subIdPromise;
          this._subs[subId] = { tag, processFunc };
        });
      }
      _startEvent(event) {
        switch (event.type) {
          case "block":
            this._subscribe("block", ["newHeads"], (result) => {
              const blockNumber = BigNumber.from(result.number).toNumber();
              this._emitted.block = blockNumber;
              this.emit("block", blockNumber);
            });
            break;
          case "pending":
            this._subscribe("pending", ["newPendingTransactions"], (result) => {
              this.emit("pending", result);
            });
            break;
          case "filter":
            this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
              if (result.removed == null) {
                result.removed = false;
              }
              this.emit(event.filter, this.formatter.filterLog(result));
            });
            break;
          case "tx": {
            const emitReceipt = (event2) => {
              const hash3 = event2.hash;
              this.getTransactionReceipt(hash3).then((receipt) => {
                if (!receipt) {
                  return;
                }
                this.emit(hash3, receipt);
              });
            };
            emitReceipt(event);
            this._subscribe("tx", ["newHeads"], (result) => {
              this._events.filter((e) => e.type === "tx").forEach(emitReceipt);
            });
            break;
          }
          // Nothing is needed
          case "debug":
          case "poll":
          case "willPoll":
          case "didPoll":
          case "error":
            break;
          default:
            console.log("unhandled:", event);
            break;
        }
      }
      _stopEvent(event) {
        let tag = event.tag;
        if (event.type === "tx") {
          if (this._events.filter((e) => e.type === "tx").length) {
            return;
          }
          tag = "tx";
        } else if (this.listenerCount(event.event)) {
          return;
        }
        const subId = this._subIds[tag];
        if (!subId) {
          return;
        }
        delete this._subIds[tag];
        subId.then((subId2) => {
          if (!this._subs[subId2]) {
            return;
          }
          delete this._subs[subId2];
          this.send("eth_unsubscribe", [subId2]);
        });
      }
      destroy() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (this.websocket.readyState === WS.CONNECTING) {
            yield new Promise((resolve) => {
              this.websocket.onopen = function() {
                resolve(true);
              };
              this.websocket.onerror = function() {
                resolve(false);
              };
            });
          }
          this.websocket.close(1e3);
        });
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js
var __awaiter12, logger30, StaticJsonRpcProvider, UrlJsonRpcProvider;
var init_url_json_rpc_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js"() {
    "use strict";
    init_lib15();
    init_lib12();
    init_version21();
    init_json_rpc_provider();
    __awaiter12 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger30 = new Logger(version21);
    StaticJsonRpcProvider = class extends JsonRpcProvider {
      detectNetwork() {
        const _super = Object.create(null, {
          detectNetwork: { get: () => super.detectNetwork }
        });
        return __awaiter12(this, void 0, void 0, function* () {
          let network = this.network;
          if (network == null) {
            network = yield _super.detectNetwork.call(this);
            if (!network) {
              logger30.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
            }
            if (this._network == null) {
              defineReadOnly(this, "_network", network);
              this.emit("network", network, null);
            }
          }
          return network;
        });
      }
    };
    UrlJsonRpcProvider = class _UrlJsonRpcProvider extends StaticJsonRpcProvider {
      constructor(network, apiKey) {
        logger30.checkAbstract(new.target, _UrlJsonRpcProvider);
        network = getStatic(new.target, "getNetwork")(network);
        apiKey = getStatic(new.target, "getApiKey")(apiKey);
        const connection = getStatic(new.target, "getUrl")(network, apiKey);
        super(connection, network);
        if (typeof apiKey === "string") {
          defineReadOnly(this, "apiKey", apiKey);
        } else if (apiKey != null) {
          Object.keys(apiKey).forEach((key2) => {
            defineReadOnly(this, key2, apiKey[key2]);
          });
        }
      }
      _startPending() {
        logger30.warn("WARNING: API provider does not support pending filters");
      }
      isCommunityResource() {
        return false;
      }
      getSigner(address) {
        return logger30.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
      }
      listAccounts() {
        return Promise.resolve([]);
      }
      // Return a defaultApiKey if null, otherwise validate the API key
      static getApiKey(apiKey) {
        return apiKey;
      }
      // Returns the url or connection for the given network and API key. The
      // API key will have been sanitized by the getApiKey first, so any validation
      // or transformations can be done there.
      static getUrl(network, apiKey) {
        return logger30.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
          operation: "getUrl"
        });
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js
var logger31, defaultApiKey, AlchemyWebSocketProvider, AlchemyProvider;
var init_alchemy_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js"() {
    "use strict";
    init_lib15();
    init_formatter();
    init_websocket_provider();
    init_lib12();
    init_version21();
    init_url_json_rpc_provider();
    logger31 = new Logger(version21);
    defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    AlchemyWebSocketProvider = class extends WebSocketProvider {
      constructor(network, apiKey) {
        const provider = new AlchemyProvider(network, apiKey);
        const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
        super(url, provider.network);
        defineReadOnly(this, "apiKey", provider.apiKey);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
    AlchemyProvider = class extends UrlJsonRpcProvider {
      static getWebSocketProvider(network, apiKey) {
        return new AlchemyWebSocketProvider(network, apiKey);
      }
      static getApiKey(apiKey) {
        if (apiKey == null) {
          return defaultApiKey;
        }
        if (apiKey && typeof apiKey !== "string") {
          logger31.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        }
        return apiKey;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network.name) {
          case "homestead":
            host = "eth-mainnet.alchemyapi.io/v2/";
            break;
          case "goerli":
            host = "eth-goerli.g.alchemy.com/v2/";
            break;
          case "matic":
            host = "polygon-mainnet.g.alchemy.com/v2/";
            break;
          case "maticmum":
            host = "polygon-mumbai.g.alchemy.com/v2/";
            break;
          case "arbitrum":
            host = "arb-mainnet.g.alchemy.com/v2/";
            break;
          case "arbitrum-goerli":
            host = "arb-goerli.g.alchemy.com/v2/";
            break;
          case "optimism":
            host = "opt-mainnet.g.alchemy.com/v2/";
            break;
          case "optimism-goerli":
            host = "opt-goerli.g.alchemy.com/v2/";
            break;
          default:
            logger31.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return {
          allowGzip: true,
          url: "https://" + host + apiKey,
          throttleCallback: (attempt, url) => {
            if (apiKey === defaultApiKey) {
              showThrottleMessage();
            }
            return Promise.resolve(true);
          }
        };
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ankr-provider.js
function getHost(name) {
  switch (name) {
    case "homestead":
      return "rpc.ankr.com/eth/";
    case "ropsten":
      return "rpc.ankr.com/eth_ropsten/";
    case "rinkeby":
      return "rpc.ankr.com/eth_rinkeby/";
    case "goerli":
      return "rpc.ankr.com/eth_goerli/";
    case "matic":
      return "rpc.ankr.com/polygon/";
    case "arbitrum":
      return "rpc.ankr.com/arbitrum/";
  }
  return logger32.throwArgumentError("unsupported network", "name", name);
}
var logger32, defaultApiKey2, AnkrProvider;
var init_ankr_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ankr-provider.js"() {
    init_formatter();
    init_url_json_rpc_provider();
    init_lib12();
    init_version21();
    logger32 = new Logger(version21);
    defaultApiKey2 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    AnkrProvider = class extends UrlJsonRpcProvider {
      isCommunityResource() {
        return this.apiKey === defaultApiKey2;
      }
      static getApiKey(apiKey) {
        if (apiKey == null) {
          return defaultApiKey2;
        }
        return apiKey;
      }
      static getUrl(network, apiKey) {
        if (apiKey == null) {
          apiKey = defaultApiKey2;
        }
        const connection = {
          allowGzip: true,
          url: "https://" + getHost(network.name) + apiKey,
          throttleCallback: (attempt, url) => {
            if (apiKey.apiKey === defaultApiKey2) {
              showThrottleMessage();
            }
            return Promise.resolve(true);
          }
        };
        if (apiKey.projectSecret != null) {
          connection.user = "";
          connection.password = apiKey.projectSecret;
        }
        return connection;
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js
var __awaiter13, logger33, CloudflareProvider;
var init_cloudflare_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js"() {
    "use strict";
    init_url_json_rpc_provider();
    init_lib12();
    init_version21();
    __awaiter13 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger33 = new Logger(version21);
    CloudflareProvider = class extends UrlJsonRpcProvider {
      static getApiKey(apiKey) {
        if (apiKey != null) {
          logger33.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
        }
        return null;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network.name) {
          case "homestead":
            host = "https://cloudflare-eth.com/";
            break;
          default:
            logger33.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host;
      }
      perform(method, params) {
        const _super = Object.create(null, {
          perform: { get: () => super.perform }
        });
        return __awaiter13(this, void 0, void 0, function* () {
          if (method === "getBlockNumber") {
            const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
            return block.number;
          }
          return _super.perform.call(this, method, params);
        });
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js
function getTransactionPostData(transaction) {
  const result = {};
  for (let key2 in transaction) {
    if (transaction[key2] == null) {
      continue;
    }
    let value = transaction[key2];
    if (key2 === "type" && value === 0) {
      continue;
    }
    if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key2]) {
      value = hexValue(hexlify(value));
    } else if (key2 === "accessList") {
      value = "[" + accessListify(value).map((set) => {
        return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
      }).join(",") + "]";
    } else {
      value = hexlify(value);
    }
    result[key2] = value;
  }
  return result;
}
function getResult2(result) {
  if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
    return result.result;
  }
  if (result.status != 1 || typeof result.message !== "string" || !result.message.match(/^OK/)) {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      error.throttleRetry = true;
    }
    throw error;
  }
  return result.result;
}
function getJsonResult(result) {
  if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
    const error = new Error("throttled response");
    error.result = JSON.stringify(result);
    error.throttleRetry = true;
    throw error;
  }
  if (result.jsonrpc != "2.0") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    throw error;
  }
  if (result.error) {
    const error = new Error(result.error.message || "unknown error");
    if (result.error.code) {
      error.code = result.error.code;
    }
    if (result.error.data) {
      error.data = result.error.data;
    }
    throw error;
  }
  return result.result;
}
function checkLogTag(blockTag) {
  if (blockTag === "pending") {
    throw new Error("pending not supported");
  }
  if (blockTag === "latest") {
    return blockTag;
  }
  return parseInt(blockTag.substring(2), 16);
}
function checkError2(method, error, transaction) {
  if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
    const e = error.error;
    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
      let data = e.data;
      if (data) {
        data = "0x" + data.replace(/^.*0x/i, "");
      }
      if (isHexString(data)) {
        return data;
      }
      logger34.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
        error,
        data: "0x"
      });
    }
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR) {
    if (error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
  }
  message = (message || "").toLowerCase();
  if (message.match(/insufficient funds/)) {
    logger34.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
    logger34.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/another transaction with same nonce/)) {
    logger34.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/execution failed due to an exception|execution reverted/)) {
    logger34.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
var __awaiter14, logger34, EtherscanProvider;
var init_etherscan_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js"() {
    "use strict";
    init_lib13();
    init_lib15();
    init_lib11();
    init_lib36();
    init_formatter();
    init_lib12();
    init_version21();
    init_base_provider();
    __awaiter14 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger34 = new Logger(version21);
    EtherscanProvider = class extends BaseProvider {
      constructor(network, apiKey) {
        super(network);
        defineReadOnly(this, "baseUrl", this.getBaseUrl());
        defineReadOnly(this, "apiKey", apiKey || null);
      }
      getBaseUrl() {
        switch (this.network ? this.network.name : "invalid") {
          case "homestead":
            return "https://api.etherscan.io";
          case "goerli":
            return "https://api-goerli.etherscan.io";
          case "sepolia":
            return "https://api-sepolia.etherscan.io";
          case "matic":
            return "https://api.polygonscan.com";
          case "maticmum":
            return "https://api-testnet.polygonscan.com";
          case "arbitrum":
            return "https://api.arbiscan.io";
          case "arbitrum-goerli":
            return "https://api-goerli.arbiscan.io";
          case "optimism":
            return "https://api-optimistic.etherscan.io";
          case "optimism-goerli":
            return "https://api-goerli-optimistic.etherscan.io";
          default:
        }
        return logger34.throwArgumentError("unsupported network", "network", this.network.name);
      }
      getUrl(module, params) {
        const query = Object.keys(params).reduce((accum, key2) => {
          const value = params[key2];
          if (value != null) {
            accum += `&${key2}=${value}`;
          }
          return accum;
        }, "");
        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
      }
      getPostUrl() {
        return `${this.baseUrl}/api`;
      }
      getPostData(module, params) {
        params.module = module;
        params.apikey = this.apiKey;
        return params;
      }
      fetch(module, params, post) {
        return __awaiter14(this, void 0, void 0, function* () {
          const url = post ? this.getPostUrl() : this.getUrl(module, params);
          const payload = post ? this.getPostData(module, params) : null;
          const procFunc = module === "proxy" ? getJsonResult : getResult2;
          this.emit("debug", {
            action: "request",
            request: url,
            provider: this
          });
          const connection = {
            url,
            throttleSlotInterval: 1e3,
            throttleCallback: (attempt, url2) => {
              if (this.isCommunityResource()) {
                showThrottleMessage();
              }
              return Promise.resolve(true);
            }
          };
          let payloadStr = null;
          if (payload) {
            connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
            payloadStr = Object.keys(payload).map((key2) => {
              return `${key2}=${payload[key2]}`;
            }).join("&");
          }
          const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
          this.emit("debug", {
            action: "response",
            request: url,
            response: deepCopy(result),
            provider: this
          });
          return result;
        });
      }
      detectNetwork() {
        return __awaiter14(this, void 0, void 0, function* () {
          return this.network;
        });
      }
      perform(method, params) {
        const _super = Object.create(null, {
          perform: { get: () => super.perform }
        });
        return __awaiter14(this, void 0, void 0, function* () {
          switch (method) {
            case "getBlockNumber":
              return this.fetch("proxy", { action: "eth_blockNumber" });
            case "getGasPrice":
              return this.fetch("proxy", { action: "eth_gasPrice" });
            case "getBalance":
              return this.fetch("account", {
                action: "balance",
                address: params.address,
                tag: params.blockTag
              });
            case "getTransactionCount":
              return this.fetch("proxy", {
                action: "eth_getTransactionCount",
                address: params.address,
                tag: params.blockTag
              });
            case "getCode":
              return this.fetch("proxy", {
                action: "eth_getCode",
                address: params.address,
                tag: params.blockTag
              });
            case "getStorageAt":
              return this.fetch("proxy", {
                action: "eth_getStorageAt",
                address: params.address,
                position: params.position,
                tag: params.blockTag
              });
            case "sendTransaction":
              return this.fetch("proxy", {
                action: "eth_sendRawTransaction",
                hex: params.signedTransaction
              }, true).catch((error) => {
                return checkError2("sendTransaction", error, params.signedTransaction);
              });
            case "getBlock":
              if (params.blockTag) {
                return this.fetch("proxy", {
                  action: "eth_getBlockByNumber",
                  tag: params.blockTag,
                  boolean: params.includeTransactions ? "true" : "false"
                });
              }
              throw new Error("getBlock by blockHash not implemented");
            case "getTransaction":
              return this.fetch("proxy", {
                action: "eth_getTransactionByHash",
                txhash: params.transactionHash
              });
            case "getTransactionReceipt":
              return this.fetch("proxy", {
                action: "eth_getTransactionReceipt",
                txhash: params.transactionHash
              });
            case "call": {
              if (params.blockTag !== "latest") {
                throw new Error("EtherscanProvider does not support blockTag for call");
              }
              const postData = getTransactionPostData(params.transaction);
              postData.module = "proxy";
              postData.action = "eth_call";
              try {
                return yield this.fetch("proxy", postData, true);
              } catch (error) {
                return checkError2("call", error, params.transaction);
              }
            }
            case "estimateGas": {
              const postData = getTransactionPostData(params.transaction);
              postData.module = "proxy";
              postData.action = "eth_estimateGas";
              try {
                return yield this.fetch("proxy", postData, true);
              } catch (error) {
                return checkError2("estimateGas", error, params.transaction);
              }
            }
            case "getLogs": {
              const args = { action: "getLogs" };
              if (params.filter.fromBlock) {
                args.fromBlock = checkLogTag(params.filter.fromBlock);
              }
              if (params.filter.toBlock) {
                args.toBlock = checkLogTag(params.filter.toBlock);
              }
              if (params.filter.address) {
                args.address = params.filter.address;
              }
              if (params.filter.topics && params.filter.topics.length > 0) {
                if (params.filter.topics.length > 1) {
                  logger34.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                }
                if (params.filter.topics.length === 1) {
                  const topic0 = params.filter.topics[0];
                  if (typeof topic0 !== "string" || topic0.length !== 66) {
                    logger34.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0 });
                  }
                  args.topic0 = topic0;
                }
              }
              const logs = yield this.fetch("logs", args);
              let blocks = {};
              for (let i = 0; i < logs.length; i++) {
                const log = logs[i];
                if (log.blockHash != null) {
                  continue;
                }
                if (blocks[log.blockNumber] == null) {
                  const block = yield this.getBlock(log.blockNumber);
                  if (block) {
                    blocks[log.blockNumber] = block.hash;
                  }
                }
                log.blockHash = blocks[log.blockNumber];
              }
              return logs;
            }
            case "getEtherPrice":
              if (this.network.name !== "homestead") {
                return 0;
              }
              return parseFloat((yield this.fetch("stats", { action: "ethprice" })).ethusd);
            default:
              break;
          }
          return _super.perform.call(this, method, params);
        });
      }
      // Note: The `page` page parameter only allows pagination within the
      //       10,000 window available without a page and offset parameter
      //       Error: Result window is too large, PageNo x Offset size must
      //              be less than or equal to 10000
      getHistory(addressOrName, startBlock, endBlock) {
        return __awaiter14(this, void 0, void 0, function* () {
          const params = {
            action: "txlist",
            address: yield this.resolveName(addressOrName),
            startblock: startBlock == null ? 0 : startBlock,
            endblock: endBlock == null ? 99999999 : endBlock,
            sort: "asc"
          };
          const result = yield this.fetch("account", params);
          return result.map((tx) => {
            ["contractAddress", "to"].forEach(function(key2) {
              if (tx[key2] == "") {
                delete tx[key2];
              }
            });
            if (tx.creates == null && tx.contractAddress != null) {
              tx.creates = tx.contractAddress;
            }
            const item = this.formatter.transactionResponse(tx);
            if (tx.timeStamp) {
              item.timestamp = parseInt(tx.timeStamp);
            }
            return item;
          });
        });
      }
      isCommunityResource() {
        return this.apiKey == null;
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/fallback-provider.js
function now() {
  return (/* @__PURE__ */ new Date()).getTime();
}
function checkNetworks(networks2) {
  let result = null;
  for (let i = 0; i < networks2.length; i++) {
    const network = networks2[i];
    if (network == null) {
      return null;
    }
    if (result) {
      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
        logger35.throwArgumentError("provider mismatch", "networks", networks2);
      }
    } else {
      result = network;
    }
  }
  return result;
}
function median(values, maxDelta) {
  values = values.slice().sort();
  const middle = Math.floor(values.length / 2);
  if (values.length % 2) {
    return values[middle];
  }
  const a = values[middle - 1], b = values[middle];
  if (maxDelta != null && Math.abs(a - b) > maxDelta) {
    return null;
  }
  return (a + b) / 2;
}
function serialize2(value) {
  if (value === null) {
    return "null";
  } else if (typeof value === "number" || typeof value === "boolean") {
    return JSON.stringify(value);
  } else if (typeof value === "string") {
    return value;
  } else if (BigNumber.isBigNumber(value)) {
    return value.toString();
  } else if (Array.isArray(value)) {
    return JSON.stringify(value.map((i) => serialize2(i)));
  } else if (typeof value === "object") {
    const keys = Object.keys(value);
    keys.sort();
    return "{" + keys.map((key2) => {
      let v = value[key2];
      if (typeof v === "function") {
        v = "[function]";
      } else {
        v = serialize2(v);
      }
      return JSON.stringify(key2) + ":" + v;
    }).join(",") + "}";
  }
  throw new Error("unknown value type: " + typeof value);
}
function stall2(duration) {
  let cancel = null;
  let timer2 = null;
  let promise = new Promise((resolve) => {
    cancel = function() {
      if (timer2) {
        clearTimeout(timer2);
        timer2 = null;
      }
      resolve();
    };
    timer2 = setTimeout(cancel, duration);
  });
  const wait = (func) => {
    promise = promise.then(func);
    return promise;
  };
  function getPromise() {
    return promise;
  }
  return { cancel, getPromise, wait };
}
function exposeDebugConfig(config, now2) {
  const result = {
    weight: config.weight
  };
  Object.defineProperty(result, "provider", { get: () => config.provider });
  if (config.start) {
    result.start = config.start;
  }
  if (now2) {
    result.duration = now2 - config.start;
  }
  if (config.done) {
    if (config.error) {
      result.error = config.error;
    } else {
      result.result = config.result || null;
    }
  }
  return result;
}
function normalizedTally(normalize, quorum) {
  return function(configs) {
    const tally = {};
    configs.forEach((c) => {
      const value = normalize(c.result);
      if (!tally[value]) {
        tally[value] = { count: 0, result: c.result };
      }
      tally[value].count++;
    });
    const keys = Object.keys(tally);
    for (let i = 0; i < keys.length; i++) {
      const check = tally[keys[i]];
      if (check.count >= quorum) {
        return check.result;
      }
    }
    return void 0;
  };
}
function getProcessFunc(provider, method, params) {
  let normalize = serialize2;
  switch (method) {
    case "getBlockNumber":
      return function(configs) {
        const values = configs.map((c) => c.result);
        let blockNumber = median(configs.map((c) => c.result), 2);
        if (blockNumber == null) {
          return void 0;
        }
        blockNumber = Math.ceil(blockNumber);
        if (values.indexOf(blockNumber + 1) >= 0) {
          blockNumber++;
        }
        if (blockNumber >= provider._highestBlockNumber) {
          provider._highestBlockNumber = blockNumber;
        }
        return provider._highestBlockNumber;
      };
    case "getGasPrice":
      return function(configs) {
        const values = configs.map((c) => c.result);
        values.sort();
        return values[Math.floor(values.length / 2)];
      };
    case "getEtherPrice":
      return function(configs) {
        return median(configs.map((c) => c.result));
      };
    // No additional normalizing required; serialize is enough
    case "getBalance":
    case "getTransactionCount":
    case "getCode":
    case "getStorageAt":
    case "call":
    case "estimateGas":
    case "getLogs":
      break;
    // We drop the confirmations from transactions as it is approximate
    case "getTransaction":
    case "getTransactionReceipt":
      normalize = function(tx) {
        if (tx == null) {
          return null;
        }
        tx = shallowCopy(tx);
        tx.confirmations = -1;
        return serialize2(tx);
      };
      break;
    // We drop the confirmations from transactions as it is approximate
    case "getBlock":
      if (params.includeTransactions) {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          block = shallowCopy(block);
          block.transactions = block.transactions.map((tx) => {
            tx = shallowCopy(tx);
            tx.confirmations = -1;
            return tx;
          });
          return serialize2(block);
        };
      } else {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          return serialize2(block);
        };
      }
      break;
    default:
      throw new Error("unknown method: " + method);
  }
  return normalizedTally(normalize, provider.quorum);
}
function waitForSync(config, blockNumber) {
  return __awaiter15(this, void 0, void 0, function* () {
    const provider = config.provider;
    if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
      return provider;
    }
    return poll(() => {
      return new Promise((resolve, reject) => {
        setTimeout(function() {
          if (provider.blockNumber >= blockNumber) {
            return resolve(provider);
          }
          if (config.cancelled) {
            return resolve(null);
          }
          return resolve(void 0);
        }, 0);
      });
    }, { oncePoll: provider });
  });
}
function getRunner(config, currentBlockNumber, method, params) {
  return __awaiter15(this, void 0, void 0, function* () {
    let provider = config.provider;
    switch (method) {
      case "getBlockNumber":
      case "getGasPrice":
        return provider[method]();
      case "getEtherPrice":
        if (provider.getEtherPrice) {
          return provider.getEtherPrice();
        }
        break;
      case "getBalance":
      case "getTransactionCount":
      case "getCode":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[method](params.address, params.blockTag || "latest");
      case "getStorageAt":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
      case "getBlock":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
      case "call":
      case "estimateGas":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        if (method === "call" && params.blockTag) {
          return provider[method](params.transaction, params.blockTag);
        }
        return provider[method](params.transaction);
      case "getTransaction":
      case "getTransactionReceipt":
        return provider[method](params.transactionHash);
      case "getLogs": {
        let filter = params.filter;
        if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getLogs(filter);
      }
    }
    return logger35.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
      method,
      params
    });
  });
}
var __awaiter15, logger35, nextRid, ForwardErrors, ForwardProperties, FallbackProvider;
var init_fallback_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/fallback-provider.js"() {
    "use strict";
    init_lib22();
    init_lib14();
    init_lib13();
    init_lib15();
    init_lib31();
    init_lib36();
    init_base_provider();
    init_formatter();
    init_lib12();
    init_version21();
    __awaiter15 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger35 = new Logger(version21);
    nextRid = 1;
    ForwardErrors = [
      Logger.errors.CALL_EXCEPTION,
      Logger.errors.INSUFFICIENT_FUNDS,
      Logger.errors.NONCE_EXPIRED,
      Logger.errors.REPLACEMENT_UNDERPRICED,
      Logger.errors.UNPREDICTABLE_GAS_LIMIT
    ];
    ForwardProperties = [
      "address",
      "args",
      "errorArgs",
      "errorSignature",
      "method",
      "transaction"
    ];
    FallbackProvider = class extends BaseProvider {
      constructor(providers, quorum) {
        if (providers.length === 0) {
          logger35.throwArgumentError("missing providers", "providers", providers);
        }
        const providerConfigs = providers.map((configOrProvider, index) => {
          if (Provider.isProvider(configOrProvider)) {
            const stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
            const priority = 1;
            return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
          }
          const config = shallowCopy(configOrProvider);
          if (config.priority == null) {
            config.priority = 1;
          }
          if (config.stallTimeout == null) {
            config.stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
          }
          if (config.weight == null) {
            config.weight = 1;
          }
          const weight = config.weight;
          if (weight % 1 || weight > 512 || weight < 1) {
            logger35.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
          }
          return Object.freeze(config);
        });
        const total = providerConfigs.reduce((accum, c) => accum + c.weight, 0);
        if (quorum == null) {
          quorum = total / 2;
        } else if (quorum > total) {
          logger35.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
        }
        let networkOrReady = checkNetworks(providerConfigs.map((c) => c.provider.network));
        if (networkOrReady == null) {
          networkOrReady = new Promise((resolve, reject) => {
            setTimeout(() => {
              this.detectNetwork().then(resolve, reject);
            }, 0);
          });
        }
        super(networkOrReady);
        defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
        defineReadOnly(this, "quorum", quorum);
        this._highestBlockNumber = -1;
      }
      detectNetwork() {
        return __awaiter15(this, void 0, void 0, function* () {
          const networks2 = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));
          return checkNetworks(networks2);
        });
      }
      perform(method, params) {
        return __awaiter15(this, void 0, void 0, function* () {
          if (method === "sendTransaction") {
            const results = yield Promise.all(this.providerConfigs.map((c) => {
              return c.provider.sendTransaction(params.signedTransaction).then((result) => {
                return result.hash;
              }, (error) => {
                return error;
              });
            }));
            for (let i2 = 0; i2 < results.length; i2++) {
              const result = results[i2];
              if (typeof result === "string") {
                return result;
              }
            }
            throw results[0];
          }
          if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
            yield this.getBlockNumber();
          }
          const processFunc = getProcessFunc(this, method, params);
          const configs = shuffled(this.providerConfigs.map(shallowCopy));
          configs.sort((a, b) => a.priority - b.priority);
          const currentBlockNumber = this._highestBlockNumber;
          let i = 0;
          let first = true;
          while (true) {
            const t0 = now();
            let inflightWeight = configs.filter((c) => c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c) => accum + c.weight, 0);
            while (inflightWeight < this.quorum && i < configs.length) {
              const config = configs[i++];
              const rid = nextRid++;
              config.start = now();
              config.staller = stall2(config.stallTimeout);
              config.staller.wait(() => {
                config.staller = null;
              });
              config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
                config.done = true;
                config.result = result;
                if (this.listenerCount("debug")) {
                  this.emit("debug", {
                    action: "request",
                    rid,
                    backend: exposeDebugConfig(config, now()),
                    request: { method, params: deepCopy(params) },
                    provider: this
                  });
                }
              }, (error) => {
                config.done = true;
                config.error = error;
                if (this.listenerCount("debug")) {
                  this.emit("debug", {
                    action: "request",
                    rid,
                    backend: exposeDebugConfig(config, now()),
                    request: { method, params: deepCopy(params) },
                    provider: this
                  });
                }
              });
              if (this.listenerCount("debug")) {
                this.emit("debug", {
                  action: "request",
                  rid,
                  backend: exposeDebugConfig(config, null),
                  request: { method, params: deepCopy(params) },
                  provider: this
                });
              }
              inflightWeight += config.weight;
            }
            const waiting = [];
            configs.forEach((c) => {
              if (c.done || !c.runner) {
                return;
              }
              waiting.push(c.runner);
              if (c.staller) {
                waiting.push(c.staller.getPromise());
              }
            });
            if (waiting.length) {
              yield Promise.race(waiting);
            }
            const results = configs.filter((c) => c.done && c.error == null);
            if (results.length >= this.quorum) {
              const result = processFunc(results);
              if (result !== void 0) {
                configs.forEach((c) => {
                  if (c.staller) {
                    c.staller.cancel();
                  }
                  c.cancelled = true;
                });
                return result;
              }
              if (!first) {
                yield stall2(100).getPromise();
              }
              first = false;
            }
            const errors = configs.reduce((accum, c) => {
              if (!c.done || c.error == null) {
                return accum;
              }
              const code = c.error.code;
              if (ForwardErrors.indexOf(code) >= 0) {
                if (!accum[code]) {
                  accum[code] = { error: c.error, weight: 0 };
                }
                accum[code].weight += c.weight;
              }
              return accum;
            }, {});
            Object.keys(errors).forEach((errorCode) => {
              const tally = errors[errorCode];
              if (tally.weight < this.quorum) {
                return;
              }
              configs.forEach((c) => {
                if (c.staller) {
                  c.staller.cancel();
                }
                c.cancelled = true;
              });
              const e = tally.error;
              const props = {};
              ForwardProperties.forEach((name) => {
                if (e[name] == null) {
                  return;
                }
                props[name] = e[name];
              });
              logger35.throwError(e.reason || e.message, errorCode, props);
            });
            if (configs.filter((c) => !c.done).length === 0) {
              break;
            }
          }
          configs.forEach((c) => {
            if (c.staller) {
              c.staller.cancel();
            }
            c.cancelled = true;
          });
          return logger35.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
            method,
            params,
            //results: configs.map((c) => c.result),
            //errors: configs.map((c) => c.error),
            results: configs.map((c) => exposeDebugConfig(c)),
            provider: this
          });
        });
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ipc-provider.js
var IpcProvider;
var init_ipc_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/ipc-provider.js"() {
    "use strict";
    IpcProvider = null;
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/infura-provider.js
var logger36, defaultProjectId, InfuraWebSocketProvider, InfuraProvider;
var init_infura_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/infura-provider.js"() {
    "use strict";
    init_lib15();
    init_websocket_provider();
    init_formatter();
    init_lib12();
    init_version21();
    init_url_json_rpc_provider();
    logger36 = new Logger(version21);
    defaultProjectId = "84842078b09946638c03157f83405213";
    InfuraWebSocketProvider = class extends WebSocketProvider {
      constructor(network, apiKey) {
        const provider = new InfuraProvider(network, apiKey);
        const connection = provider.connection;
        if (connection.password) {
          logger36.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "InfuraProvider.getWebSocketProvider()"
          });
        }
        const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
        super(url, network);
        defineReadOnly(this, "apiKey", provider.projectId);
        defineReadOnly(this, "projectId", provider.projectId);
        defineReadOnly(this, "projectSecret", provider.projectSecret);
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
    InfuraProvider = class extends UrlJsonRpcProvider {
      static getWebSocketProvider(network, apiKey) {
        return new InfuraWebSocketProvider(network, apiKey);
      }
      static getApiKey(apiKey) {
        const apiKeyObj = {
          apiKey: defaultProjectId,
          projectId: defaultProjectId,
          projectSecret: null
        };
        if (apiKey == null) {
          return apiKeyObj;
        }
        if (typeof apiKey === "string") {
          apiKeyObj.projectId = apiKey;
        } else if (apiKey.projectSecret != null) {
          logger36.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
          logger36.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
          apiKeyObj.projectId = apiKey.projectId;
          apiKeyObj.projectSecret = apiKey.projectSecret;
        } else if (apiKey.projectId) {
          apiKeyObj.projectId = apiKey.projectId;
        }
        apiKeyObj.apiKey = apiKeyObj.projectId;
        return apiKeyObj;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network ? network.name : "unknown") {
          case "homestead":
            host = "mainnet.infura.io";
            break;
          case "goerli":
            host = "goerli.infura.io";
            break;
          case "sepolia":
            host = "sepolia.infura.io";
            break;
          case "matic":
            host = "polygon-mainnet.infura.io";
            break;
          case "maticmum":
            host = "polygon-mumbai.infura.io";
            break;
          case "optimism":
            host = "optimism-mainnet.infura.io";
            break;
          case "optimism-goerli":
            host = "optimism-goerli.infura.io";
            break;
          case "arbitrum":
            host = "arbitrum-mainnet.infura.io";
            break;
          case "arbitrum-goerli":
            host = "arbitrum-goerli.infura.io";
            break;
          default:
            logger36.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
              argument: "network",
              value: network
            });
        }
        const connection = {
          allowGzip: true,
          url: "https://" + host + "/v3/" + apiKey.projectId,
          throttleCallback: (attempt, url) => {
            if (apiKey.projectId === defaultProjectId) {
              showThrottleMessage();
            }
            return Promise.resolve(true);
          }
        };
        if (apiKey.projectSecret != null) {
          connection.user = "";
          connection.password = apiKey.projectSecret;
        }
        return connection;
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js
var JsonRpcBatchProvider;
var init_json_rpc_batch_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js"() {
    init_lib15();
    init_lib36();
    init_json_rpc_provider();
    JsonRpcBatchProvider = class extends JsonRpcProvider {
      send(method, params) {
        const request = {
          method,
          params,
          id: this._nextId++,
          jsonrpc: "2.0"
        };
        if (this._pendingBatch == null) {
          this._pendingBatch = [];
        }
        const inflightRequest = { request, resolve: null, reject: null };
        const promise = new Promise((resolve, reject) => {
          inflightRequest.resolve = resolve;
          inflightRequest.reject = reject;
        });
        this._pendingBatch.push(inflightRequest);
        if (!this._pendingBatchAggregator) {
          this._pendingBatchAggregator = setTimeout(() => {
            const batch = this._pendingBatch;
            this._pendingBatch = null;
            this._pendingBatchAggregator = null;
            const request2 = batch.map((inflight) => inflight.request);
            this.emit("debug", {
              action: "requestBatch",
              request: deepCopy(request2),
              provider: this
            });
            return fetchJson(this.connection, JSON.stringify(request2)).then((result) => {
              this.emit("debug", {
                action: "response",
                request: request2,
                response: result,
                provider: this
              });
              batch.forEach((inflightRequest2, index) => {
                const payload = result[index];
                if (payload.error) {
                  const error = new Error(payload.error.message);
                  error.code = payload.error.code;
                  error.data = payload.error.data;
                  inflightRequest2.reject(error);
                } else {
                  inflightRequest2.resolve(payload.result);
                }
              });
            }, (error) => {
              this.emit("debug", {
                action: "response",
                error,
                request: request2,
                provider: this
              });
              batch.forEach((inflightRequest2) => {
                inflightRequest2.reject(error);
              });
            });
          }, 10);
        }
        return promise;
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js
var logger37, defaultApiKey3, NodesmithProvider;
var init_nodesmith_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js"() {
    "use strict";
    init_url_json_rpc_provider();
    init_lib12();
    init_version21();
    logger37 = new Logger(version21);
    defaultApiKey3 = "ETHERS_JS_SHARED";
    NodesmithProvider = class extends UrlJsonRpcProvider {
      static getApiKey(apiKey) {
        if (apiKey && typeof apiKey !== "string") {
          logger37.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        }
        return apiKey || defaultApiKey3;
      }
      static getUrl(network, apiKey) {
        logger37.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
        let host = null;
        switch (network.name) {
          case "homestead":
            host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
            break;
          case "ropsten":
            host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
            break;
          case "rinkeby":
            host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
            break;
          case "goerli":
            host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
            break;
          case "kovan":
            host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
            break;
          default:
            logger37.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host + "?apiKey=" + apiKey;
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/pocket-provider.js
var logger38, defaultApplicationId, PocketProvider;
var init_pocket_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/pocket-provider.js"() {
    "use strict";
    init_lib12();
    init_version21();
    init_url_json_rpc_provider();
    logger38 = new Logger(version21);
    defaultApplicationId = "62e1ad51b37b8e00394bda3b";
    PocketProvider = class extends UrlJsonRpcProvider {
      static getApiKey(apiKey) {
        const apiKeyObj = {
          applicationId: null,
          loadBalancer: true,
          applicationSecretKey: null
        };
        if (apiKey == null) {
          apiKeyObj.applicationId = defaultApplicationId;
        } else if (typeof apiKey === "string") {
          apiKeyObj.applicationId = apiKey;
        } else if (apiKey.applicationSecretKey != null) {
          apiKeyObj.applicationId = apiKey.applicationId;
          apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
        } else if (apiKey.applicationId) {
          apiKeyObj.applicationId = apiKey.applicationId;
        } else {
          logger38.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
        }
        return apiKeyObj;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network ? network.name : "unknown") {
          case "goerli":
            host = "eth-goerli.gateway.pokt.network";
            break;
          case "homestead":
            host = "eth-mainnet.gateway.pokt.network";
            break;
          case "kovan":
            host = "poa-kovan.gateway.pokt.network";
            break;
          case "matic":
            host = "poly-mainnet.gateway.pokt.network";
            break;
          case "maticmum":
            host = "polygon-mumbai-rpc.gateway.pokt.network";
            break;
          case "rinkeby":
            host = "eth-rinkeby.gateway.pokt.network";
            break;
          case "ropsten":
            host = "eth-ropsten.gateway.pokt.network";
            break;
          default:
            logger38.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
              argument: "network",
              value: network
            });
        }
        const url = `https://${host}/v1/lb/${apiKey.applicationId}`;
        const connection = { headers: {}, url };
        if (apiKey.applicationSecretKey != null) {
          connection.user = "";
          connection.password = apiKey.applicationSecretKey;
        }
        return connection;
      }
      isCommunityResource() {
        return this.applicationId === defaultApplicationId;
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/web3-provider.js
function buildWeb3LegacyFetcher(provider, sendFunc) {
  const fetcher = "Web3LegacyFetcher";
  return function(method, params) {
    const request = {
      method,
      params,
      id: _nextId++,
      jsonrpc: "2.0"
    };
    return new Promise((resolve, reject) => {
      this.emit("debug", {
        action: "request",
        fetcher,
        request: deepCopy(request),
        provider: this
      });
      sendFunc(request, (error, response) => {
        if (error) {
          this.emit("debug", {
            action: "response",
            fetcher,
            error,
            request,
            provider: this
          });
          return reject(error);
        }
        this.emit("debug", {
          action: "response",
          fetcher,
          request,
          response,
          provider: this
        });
        if (response.error) {
          const error2 = new Error(response.error.message);
          error2.code = response.error.code;
          error2.data = response.error.data;
          return reject(error2);
        }
        resolve(response.result);
      });
    });
  };
}
function buildEip1193Fetcher(provider) {
  return function(method, params) {
    if (params == null) {
      params = [];
    }
    const request = { method, params };
    this.emit("debug", {
      action: "request",
      fetcher: "Eip1193Fetcher",
      request: deepCopy(request),
      provider: this
    });
    return provider.request(request).then((response) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        response,
        provider: this
      });
      return response;
    }, (error) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        error,
        provider: this
      });
      throw error;
    });
  };
}
var logger39, _nextId, Web3Provider;
var init_web3_provider = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/web3-provider.js"() {
    "use strict";
    init_lib15();
    init_lib12();
    init_version21();
    init_json_rpc_provider();
    logger39 = new Logger(version21);
    _nextId = 1;
    Web3Provider = class extends JsonRpcProvider {
      constructor(provider, network) {
        if (provider == null) {
          logger39.throwArgumentError("missing provider", "provider", provider);
        }
        let path = null;
        let jsonRpcFetchFunc = null;
        let subprovider = null;
        if (typeof provider === "function") {
          path = "unknown:";
          jsonRpcFetchFunc = provider;
        } else {
          path = provider.host || provider.path || "";
          if (!path && provider.isMetaMask) {
            path = "metamask";
          }
          subprovider = provider;
          if (provider.request) {
            if (path === "") {
              path = "eip-1193:";
            }
            jsonRpcFetchFunc = buildEip1193Fetcher(provider);
          } else if (provider.sendAsync) {
            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
          } else if (provider.send) {
            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
          } else {
            logger39.throwArgumentError("unsupported provider", "provider", provider);
          }
          if (!path) {
            path = "unknown:";
          }
        }
        super(path, network);
        defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
        defineReadOnly(this, "provider", subprovider);
      }
      send(method, params) {
        return this.jsonRpcFetchFunc(method, params);
      }
    };
  }
});

// node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/index.js
var lib_exports13 = {};
__export(lib_exports13, {
  AlchemyProvider: () => AlchemyProvider,
  AlchemyWebSocketProvider: () => AlchemyWebSocketProvider,
  AnkrProvider: () => AnkrProvider,
  BaseProvider: () => BaseProvider,
  CloudflareProvider: () => CloudflareProvider,
  EtherscanProvider: () => EtherscanProvider,
  FallbackProvider: () => FallbackProvider,
  Formatter: () => Formatter,
  InfuraProvider: () => InfuraProvider,
  InfuraWebSocketProvider: () => InfuraWebSocketProvider,
  IpcProvider: () => IpcProvider,
  JsonRpcBatchProvider: () => JsonRpcBatchProvider,
  JsonRpcProvider: () => JsonRpcProvider,
  JsonRpcSigner: () => JsonRpcSigner,
  NodesmithProvider: () => NodesmithProvider,
  PocketProvider: () => PocketProvider,
  Provider: () => Provider,
  Resolver: () => Resolver,
  StaticJsonRpcProvider: () => StaticJsonRpcProvider,
  UrlJsonRpcProvider: () => UrlJsonRpcProvider,
  Web3Provider: () => Web3Provider,
  WebSocketProvider: () => WebSocketProvider,
  getDefaultProvider: () => getDefaultProvider,
  getNetwork: () => getNetwork,
  isCommunityResourcable: () => isCommunityResourcable,
  isCommunityResource: () => isCommunityResource,
  showThrottleMessage: () => showThrottleMessage
});
function getDefaultProvider(network, options) {
  if (network == null) {
    network = "homestead";
  }
  if (typeof network === "string") {
    const match = network.match(/^(ws|http)s?:/i);
    if (match) {
      switch (match[1].toLowerCase()) {
        case "http":
        case "https":
          return new JsonRpcProvider(network);
        case "ws":
        case "wss":
          return new WebSocketProvider(network);
        default:
          logger40.throwArgumentError("unsupported URL scheme", "network", network);
      }
    }
  }
  const n = getNetwork(network);
  if (!n || !n._defaultProvider) {
    logger40.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
      operation: "getDefaultProvider",
      network
    });
  }
  return n._defaultProvider({
    FallbackProvider,
    AlchemyProvider,
    AnkrProvider,
    CloudflareProvider,
    EtherscanProvider,
    InfuraProvider,
    JsonRpcProvider,
    NodesmithProvider,
    PocketProvider,
    Web3Provider,
    IpcProvider
  }, options);
}
var logger40;
var init_lib37 = __esm({
  "node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/index.js"() {
    "use strict";
    init_lib22();
    init_lib34();
    init_base_provider();
    init_alchemy_provider();
    init_ankr_provider();
    init_cloudflare_provider();
    init_etherscan_provider();
    init_fallback_provider();
    init_ipc_provider();
    init_infura_provider();
    init_json_rpc_provider();
    init_json_rpc_batch_provider();
    init_nodesmith_provider();
    init_pocket_provider();
    init_url_json_rpc_provider();
    init_web3_provider();
    init_websocket_provider();
    init_formatter();
    init_lib12();
    init_version21();
    logger40 = new Logger(version21);
  }
});

// node_modules/.pnpm/@ethersproject+solidity@5.7.0/node_modules/@ethersproject/solidity/lib.esm/_version.js
var version22;
var init_version22 = __esm({
  "node_modules/.pnpm/@ethersproject+solidity@5.7.0/node_modules/@ethersproject/solidity/lib.esm/_version.js"() {
    version22 = "solidity/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+solidity@5.7.0/node_modules/@ethersproject/solidity/lib.esm/index.js
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return arrayify(value);
    case "bool":
      value = value ? "0x01" : "0x00";
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
  }
  let match = type.match(regexNumber);
  if (match) {
    let size = parseInt(match[2] || "256");
    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
      logger41.throwArgumentError("invalid number type", "type", type);
    }
    if (isArray) {
      size = 256;
    }
    value = BigNumber.from(value).toTwos(size);
    return zeroPad(value, size / 8);
  }
  match = type.match(regexBytes);
  if (match) {
    const size = parseInt(match[1]);
    if (String(size) !== match[1] || size === 0 || size > 32) {
      logger41.throwArgumentError("invalid bytes type", "type", type);
    }
    if (arrayify(value).byteLength !== size) {
      logger41.throwArgumentError(`invalid value for ${type}`, "value", value);
    }
    if (isArray) {
      return arrayify((value + Zeros).substring(0, 66));
    }
    return value;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value.length));
    if (count != value.length) {
      logger41.throwArgumentError(`invalid array length for ${type}`, "value", value);
    }
    const result = [];
    value.forEach(function(value2) {
      result.push(_pack(baseType, value2, true));
    });
    return concat(result);
  }
  return logger41.throwArgumentError("invalid type", "type", type);
}
function pack2(types, values) {
  if (types.length != values.length) {
    logger41.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
  }
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function keccak2562(types, values) {
  return keccak256(pack2(types, values));
}
function sha2562(types, values) {
  return sha256(pack2(types, values));
}
var regexBytes, regexNumber, regexArray, Zeros, logger41;
var init_lib38 = __esm({
  "node_modules/.pnpm/@ethersproject+solidity@5.7.0/node_modules/@ethersproject/solidity/lib.esm/index.js"() {
    "use strict";
    init_lib14();
    init_lib13();
    init_lib16();
    init_lib26();
    init_lib20();
    init_lib12();
    init_version22();
    regexBytes = new RegExp("^bytes([0-9]+)$");
    regexNumber = new RegExp("^(u?int)([0-9]*)$");
    regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
    logger41 = new Logger(version22);
  }
});

// node_modules/.pnpm/@ethersproject+units@5.7.0/node_modules/@ethersproject/units/lib.esm/_version.js
var version23;
var init_version23 = __esm({
  "node_modules/.pnpm/@ethersproject+units@5.7.0/node_modules/@ethersproject/units/lib.esm/_version.js"() {
    version23 = "units/5.7.0";
  }
});

// node_modules/.pnpm/@ethersproject+units@5.7.0/node_modules/@ethersproject/units/lib.esm/index.js
function commify(value) {
  const comps = String(value).split(".");
  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
    logger42.throwArgumentError("invalid value", "value", value);
  }
  let whole = comps[0];
  let negative = "";
  if (whole.substring(0, 1) === "-") {
    negative = "-";
    whole = whole.substring(1);
  }
  while (whole.substring(0, 1) === "0") {
    whole = whole.substring(1);
  }
  if (whole === "") {
    whole = "0";
  }
  let suffix = "";
  if (comps.length === 2) {
    suffix = "." + (comps[1] || "0");
  }
  while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
    suffix = suffix.substring(0, suffix.length - 1);
  }
  const formatted = [];
  while (whole.length) {
    if (whole.length <= 3) {
      formatted.unshift(whole);
      break;
    } else {
      const index = whole.length - 3;
      formatted.unshift(whole.substring(index));
      whole = whole.substring(0, index);
    }
  }
  return negative + formatted.join(",") + suffix;
}
function formatUnits(value, unitName) {
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return formatFixed(value, unitName != null ? unitName : 18);
}
function parseUnits(value, unitName) {
  if (typeof value !== "string") {
    logger42.throwArgumentError("value must be a string", "value", value);
  }
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return parseFixed(value, unitName != null ? unitName : 18);
}
function formatEther(wei) {
  return formatUnits(wei, 18);
}
function parseEther(ether) {
  return parseUnits(ether, 18);
}
var logger42, names;
var init_lib39 = __esm({
  "node_modules/.pnpm/@ethersproject+units@5.7.0/node_modules/@ethersproject/units/lib.esm/index.js"() {
    "use strict";
    init_lib14();
    init_lib12();
    init_version23();
    logger42 = new Logger(version23);
    names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
    ];
  }
});

// node_modules/.pnpm/ethers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils.js
var utils_exports = {};
__export(utils_exports, {
  AbiCoder: () => AbiCoder,
  ConstructorFragment: () => ConstructorFragment,
  ErrorFragment: () => ErrorFragment,
  EventFragment: () => EventFragment,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  HDNode: () => HDNode,
  Indexed: () => Indexed,
  Interface: () => Interface,
  LogDescription: () => LogDescription,
  Logger: () => Logger,
  ParamType: () => ParamType,
  RLP: () => lib_exports10,
  SigningKey: () => SigningKey,
  SupportedAlgorithm: () => SupportedAlgorithm,
  TransactionDescription: () => TransactionDescription,
  TransactionTypes: () => TransactionTypes,
  UnicodeNormalizationForm: () => UnicodeNormalizationForm,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  Utf8ErrorReason: () => Utf8ErrorReason,
  _TypedDataEncoder: () => TypedDataEncoder,
  _fetchData: () => _fetchData,
  _toEscapedUtf8String: () => _toEscapedUtf8String,
  accessListify: () => accessListify,
  arrayify: () => arrayify,
  base58: () => Base58,
  base64: () => lib_exports12,
  checkProperties: () => checkProperties,
  checkResultErrors: () => checkResultErrors,
  commify: () => commify,
  computeAddress: () => computeAddress,
  computeHmac: () => computeHmac,
  computePublicKey: () => computePublicKey,
  concat: () => concat,
  deepCopy: () => deepCopy,
  defaultAbiCoder: () => defaultAbiCoder,
  defaultPath: () => defaultPath,
  defineReadOnly: () => defineReadOnly,
  dnsEncode: () => dnsEncode,
  entropyToMnemonic: () => entropyToMnemonic,
  fetchJson: () => fetchJson,
  formatBytes32String: () => formatBytes32String,
  formatEther: () => formatEther,
  formatUnits: () => formatUnits,
  getAccountPath: () => getAccountPath,
  getAddress: () => getAddress,
  getContractAddress: () => getContractAddress,
  getCreate2Address: () => getCreate2Address,
  getIcapAddress: () => getIcapAddress,
  getJsonWalletAddress: () => getJsonWalletAddress,
  getStatic: () => getStatic,
  hashMessage: () => hashMessage,
  hexConcat: () => hexConcat,
  hexDataLength: () => hexDataLength,
  hexDataSlice: () => hexDataSlice,
  hexStripZeros: () => hexStripZeros,
  hexValue: () => hexValue,
  hexZeroPad: () => hexZeroPad,
  hexlify: () => hexlify,
  id: () => id,
  isAddress: () => isAddress,
  isBytes: () => isBytes,
  isBytesLike: () => isBytesLike,
  isHexString: () => isHexString,
  isValidMnemonic: () => isValidMnemonic,
  isValidName: () => isValidName,
  joinSignature: () => joinSignature,
  keccak256: () => keccak256,
  mnemonicToEntropy: () => mnemonicToEntropy,
  mnemonicToSeed: () => mnemonicToSeed,
  namehash: () => namehash,
  nameprep: () => nameprep,
  parseBytes32String: () => parseBytes32String,
  parseEther: () => parseEther,
  parseTransaction: () => parse,
  parseUnits: () => parseUnits,
  poll: () => poll,
  randomBytes: () => randomBytes,
  recoverAddress: () => recoverAddress,
  recoverPublicKey: () => recoverPublicKey,
  resolveProperties: () => resolveProperties,
  ripemd160: () => ripemd160,
  serializeTransaction: () => serialize,
  sha256: () => sha256,
  sha512: () => sha512,
  shallowCopy: () => shallowCopy,
  shuffled: () => shuffled,
  solidityKeccak256: () => keccak2562,
  solidityPack: () => pack2,
  soliditySha256: () => sha2562,
  splitSignature: () => splitSignature,
  stripZeros: () => stripZeros,
  toUtf8Bytes: () => toUtf8Bytes,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8String: () => toUtf8String,
  verifyMessage: () => verifyMessage,
  verifyTypedData: () => verifyTypedData,
  zeroPad: () => zeroPad
});
var init_utils2 = __esm({
  "node_modules/.pnpm/ethers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils.js"() {
    "use strict";
    init_lib21();
    init_lib18();
    init_lib35();
    init_lib25();
    init_lib13();
    init_lib10();
    init_lib30();
    init_lib32();
    init_lib16();
    init_lib12();
    init_lib26();
    init_lib38();
    init_lib31();
    init_lib15();
    init_lib17();
    init_lib28();
    init_lib20();
    init_lib11();
    init_lib39();
    init_lib33();
    init_lib36();
    init_lib26();
    init_lib20();
  }
});

// node_modules/.pnpm/ethers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/_version.js
var version24;
var init_version24 = __esm({
  "node_modules/.pnpm/ethers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/_version.js"() {
    version24 = "ethers/5.7.2";
  }
});

// node_modules/.pnpm/ethers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/ethers.js
var ethers_exports2 = {};
__export(ethers_exports2, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports11,
  errors: () => ErrorCode,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger43,
  providers: () => lib_exports13,
  utils: () => utils_exports,
  version: () => version24,
  wordlists: () => wordlists
});
var logger43;
var init_ethers = __esm({
  "node_modules/.pnpm/ethers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/ethers.js"() {
    "use strict";
    init_lib24();
    init_lib14();
    init_lib23();
    init_lib33();
    init_lib19();
    init_lib37();
    init_lib37();
    init_lib29();
    init_utils2();
    init_lib12();
    init_version24();
    logger43 = new Logger(version24);
  }
});

// node_modules/.pnpm/ethers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/index.js
var lib_exports14 = {};
__export(lib_exports14, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports11,
  errors: () => ErrorCode,
  ethers: () => ethers_exports2,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger43,
  providers: () => lib_exports13,
  utils: () => utils_exports,
  version: () => version24,
  wordlists: () => wordlists
});
var init_lib40 = __esm({
  "node_modules/.pnpm/ethers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/index.js"() {
    "use strict";
    init_ethers();
    init_ethers();
    try {
      const anyGlobal2 = window;
      if (anyGlobal2._ethers == null) {
        anyGlobal2._ethers = ethers_exports2;
      }
    } catch (error) {
    }
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.0.0/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.0.0/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        constant: false,
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "DOMAIN_SEPARATOR_TYPEHASH",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "",
            type: "address"
          },
          {
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_masterCopy",
            type: "address"
          }
        ],
        name: "changeMasterCopy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SENTINEL_MODULES",
        outputs: [
          {
            name: "",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SENTINEL_OWNERS",
        outputs: [
          {
            name: "",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "NAME",
        outputs: [
          {
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getModules",
        outputs: [
          {
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SAFE_MSG_TYPEHASH",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SAFE_TX_TYPEHASH",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "prevModule",
            type: "address"
          },
          {
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "prevOwner",
            type: "address"
          },
          {
            name: "oldOwner",
            type: "address"
          },
          {
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "prevOwner",
            type: "address"
          },
          {
            name: "owner",
            type: "address"
          },
          {
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        payable: true,
        stateMutability: "payable",
        type: "fallback"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "txHash",
            type: "bytes32"
          }
        ],
        name: "ExecutionFailed",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "newContract",
            type: "address"
          }
        ],
        name: "ContractCreation",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_owners",
            type: "address[]"
          },
          {
            name: "_threshold",
            type: "uint256"
          },
          {
            name: "to",
            type: "address"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "paymentToken",
            type: "address"
          },
          {
            name: "payment",
            type: "uint256"
          },
          {
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          },
          {
            name: "safeTxGas",
            type: "uint256"
          },
          {
            name: "baseGas",
            type: "uint256"
          },
          {
            name: "gasPrice",
            type: "uint256"
          },
          {
            name: "gasToken",
            type: "address"
          },
          {
            name: "refundReceiver",
            type: "address"
          },
          {
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_data",
            type: "bytes"
          },
          {
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            name: "",
            type: "bytes4"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          },
          {
            name: "safeTxGas",
            type: "uint256"
          },
          {
            name: "baseGas",
            type: "uint256"
          },
          {
            name: "gasPrice",
            type: "uint256"
          },
          {
            name: "gasToken",
            type: "address"
          },
          {
            name: "refundReceiver",
            type: "address"
          },
          {
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          },
          {
            name: "safeTxGas",
            type: "uint256"
          },
          {
            name: "baseGas",
            type: "uint256"
          },
          {
            name: "gasPrice",
            type: "uint256"
          },
          {
            name: "gasToken",
            type: "address"
          },
          {
            name: "refundReceiver",
            type: "address"
          },
          {
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.0.0/factories/Proxy_factory__factory.js
var require_Proxy_factory_factory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.0.0/factories/Proxy_factory__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy_factory__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        constant: false,
        inputs: [
          {
            name: "_mastercopy",
            type: "address"
          },
          {
            name: "initializer",
            type: "bytes"
          },
          {
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "masterCopy",
            type: "address"
          },
          {
            name: "data",
            type: "bytes"
          }
        ],
        name: "createProxy",
        outputs: [
          {
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyRuntimeCode",
        outputs: [
          {
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "proxy",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      }
    ];
    var Proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Proxy_factory__factory = Proxy_factory__factory;
    Proxy_factory__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "masterCopy",
            type: "address"
          }
        ],
        name: "ChangedMasterCopy",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        payable: true,
        stateMutability: "payable",
        type: "fallback"
      },
      {
        constant: true,
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_masterCopy",
            type: "address"
          }
        ],
        name: "changeMasterCopy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Multi_send__factory.js
var require_Multi_send_factory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Multi_send__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Multi_send__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send__factory = Multi_send__factory;
    Multi_send__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Proxy_factory__factory.js
var require_Proxy_factory_factory2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Proxy_factory__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy_factory__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "masterCopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "createProxy",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyRuntimeCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_mastercopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_mastercopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          },
          {
            internalType: "contract IProxyCreationCallback",
            name: "callback",
            type: "address"
          }
        ],
        name: "createProxyWithCallback",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_mastercopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "calculateCreateProxyWithNonceAddress",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Proxy_factory__factory = Proxy_factory__factory;
    Proxy_factory__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.2.0/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.2.0/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "masterCopy",
            type: "address"
          }
        ],
        name: "ChangedMasterCopy",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        payable: true,
        stateMutability: "payable",
        type: "fallback"
      },
      {
        constant: true,
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_masterCopy",
            type: "address"
          }
        ],
        name: "changeMasterCopy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "isModuleEnabled",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Compatibility_fallback_handler__factory.js
var require_Compatibility_fallback_handler_factory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Compatibility_fallback_handler__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Compatibility_fallback_handler__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "contract GnosisSafe",
            name: "safe",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHashForSafe",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256[]",
            name: "",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "",
            type: "uint256[]"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC1155BatchReceived",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC1155Received",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC721Received",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "targetContract",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "calldataPayload",
            type: "bytes"
          }
        ],
        name: "simulate",
        outputs: [
          {
            internalType: "bytes",
            name: "response",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes4",
            name: "interfaceId",
            type: "bytes4"
          }
        ],
        name: "supportsInterface",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "tokensReceived",
        outputs: [],
        stateMutability: "pure",
        type: "function"
      }
    ];
    var Compatibility_fallback_handler__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Compatibility_fallback_handler__factory = Compatibility_fallback_handler__factory;
    Compatibility_fallback_handler__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory4 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "ChangedFallbackHandler",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "guard",
            type: "address"
          }
        ],
        name: "ChangedGuard",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "SafeReceived",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "initiator",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address[]",
            name: "owners",
            type: "address[]"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "address",
            name: "initializer",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          }
        ],
        name: "SafeSetup",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        stateMutability: "nonpayable",
        type: "fallback"
      },
      {
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "requiredSignatures",
            type: "uint256"
          }
        ],
        name: "checkNSignatures",
        outputs: [],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "checkSignatures",
        outputs: [],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "getChainId",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offset",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "length",
            type: "uint256"
          }
        ],
        name: "getStorageAt",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "isModuleEnabled",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "guard",
            type: "address"
          }
        ],
        name: "setGuard",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "targetContract",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "calldataPayload",
            type: "bytes"
          }
        ],
        name: "simulateAndRevert",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send_call_only__factory.js
var require_Multi_send_call_only_factory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send_call_only__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send_call_only__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
    var Multi_send_call_only__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send_call_only__factory = Multi_send_call_only__factory;
    Multi_send_call_only__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send__factory.js
var require_Multi_send_factory2 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
    var Multi_send__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send__factory = Multi_send__factory;
    Multi_send__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Proxy_factory__factory.js
var require_Proxy_factory_factory3 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Proxy_factory__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy_factory__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address",
            name: "singleton",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "calculateCreateProxyWithNonceAddress",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "createProxy",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          },
          {
            internalType: "contract IProxyCreationCallback",
            name: "callback",
            type: "address"
          }
        ],
        name: "createProxyWithCallback",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [],
        name: "proxyRuntimeCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "pure",
        type: "function"
      }
    ];
    var Proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Proxy_factory__factory = Proxy_factory__factory;
    Proxy_factory__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Sign_message_lib__factory.js
var require_Sign_message_lib_factory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Sign_message_lib__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sign_message_lib__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Sign_message_lib__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Sign_message_lib__factory = Sign_message_lib__factory;
    Sign_message_lib__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Create_call__factory.js
var require_Create_call_factory = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Create_call__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Create_call__factory = void 0;
    var ethers_1 = (init_lib40(), __toCommonJS(lib_exports14));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        name: "ContractCreation",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "deploymentData",
            type: "bytes"
          }
        ],
        name: "performCreate",
        outputs: [
          {
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "deploymentData",
            type: "bytes"
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32"
          }
        ],
        name: "performCreate2",
        outputs: [
          {
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Create_call__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Create_call__factory = Create_call__factory;
    Create_call__factory.abi = _abi;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerEthersContract.js
var require_CompatibilityFallbackHandlerEthersContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = CompatibilityFallbackHandlerEthersContract;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Ethers.js
var require_CompatibilityFallbackHandler_V1_3_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerEthersContract_1 = __importDefault(require_CompatibilityFallbackHandlerEthersContract());
    var CompatibilityFallbackHandler_V1_3_0_Ethers = class extends CompatibilityFallbackHandlerEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CompatibilityFallbackHandler_V1_3_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/utils/index.js
var require_utils18 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTypedDataSigner = exports.toTxResult = exports.sameString = void 0;
    function sameString(str1, str2) {
      return str1.toLowerCase() === str2.toLowerCase();
    }
    exports.sameString = sameString;
    function toTxResult(transactionResponse, options) {
      return {
        hash: transactionResponse.hash,
        options,
        transactionResponse
      };
    }
    exports.toTxResult = toTxResult;
    function isTypedDataSigner(signer) {
      return signer._signTypedData !== void 0;
    }
    exports.isTypedDataSigner = isTypedDataSigner;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CreateCall/CreateCallEthersContract.js
var require_CreateCallEthersContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CreateCall/CreateCallEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_12 = require_utils18();
    var CreateCallEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
      async performCreate2(value, deploymentData, salt, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("performCreate2", [value, deploymentData, salt], {
            ...options
          });
        }
        const txResponse = await this.contract.performCreate2(value, deploymentData, salt, options);
        return (0, utils_12.toTxResult)(txResponse, options);
      }
      async performCreate(value, deploymentData, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("performCreate", [value, deploymentData], {
            ...options
          });
        }
        const txResponse = await this.contract.performCreate(value, deploymentData, options);
        return (0, utils_12.toTxResult)(txResponse, options);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();
      }
    };
    exports.default = CreateCallEthersContract;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Ethers.js
var require_CreateCallEthersContract_V1_3_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CreateCallEthersContract_1 = __importDefault(require_CreateCallEthersContract());
    var CreateCallContract_V1_3_0_Ethers = class extends CreateCallEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CreateCallContract_V1_3_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/utils/constants.js
var require_constants4 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/utils/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENTINEL_ADDRESS = exports.EMPTY_DATA = exports.ZERO_ADDRESS = void 0;
    exports.ZERO_ADDRESS = `0x${"0".repeat(40)}`;
    exports.EMPTY_DATA = "0x";
    exports.SENTINEL_ADDRESS = "0x0000000000000000000000000000000000000001";
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/GnosisSafeContractEthers.js
var require_GnosisSafeContractEthers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/GnosisSafeContractEthers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_12 = require_utils18();
    var GnosisSafeContractEthers = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      async getVersion() {
        return await this.contract.VERSION();
      }
      getAddress() {
        return this.contract.address;
      }
      async getNonce() {
        return (await this.contract.nonce()).toNumber();
      }
      async getThreshold() {
        return (await this.contract.getThreshold()).toNumber();
      }
      async getOwners() {
        return this.contract.getOwners();
      }
      async isOwner(address) {
        return this.contract.isOwner(address);
      }
      async getTransactionHash(safeTransactionData) {
        return this.contract.getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce);
      }
      async approvedHashes(ownerAddress, hash3) {
        return this.contract.approvedHashes(ownerAddress, hash3);
      }
      async approveHash(hash3, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("approveHash", [hash3], { ...options });
        }
        const txResponse = await this.contract.approveHash(hash3, options);
        return (0, utils_12.toTxResult)(txResponse, options);
      }
      async isValidTransaction(safeTransaction, options) {
        let isTxValid = false;
        try {
          if (options && !options.gasLimit) {
            options.gasLimit = await this.estimateGas("execTransaction", [
              safeTransaction.data.to,
              safeTransaction.data.value,
              safeTransaction.data.data,
              safeTransaction.data.operation,
              safeTransaction.data.safeTxGas,
              safeTransaction.data.baseGas,
              safeTransaction.data.gasPrice,
              safeTransaction.data.gasToken,
              safeTransaction.data.refundReceiver,
              safeTransaction.encodedSignatures()
            ], {
              ...options
            });
          }
          isTxValid = await this.contract.callStatic.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);
        } catch {
        }
        return isTxValid;
      }
      async execTransaction(safeTransaction, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("execTransaction", [
            safeTransaction.data.to,
            safeTransaction.data.value,
            safeTransaction.data.data,
            safeTransaction.data.operation,
            safeTransaction.data.safeTxGas,
            safeTransaction.data.baseGas,
            safeTransaction.data.gasPrice,
            safeTransaction.data.gasToken,
            safeTransaction.data.refundReceiver,
            safeTransaction.encodedSignatures()
          ], {
            ...options
          });
        }
        const txResponse = await this.contract.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);
        return (0, utils_12.toTxResult)(txResponse, options);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();
      }
    };
    exports.default = GnosisSafeContractEthers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.0.0/GnosisSafeContract_V1_0_0_Ethers.js
var require_GnosisSafeContract_V1_0_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.0.0/GnosisSafeContract_V1_0_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants4();
    var utils_12 = require_utils18();
    var GnosisSafeContractEthers_1 = __importDefault(require_GnosisSafeContractEthers());
    var GnosisSafeContract_V1_0_0_Ethers = class extends GnosisSafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, paymentToken, payment, paymentReceiver, options);
        return (0, utils_12.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.getModules();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_12.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = GnosisSafeContract_V1_0_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.1.1/GnosisSafeContract_V1_1_1_Ethers.js
var require_GnosisSafeContract_V1_1_1_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.1.1/GnosisSafeContract_V1_1_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants4();
    var utils_12 = require_utils18();
    var GnosisSafeContractEthers_1 = __importDefault(require_GnosisSafeContractEthers());
    var GnosisSafeContract_V1_1_1_Ethers = class extends GnosisSafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_12.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.getModules();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_12.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = GnosisSafeContract_V1_1_1_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.2.0/GnosisSafeContract_V1_2_0_Ethers.js
var require_GnosisSafeContract_V1_2_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.2.0/GnosisSafeContract_V1_2_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_12 = require_utils18();
    var constants_1 = require_constants4();
    var GnosisSafeContractEthers_1 = __importDefault(require_GnosisSafeContractEthers());
    var GnosisSafeContract_V1_2_0_Ethers = class extends GnosisSafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_12.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.getModules();
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.isModuleEnabled(moduleAddress);
      }
    };
    exports.default = GnosisSafeContract_V1_2_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.3.0/GnosisSafeContract_V1_3_0_Ethers.js
var require_GnosisSafeContract_V1_3_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.3.0/GnosisSafeContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_12 = require_utils18();
    var constants_1 = require_constants4();
    var GnosisSafeContractEthers_1 = __importDefault(require_GnosisSafeContractEthers());
    var GnosisSafeContract_V1_3_0_Ethers = class extends GnosisSafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_12.toTxResult)(txResponse, options);
      }
      async getModules() {
        const { array } = await this.contract.getModulesPaginated(constants_1.SENTINEL_ADDRESS, 10);
        return array;
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.isModuleEnabled(moduleAddress);
      }
    };
    exports.default = GnosisSafeContract_V1_3_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/GnosisSafeProxyFactoryEthersContract.js
var require_GnosisSafeProxyFactoryEthersContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/GnosisSafeProxyFactoryEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var GnosisSafeProxyFactoryEthersContract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.address;
      }
      async proxyCreationCode() {
        return this.contract.proxyCreationCode();
      }
      async createProxy({ safeMasterCopyAddress, initializer, saltNonce, options, callback }) {
        if (bignumber_1.BigNumber.from(saltNonce).lt(0))
          throw new Error("saltNonce must be greater than or equal to 0");
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("createProxyWithNonce", [safeMasterCopyAddress, initializer, saltNonce], {
            ...options
          });
        }
        const proxyAddress = this.contract.createProxyWithNonce(safeMasterCopyAddress, initializer, saltNonce, options).then(async (txResponse) => {
          var _a;
          if (callback) {
            callback(txResponse.hash);
          }
          const txReceipt = await txResponse.wait();
          const proxyCreationEvent = (_a = txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.events) === null || _a === void 0 ? void 0 : _a.find(({ event }) => event === "ProxyCreation");
          if (!proxyCreationEvent || !proxyCreationEvent.args) {
            throw new Error("SafeProxy was not deployed correctly");
          }
          const proxyAddress2 = proxyCreationEvent.args[0];
          return proxyAddress2;
        });
        return proxyAddress;
      }
      encode(methodName, params) {
        return this.contract.interface.encodeFunctionData(methodName, params);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();
      }
    };
    exports.default = GnosisSafeProxyFactoryEthersContract;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.0.0/GnosisSafeProxyFactoryContract_V1_0_0_Ethers.js
var require_GnosisSafeProxyFactoryContract_V1_0_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.0.0/GnosisSafeProxyFactoryContract_V1_0_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GnosisSafeProxyFactoryEthersContract_1 = __importDefault(require_GnosisSafeProxyFactoryEthersContract());
    var GnosisSafeProxyFactoryContract_V1_0_0_Ethers = class extends GnosisSafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = GnosisSafeProxyFactoryContract_V1_0_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.1.1/GnosisSafeProxyFactoryContract_V1_1_1_Ethers.js
var require_GnosisSafeProxyFactoryContract_V1_1_1_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.1.1/GnosisSafeProxyFactoryContract_V1_1_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GnosisSafeProxyFactoryEthersContract_1 = __importDefault(require_GnosisSafeProxyFactoryEthersContract());
    var GnosisSafeProxyFactoryContract_V1_1_1_Ethers = class extends GnosisSafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = GnosisSafeProxyFactoryContract_V1_1_1_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.3.0/GnosisSafeProxyFactoryContract_V1_3_0_Ethers.js
var require_GnosisSafeProxyFactoryContract_V1_3_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.3.0/GnosisSafeProxyFactoryContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GnosisSafeProxyFactoryEthersContract_1 = __importDefault(require_GnosisSafeProxyFactoryEthersContract());
    var GnosisSafeProxyFactoryContract_V1_3_0_Ethers = class extends GnosisSafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = GnosisSafeProxyFactoryContract_V1_3_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/MultiSendEthersContract.js
var require_MultiSendEthersContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/MultiSendEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = MultiSendEthersContract;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Ethers.js
var require_MultiSendContract_V1_1_1_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract_1 = __importDefault(require_MultiSendEthersContract());
    var MultiSendContract_V1_1_1_Ethers = class extends MultiSendEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_1_1_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Ethers.js
var require_MultiSendContract_V1_3_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract_1 = __importDefault(require_MultiSendEthersContract());
    var MultiSendContract_V1_3_0_Ethers = class extends MultiSendEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_3_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSendCallOnly/MultiSendCallOnlyEthersContract.js
var require_MultiSendCallOnlyEthersContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSendCallOnly/MultiSendCallOnlyEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = MultiSendCallOnlyEthersContract;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Ethers.js
var require_MultiSendCallOnlyContract_V1_3_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyEthersContract_1 = __importDefault(require_MultiSendCallOnlyEthersContract());
    var MultiSendCallOnlyContract_V1_3_0_Ethers = class extends MultiSendCallOnlyEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendCallOnlyContract_V1_3_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/SignMessageLib/SignMessageLibEthersContract.js
var require_SignMessageLibEthersContract = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/SignMessageLib/SignMessageLibEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_12 = require_utils18();
    var SignMessageLibEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
      async signMessage(data, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("signMessage", [data], { ...options });
        }
        const txResponse = await this.contract.signMessage(data, options);
        return (0, utils_12.toTxResult)(txResponse, options);
      }
      async getMessageHash(message) {
        return this.contract.getMessageHash(message);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();
      }
    };
    exports.default = SignMessageLibEthersContract;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Ethers.js
var require_SignMessageLibContract_V1_3_0_Ethers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SignMessageLibEthersContract_1 = __importDefault(require_SignMessageLibEthersContract());
    var SignMessageLibContract_V1_3_0_Ethers = class extends SignMessageLibEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SignMessageLibContract_V1_3_0_Ethers;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/contractInstancesEthers.js
var require_contractInstancesEthers = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/contractInstancesEthers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCreateCallContractInstance = exports.getSignMessageLibContractInstance = exports.getSafeProxyFactoryContractInstance = exports.getMultiSendCallOnlyContractInstance = exports.getMultiSendContractInstance = exports.getCompatibilityFallbackHandlerContractInstance = exports.getSafeContractInstance = void 0;
    var Gnosis_safe__factory_1 = require_Gnosis_safe_factory();
    var Proxy_factory__factory_1 = require_Proxy_factory_factory();
    var Gnosis_safe__factory_2 = require_Gnosis_safe_factory2();
    var Multi_send__factory_1 = require_Multi_send_factory();
    var Proxy_factory__factory_2 = require_Proxy_factory_factory2();
    var Gnosis_safe__factory_3 = require_Gnosis_safe_factory3();
    var Compatibility_fallback_handler__factory_1 = require_Compatibility_fallback_handler_factory();
    var Gnosis_safe__factory_4 = require_Gnosis_safe_factory4();
    var Multi_send_call_only__factory_1 = require_Multi_send_call_only_factory();
    var Multi_send__factory_2 = require_Multi_send_factory2();
    var Proxy_factory__factory_3 = require_Proxy_factory_factory3();
    var Sign_message_lib__factory_1 = require_Sign_message_lib_factory();
    var Create_call__factory_1 = require_Create_call_factory();
    var CompatibilityFallbackHandler_V1_3_0_Ethers_1 = __importDefault(require_CompatibilityFallbackHandler_V1_3_0_Ethers());
    var CreateCallEthersContract_V1_3_0_Ethers_1 = __importDefault(require_CreateCallEthersContract_V1_3_0_Ethers());
    var GnosisSafeContract_V1_0_0_Ethers_1 = __importDefault(require_GnosisSafeContract_V1_0_0_Ethers());
    var GnosisSafeContract_V1_1_1_Ethers_1 = __importDefault(require_GnosisSafeContract_V1_1_1_Ethers());
    var GnosisSafeContract_V1_2_0_Ethers_1 = __importDefault(require_GnosisSafeContract_V1_2_0_Ethers());
    var GnosisSafeContract_V1_3_0_Ethers_1 = __importDefault(require_GnosisSafeContract_V1_3_0_Ethers());
    var GnosisSafeProxyFactoryContract_V1_0_0_Ethers_1 = __importDefault(require_GnosisSafeProxyFactoryContract_V1_0_0_Ethers());
    var GnosisSafeProxyFactoryContract_V1_1_1_Ethers_1 = __importDefault(require_GnosisSafeProxyFactoryContract_V1_1_1_Ethers());
    var GnosisSafeProxyFactoryContract_V1_3_0_Ethers_1 = __importDefault(require_GnosisSafeProxyFactoryContract_V1_3_0_Ethers());
    var MultiSendContract_V1_1_1_Ethers_1 = __importDefault(require_MultiSendContract_V1_1_1_Ethers());
    var MultiSendContract_V1_3_0_Ethers_1 = __importDefault(require_MultiSendContract_V1_3_0_Ethers());
    var MultiSendCallOnlyContract_V1_3_0_Ethers_1 = __importDefault(require_MultiSendCallOnlyContract_V1_3_0_Ethers());
    var SignMessageLibContract_V1_3_0_Ethers_1 = __importDefault(require_SignMessageLibContract_V1_3_0_Ethers());
    function getSafeContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let safeContract;
      switch (safeVersion) {
        case "1.3.0":
          safeContract = Gnosis_safe__factory_4.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeContract_V1_3_0_Ethers_1.default(safeContract);
        case "1.2.0":
          safeContract = Gnosis_safe__factory_3.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeContract_V1_2_0_Ethers_1.default(safeContract);
        case "1.1.1":
          safeContract = Gnosis_safe__factory_2.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeContract_V1_1_1_Ethers_1.default(safeContract);
        case "1.0.0":
          safeContract = Gnosis_safe__factory_1.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeContract_V1_0_0_Ethers_1.default(safeContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSafeContractInstance = getSafeContractInstance;
    function getCompatibilityFallbackHandlerContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let compatibilityFallbackHandlerContract;
      switch (safeVersion) {
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
          compatibilityFallbackHandlerContract = Compatibility_fallback_handler__factory_1.Compatibility_fallback_handler__factory.connect(contractAddress, signerOrProvider);
          return new CompatibilityFallbackHandler_V1_3_0_Ethers_1.default(compatibilityFallbackHandlerContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCompatibilityFallbackHandlerContractInstance = getCompatibilityFallbackHandlerContractInstance;
    function getMultiSendContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let multiSendContract;
      switch (safeVersion) {
        case "1.3.0":
          multiSendContract = Multi_send__factory_2.Multi_send__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendContract_V1_3_0_Ethers_1.default(multiSendContract);
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          multiSendContract = Multi_send__factory_1.Multi_send__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendContract_V1_1_1_Ethers_1.default(multiSendContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendContractInstance = getMultiSendContractInstance;
    function getMultiSendCallOnlyContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let multiSendCallOnlyContract;
      switch (safeVersion) {
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          multiSendCallOnlyContract = Multi_send_call_only__factory_1.Multi_send_call_only__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendCallOnlyContract_V1_3_0_Ethers_1.default(multiSendCallOnlyContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendCallOnlyContractInstance = getMultiSendCallOnlyContractInstance;
    function getSafeProxyFactoryContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let gnosisSafeProxyFactoryContract;
      switch (safeVersion) {
        case "1.3.0":
          gnosisSafeProxyFactoryContract = Proxy_factory__factory_3.Proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeProxyFactoryContract_V1_3_0_Ethers_1.default(gnosisSafeProxyFactoryContract);
        case "1.2.0":
        case "1.1.1":
          gnosisSafeProxyFactoryContract = Proxy_factory__factory_2.Proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeProxyFactoryContract_V1_1_1_Ethers_1.default(gnosisSafeProxyFactoryContract);
        case "1.0.0":
          gnosisSafeProxyFactoryContract = Proxy_factory__factory_1.Proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeProxyFactoryContract_V1_0_0_Ethers_1.default(gnosisSafeProxyFactoryContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSafeProxyFactoryContractInstance = getSafeProxyFactoryContractInstance;
    function getSignMessageLibContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let signMessageLibContract;
      switch (safeVersion) {
        case "1.3.0":
          signMessageLibContract = Sign_message_lib__factory_1.Sign_message_lib__factory.connect(contractAddress, signerOrProvider);
          return new SignMessageLibContract_V1_3_0_Ethers_1.default(signMessageLibContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSignMessageLibContractInstance = getSignMessageLibContractInstance;
    function getCreateCallContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let createCallContract;
      switch (safeVersion) {
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          createCallContract = Create_call__factory_1.Create_call__factory.connect(contractAddress, signerOrProvider);
          return new CreateCallEthersContract_V1_3_0_Ethers_1.default(createCallContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCreateCallContractInstance = getCreateCallContractInstance;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/EthersAdapter.js
var require_EthersAdapter = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/EthersAdapter.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _EthersAdapter_ethers;
    var _EthersAdapter_signer;
    var _EthersAdapter_provider;
    Object.defineProperty(exports, "__esModule", { value: true });
    var abstract_signer_1 = (init_lib6(), __toCommonJS(lib_exports6));
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_utils_1 = require_src6();
    var contractInstancesEthers_1 = require_contractInstancesEthers();
    var utils_12 = require_utils18();
    var EthersAdapter = class {
      constructor({ ethers, signerOrProvider }) {
        _EthersAdapter_ethers.set(this, void 0);
        _EthersAdapter_signer.set(this, void 0);
        _EthersAdapter_provider.set(this, void 0);
        if (!ethers) {
          throw new Error("ethers property missing from options");
        }
        __classPrivateFieldSet(this, _EthersAdapter_ethers, ethers, "f");
        const isSigner = signerOrProvider instanceof abstract_signer_1.Signer;
        if (isSigner) {
          const signer = signerOrProvider;
          if (!signer.provider) {
            throw new Error("Signer must be connected to a provider");
          }
          __classPrivateFieldSet(this, _EthersAdapter_provider, signer.provider, "f");
          __classPrivateFieldSet(this, _EthersAdapter_signer, signer, "f");
        } else {
          __classPrivateFieldSet(this, _EthersAdapter_provider, signerOrProvider, "f");
        }
      }
      getProvider() {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
      }
      getSigner() {
        return __classPrivateFieldGet(this, _EthersAdapter_signer, "f");
      }
      isAddress(address) {
        return __classPrivateFieldGet(this, _EthersAdapter_ethers, "f").utils.isAddress(address);
      }
      async getEip3770Address(fullAddress) {
        const chainId = await this.getChainId();
        return (0, safe_core_sdk_utils_1.validateEip3770Address)(fullAddress, chainId);
      }
      async getBalance(address, blockTag) {
        return bignumber_1.BigNumber.from(await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getBalance(address, blockTag));
      }
      async getNonce(address, blockTag) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getTransactionCount(address, blockTag);
      }
      async getChainId() {
        return (await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getNetwork()).chainId;
      }
      getChecksummedAddress(address) {
        return __classPrivateFieldGet(this, _EthersAdapter_ethers, "f").utils.getAddress(address);
      }
      getSafeContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid SafeProxy contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSafeContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getSafeProxyFactoryContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid SafeProxyFactory contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSafeProxyFactoryContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getMultiSendContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid MultiSend contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getMultiSendContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getMultiSendCallOnlyContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid MultiSendCallOnly contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getMultiSendCallOnlyContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getCompatibilityFallbackHandlerContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid CompatibilityFallbackHandler contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getCompatibilityFallbackHandlerContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getSignMessageLibContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid SignMessageLib contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSignMessageLibContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getCreateCallContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid CreateCall contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getCreateCallContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getContractCode(address, blockTag) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getCode(address, blockTag);
      }
      async isContractDeployed(address, blockTag) {
        const contractCode = await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getCode(address, blockTag);
        return contractCode !== "0x";
      }
      async getStorageAt(address, position) {
        const content = await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getStorageAt(address, position);
        const decodedContent = this.decodeParameters(["address"], content);
        return decodedContent[0];
      }
      async getTransaction(transactionHash) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getTransaction(transactionHash);
      }
      async getSignerAddress() {
        var _a;
        return (_a = __classPrivateFieldGet(this, _EthersAdapter_signer, "f")) === null || _a === void 0 ? void 0 : _a.getAddress();
      }
      signMessage(message) {
        if (!__classPrivateFieldGet(this, _EthersAdapter_signer, "f")) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const messageArray = __classPrivateFieldGet(this, _EthersAdapter_ethers, "f").utils.arrayify(message);
        return __classPrivateFieldGet(this, _EthersAdapter_signer, "f").signMessage(messageArray);
      }
      async signTypedData(safeTransactionEIP712Args) {
        if (!__classPrivateFieldGet(this, _EthersAdapter_signer, "f")) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        if ((0, utils_12.isTypedDataSigner)(__classPrivateFieldGet(this, _EthersAdapter_signer, "f"))) {
          const typedData = (0, safe_core_sdk_utils_1.generateTypedData)(safeTransactionEIP712Args);
          const signature2 = await __classPrivateFieldGet(this, _EthersAdapter_signer, "f")._signTypedData(typedData.domain, { SafeTx: typedData.types.SafeTx }, typedData.message);
          return signature2;
        }
        throw new Error("The current signer does not implement EIP-712 to sign typed data");
      }
      async estimateGas(transaction) {
        return (await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").estimateGas(transaction)).toNumber();
      }
      call(transaction, blockTag) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").call(transaction, blockTag);
      }
      encodeParameters(types, values) {
        return new (__classPrivateFieldGet(this, _EthersAdapter_ethers, "f")).utils.AbiCoder().encode(types, values);
      }
      decodeParameters(types, values) {
        return new (__classPrivateFieldGet(this, _EthersAdapter_ethers, "f")).utils.AbiCoder().decode(types, values);
      }
    };
    _EthersAdapter_ethers = /* @__PURE__ */ new WeakMap(), _EthersAdapter_signer = /* @__PURE__ */ new WeakMap(), _EthersAdapter_provider = /* @__PURE__ */ new WeakMap();
    exports.default = EthersAdapter;
  }
});

// node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/index.js
var require_src9 = __commonJS({
  "node_modules/.pnpm/@safe-global+safe-ethers-lib@1.9.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@safe-global/safe-ethers-lib/dist/src/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var EthersAdapter_1 = __importDefault(require_EthersAdapter());
    exports.default = EthersAdapter_1.default;
  }
});

// node_modules/.pnpm/@thirdweb-dev+wallets@2.5.39_@ethersproject+abstract-provider@5.8.0_@ethersproject+abst_1aeb6cf3f58449f29485c00b075a9d50/node_modules/@thirdweb-dev/wallets/evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js
init_lib9();
var import_safe_ethers_adapters = __toESM(require_src2());
var import_safe_core_sdk = __toESM(require_src8());
var import_safe_ethers_lib = __toESM(require_src9());
var CHAIN_ID_TO_GNOSIS_SERVER_URL = {
  // mainnet
  1: "https://safe-transaction-mainnet.safe.global",
  // Sepolia
  11155111: "https://safe-transaction-sepolia.safe.global",
  // optimism
  10: "https://safe-transaction-optimism.safe.global",
  // bsc
  56: "https://safe-transaction-bsc.safe.global",
  // gnosis
  100: "https://safe-transaction-gnosis-chain.safe.global",
  // polygon
  137: "https://safe-transaction-polygon.safe.global",
  // avalanche
  43114: "https://safe-transaction-avalanche.safe.global",
  // arbitrum
  42161: "https://safe-transaction-arbitrum.safe.global",
  // celo
  42220: "https://safe-transaction-celo.safe.global",
  // Base mainnet
  8453: "https://safe-transaction-base.safe.global",
  // aurora
  1313161554: "https://safe-transaction-aurora.safe.global",
  //  Polygon zkEVM
  1101: "https://safe-transaction-zkevm.safe.global",
  //  ZkSync Mainnet
  324: "https://safe-transaction-zksync.safe.global"
};
var CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS = {
  // mainnet
  1: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // polygon
  137: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // bsc
  56: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // arbitrum
  42161: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // aurora
  1313161554: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // avalanche
  43114: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // optimism
  10: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // celo
  42220: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // gnosis chain - https://docs.safe.global/smart-account-supported-networks/v1.3.0#gnosis
  100: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // Sepolia - https://docs.safe.global/smart-account-supported-networks/v1.3.0#sepolia
  11155111: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // base mainnet - https://docs.safe.global/smart-account-supported-networks/v1.3.0#base
  8453: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // Polygon zkEVM - https://docs.safe.global/smart-account-supported-networks/v1.3.0#polygon-zkevm
  1101: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // ZkSync Mainnet - https://docs.safe.global/smart-account-supported-networks/v1.3.0#zksync-mainnet
  324: "0x357147caf9C0cCa67DfA0CF5369318d8193c8407"
};
var SIGN_MESSAGE_LIB_ABI = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "bytes32",
    name: "msgHash",
    type: "bytes32"
  }],
  name: "SignMsg",
  type: "event"
}, {
  inputs: [{
    internalType: "bytes",
    name: "message",
    type: "bytes"
  }],
  name: "getMessageHash",
  outputs: [{
    internalType: "bytes32",
    name: "",
    type: "bytes32"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "bytes",
    name: "_data",
    type: "bytes"
  }],
  name: "signMessage",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}];
var __IS_SERVER__ = false;
var SafeConnector = class _SafeConnector extends Connector {
  // config
  // private options: SafeOptions;
  constructor() {
    super();
    _defineProperty(this, "supportedChains", _SafeConnector.supportedChains);
    _defineProperty(this, "id", "safe-wallet");
    _defineProperty(this, "ready", !__IS_SERVER__);
    _defineProperty(this, "name", "Safe Wallet");
    {
      this.ready = true;
    }
  }
  async connect(args) {
    if (!(args.chain.chainId in CHAIN_ID_TO_GNOSIS_SERVER_URL)) {
      throw new Error("Chain not supported by Safe");
    }
    this.safeSigner = await this.createSafeSigner(args);
    return await this.getAddress();
  }
  async createSafeSigner(params) {
    this.personalWallet = params.personalWallet;
    const signer = await params.personalWallet.getSigner();
    const safeAddress = params.safeAddress;
    const safeChainId = params.chain.chainId;
    if (!signer) {
      throw new Error("cannot create Gnosis Safe signer without a personal signer");
    }
    const signerChainId = await signer.getChainId();
    if (signerChainId !== safeChainId) {
      throw new Error("chainId of personal signer has to match safe chainId");
    }
    if (!safeAddress) {
      throw new Error("safeAddress is required");
    }
    if (!safeChainId) {
      throw new Error("safeChainId is required");
    }
    const serverUrl = CHAIN_ID_TO_GNOSIS_SERVER_URL[safeChainId];
    const signMessageLibAddress = CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS[safeChainId];
    if (!serverUrl || !signMessageLibAddress) {
      throw new Error("Chain not supported");
    }
    const ethAdapter = new import_safe_ethers_lib.default({
      ethers: ethers_exports,
      signerOrProvider: signer
    });
    const safe = await import_safe_core_sdk.default.create({
      ethAdapter,
      safeAddress
    });
    const service = new import_safe_ethers_adapters.SafeService(serverUrl);
    const safeSigner = new import_safe_ethers_adapters.SafeEthersSigner(safe, service, signer.provider);
    safeSigner.signMessage = async (message) => {
      const contract = new ethers_exports.BaseContract(signMessageLibAddress, SIGN_MESSAGE_LIB_ABI);
      const data = contract.interface.encodeFunctionData("signMessage", [ethers_exports.utils.hashMessage(message)]);
      const to = signMessageLibAddress;
      const value = "0";
      const operation = 1;
      const safeTxGas = 5e4;
      const baseGas = 5e4;
      const gasPrice = 0;
      const gasToken = ethers_exports.constants.AddressZero;
      const refundReceiver = ethers_exports.constants.AddressZero;
      const safeTx = await safe.createTransaction({
        safeTransactionData: {
          to,
          value,
          operation,
          data,
          baseGas,
          safeTxGas,
          gasPrice,
          gasToken,
          refundReceiver
        }
      });
      const safeTxHash = await safe.getTransactionHash(safeTx);
      const safeSignature = await safe.signTransactionHash(safeTxHash);
      await service.proposeTx(safe.getAddress(), safeTxHash, safeTx, safeSignature);
      while (true) {
        try {
          const txDetails = await service.getSafeTxDetails(safeTxHash);
          if (txDetails.transactionHash) {
            await signer.provider?.waitForTransaction(txDetails.transactionHash);
            break;
          }
        } catch (e) {
        }
        await new Promise((resolve) => setTimeout(resolve, 5e3));
      }
      return "0x";
    };
    this.previousConnector = params.personalWallet;
    return safeSigner;
  }
  async disconnect() {
    this.safeSigner = void 0;
    this.previousConnector = void 0;
    return void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    return await signer.getAddress();
  }
  async getChainId() {
    return (await this.getSigner()).getChainId();
  }
  async getProvider() {
    const provider = (await this.getSigner()).provider;
    if (!provider) {
      throw new Error("No provider available");
    }
    return provider;
  }
  async getSigner() {
    if (!this.safeSigner) {
      throw new Error("not connected - please call connect() first");
    }
    return this.safeSigner;
  }
  async isConnected() {
    try {
      const account = await this.getAddress();
      return !!account;
    } catch (e) {
      return false;
    }
  }
  onAccountsChanged(accounts) {
    if (accounts.length === 0) {
      this.emit("disconnect");
    } else {
      if (accounts[0]) {
        this.emit("change", {
          account: ethers_exports.utils.getAddress(accounts[0])
        });
      }
    }
  }
  onDisconnect() {
    this.emit("disconnect");
  }
  switchChain() {
    throw new Error("Safe connector does not support switching chains");
  }
  updateChains() {
  }
  async setupListeners() {
  }
};
_defineProperty(SafeConnector, "supportedChains", (() => Object.keys(CHAIN_ID_TO_GNOSIS_SERVER_URL))());
export {
  SafeConnector
};
/*! Bundled license information:

utf8/utf8.js:
  (*! https://mths.be/utf8js v3.0.0 by @mathias *)

@noble/hashes/utils.js:
@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/utils.js:
@noble/curves/abstract/modular.js:
@noble/curves/abstract/curve.js:
@noble/curves/abstract/weierstrass.js:
@noble/curves/_shortw_utils.js:
@noble/curves/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

punycode/punycode.js:
  (*! https://mths.be/punycode v1.4.1 by @mathias *)
*/
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-safe.browser.esm-CTK4ZOFC.js.map
