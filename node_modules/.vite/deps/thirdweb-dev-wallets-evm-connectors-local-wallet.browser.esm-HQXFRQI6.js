import "./chunk-LCZXP3DY.js";
import {
  Connector
} from "./chunk-F54R5EB6.js";
import "./chunk-RMA3UERL.js";
import {
  normalizeChainId
} from "./chunk-6Q4I5ZJT.js";
import {
  _defineProperty
} from "./chunk-5KMUDT64.js";
import "./chunk-VJLYARZW.js";
import "./chunk-LHNQBU3K.js";
import "./chunk-3CKHE3UX.js";
import "./chunk-KBSU7P7E.js";
import "./chunk-SKYU45PG.js";
import "./chunk-K3WLKV3W.js";
import "./chunk-GPHOYIUU.js";
import "./chunk-XCEIDS74.js";
import "./chunk-5KA42CBB.js";
import "./chunk-WUFPCT7Y.js";
import "./chunk-UALPWOVE.js";
import "./chunk-QR2UZWGK.js";
import "./chunk-HWDUXV26.js";
import "./chunk-SMCLQ63X.js";
import "./chunk-CCZJMTRD.js";
import "./chunk-ODCBHQEV.js";
import "./chunk-AS7Y3LQA.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-76ZFLGHX.js";
import "./chunk-R7MM6V5H.js";
import "./chunk-6NV6YXVG.js";
import "./chunk-WILOY3HU.js";
import "./chunk-JCHTCLVA.js";
import "./chunk-I4HYQSP4.js";
import "./chunk-E4JHE7BY.js";
import "./chunk-JDB4DIAM.js";
import "./chunk-54TL2FS6.js";
import "./chunk-EXDIX5RQ.js";
import "./chunk-V4ANEXDN.js";
import "./chunk-LIV54TUW.js";
import "./chunk-YXMD7WT5.js";
import "./chunk-FYFJ64CE.js";
import "./chunk-VISWZ4NV.js";
import "./chunk-SUHZGYFJ.js";
import "./chunk-JL64IIDE.js";
import "./chunk-QIUKQIML.js";
import "./chunk-LBZPWF46.js";
import "./chunk-YX55VVUJ.js";
import "./chunk-T2ZLFV2O.js";
import "./chunk-C6HNAJ4E.js";
import "./chunk-UJRE2TVX.js";
import "./chunk-P2MMOY6P.js";
import {
  getChainProvider,
  getDefaultGasOverrides
} from "./chunk-RMBH3OGQ.js";
import {
  require_utils
} from "./chunk-6WUZ7PGF.js";
import "./chunk-HOINEBW7.js";
import "./chunk-5WPDP5CU.js";
import "./chunk-ACRESCLM.js";
import "./chunk-BF2NOJ63.js";
import "./chunk-OL5PZ4BH.js";
import "./chunk-HTYCXNSQ.js";
import "./chunk-BRT6DRIA.js";
import "./chunk-PN3IOENS.js";
import "./chunk-ABGHX4OY.js";
import "./chunk-BZJISV5H.js";
import "./chunk-JZ6CFHV6.js";
import "./chunk-KEHZJHNP.js";
import "./chunk-BU75GG7A.js";
import "./chunk-3KTND37Y.js";
import "./chunk-JGKCYAOG.js";
import "./chunk-7G5FIZFQ.js";
import "./chunk-7FXQ4IAT.js";
import "./chunk-TBJ2FXKA.js";
import "./chunk-M5YXO2SQ.js";
import {
  init_lib7 as init_lib
} from "./chunk-HOAY7CPE.js";
import {
  Signer
} from "./chunk-NPRSAB35.js";
import "./chunk-LUL5GG4I.js";
import {
  __toESM
} from "./chunk-RZ55PUNP.js";

// node_modules/.pnpm/@thirdweb-dev+wallets@2.5.39_@ethersproject+abstract-provider@5.8.0_@ethersproject+abst_1aeb6cf3f58449f29485c00b075a9d50/node_modules/@thirdweb-dev/wallets/evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js
init_lib();
var import_utils = __toESM(require_utils());
var WrappedSigner = class _WrappedSigner extends Signer {
  constructor(signer) {
    super();
    this.signer = signer;
    (0, import_utils.defineReadOnly)(this, "provider", signer.provider);
  }
  async getAddress() {
    return await this.signer.getAddress();
  }
  async signMessage(message) {
    return await this.signer.signMessage(message);
  }
  async signTransaction(transaction) {
    return await this.signer.signTransaction(transaction);
  }
  connect(provider) {
    return new _WrappedSigner(this.signer.connect(provider));
  }
  _signTypedData(domain, types, value) {
    return this.signer._signTypedData(domain, types, value);
  }
  async sendTransaction(transaction) {
    if (!this.provider) {
      throw new Error("Provider not found");
    }
    const gas = await getDefaultGasOverrides(this.provider);
    const txWithGas = {
      ...gas,
      ...transaction
    };
    return await this.signer.sendTransaction(txWithGas);
  }
};
var LocalWalletConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "id", "local_wallet");
    _defineProperty(this, "name", "Local Wallet");
    _defineProperty(this, "shimDisconnectKey", "localWallet.shimDisconnect");
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    this._provider = void 0;
    this._signer = void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!this._provider) {
      this._provider = getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      });
    }
    return this._provider;
  }
  async getSigner() {
    if (!this._signer) {
      const provider = await this.getProvider();
      this._signer = getSignerFromEthersWallet(this.options.ethersWallet, provider);
    }
    return this._signer;
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    this._provider = getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    });
    this._signer = getSignerFromEthersWallet(this.options.ethersWallet, this._provider);
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getSignerFromEthersWallet(ethersWallet, provider) {
  let signer = ethersWallet;
  if (provider) {
    signer = ethersWallet.connect(provider);
  }
  return new WrappedSigner(signer);
}
export {
  LocalWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm-HQXFRQI6.js.map
