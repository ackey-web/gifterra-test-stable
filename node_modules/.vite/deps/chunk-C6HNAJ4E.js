import {
  fetchCurrencyMetadata,
  isNativeToken
} from "./chunk-P2MMOY6P.js";
import {
  AmountSchema,
  BigNumberTransformSchema$1,
  ContractWrapper,
  FileOrBufferOrStringSchema,
  HexColor,
  external_exports
} from "./chunk-RMBH3OGQ.js";
import {
  init_lib7 as init_lib,
  utils_exports
} from "./chunk-HOAY7CPE.js";

// node_modules/.pnpm/@thirdweb-dev+sdk@4.0.99_@types+react-dom@18.3.7_@types+react@18.3.26__@types+react@18._4ecbbc39539d7059b1b8ad321c3f738a/node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-7f76f677.browser.esm.js
var PropertiesInput = (() => external_exports.object({}).catchall(external_exports.union([BigNumberTransformSchema$1, external_exports.unknown()])))();
var OptionalPropertiesInput = (() => external_exports.union([external_exports.array(external_exports.array(PropertiesInput)).transform((i) => i.flat()), external_exports.array(PropertiesInput), PropertiesInput]).optional().nullable())();
var BasicNFTInput = (() => external_exports.object({
  name: external_exports.union([external_exports.string(), external_exports.number()]).optional().nullable(),
  description: external_exports.string().nullable().optional().nullable(),
  image: FileOrBufferOrStringSchema.nullable().optional(),
  animation_url: FileOrBufferOrStringSchema.optional().nullable()
}))();
var CommonNFTInput = (() => BasicNFTInput.extend({
  external_url: FileOrBufferOrStringSchema.nullable().optional(),
  background_color: HexColor.optional().nullable(),
  properties: OptionalPropertiesInput,
  attributes: OptionalPropertiesInput
}).catchall(external_exports.union([BigNumberTransformSchema$1, external_exports.unknown()])))();
var NFTInputOrUriSchema = (() => external_exports.union([CommonNFTInput, external_exports.string()]))();
var CommonNFTOutput = (() => CommonNFTInput.extend({
  id: external_exports.string(),
  uri: external_exports.string(),
  image: external_exports.string().nullable().optional(),
  external_url: external_exports.string().nullable().optional(),
  animation_url: external_exports.string().nullable().optional()
}))();
async function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {
  if (isNativeToken(currencyAddress)) {
    overrides["value"] = value;
  } else {
    const ERC20Abi = (await import("./IERC20-YYBYRFC2.js")).default;
    const signer = contractToApprove.getSigner();
    const provider = contractToApprove.getProvider();
    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);
    const owner = await contractToApprove.getSignerAddress();
    const spender = contractToApprove.address;
    const allowance = await erc20.read("allowance", [owner, spender]);
    if (allowance.lt(value)) {
      await erc20.sendTransaction("approve", [spender, value]);
    }
    return overrides;
  }
}

// node_modules/.pnpm/@thirdweb-dev+sdk@4.0.99_@types+react-dom@18.3.7_@types+react@18.3.26__@types+react@18._4ecbbc39539d7059b1b8ad321c3f738a/node_modules/@thirdweb-dev/sdk/dist/normalizePriceValue-9851c0eb.browser.esm.js
init_lib();
async function normalizePriceValue(provider, inputPrice, currencyAddress) {
  const metadata = await fetchCurrencyMetadata(provider, currencyAddress);
  return utils_exports.parseUnits(AmountSchema.parse(inputPrice), metadata.decimals);
}

export {
  BasicNFTInput,
  CommonNFTInput,
  NFTInputOrUriSchema,
  CommonNFTOutput,
  setErc20Allowance,
  normalizePriceValue
};
//# sourceMappingURL=chunk-C6HNAJ4E.js.map
