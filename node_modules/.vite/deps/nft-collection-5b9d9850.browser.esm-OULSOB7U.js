import {
  StandardErc721
} from "./chunk-QNUDJ3Q5.js";
import {
  Erc721WithQuantitySignatureMintable
} from "./chunk-JDB4DIAM.js";
import "./chunk-54TL2FS6.js";
import {
  ContractPrimarySale
} from "./chunk-V4ANEXDN.js";
import {
  ContractOwner,
  ContractRoyalty
} from "./chunk-LIV54TUW.js";
import {
  require_fast_deep_equal
} from "./chunk-YXMD7WT5.js";
import "./chunk-SUHZGYFJ.js";
import {
  ContractPlatformFee
} from "./chunk-LBZPWF46.js";
import {
  ContractInterceptor
} from "./chunk-YX55VVUJ.js";
import "./chunk-T2ZLFV2O.js";
import "./chunk-C6HNAJ4E.js";
import {
  ContractRoles
} from "./chunk-UJRE2TVX.js";
import {
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractMetadata,
  GasCostEstimator
} from "./chunk-P2MMOY6P.js";
import {
  AbiSchema,
  ContractWrapper,
  NFT_BASE_CONTRACT_ROLES,
  TokenErc721ContractSchema,
  Transaction,
  buildTransactionFunction,
  getRoleHash,
  require_bs58
} from "./chunk-RMBH3OGQ.js";
import {
  require_utils
} from "./chunk-6WUZ7PGF.js";
import "./chunk-HOINEBW7.js";
import "./chunk-5WPDP5CU.js";
import "./chunk-ACRESCLM.js";
import "./chunk-HTYCXNSQ.js";
import "./chunk-BRT6DRIA.js";
import {
  require_bn
} from "./chunk-PN3IOENS.js";
import "./chunk-ABGHX4OY.js";
import "./chunk-BZJISV5H.js";
import "./chunk-JZ6CFHV6.js";
import "./chunk-KEHZJHNP.js";
import "./chunk-BU75GG7A.js";
import "./chunk-3KTND37Y.js";
import "./chunk-JGKCYAOG.js";
import "./chunk-7G5FIZFQ.js";
import "./chunk-7FXQ4IAT.js";
import "./chunk-TBJ2FXKA.js";
import "./chunk-M5YXO2SQ.js";
import {
  init_lib7 as init_lib
} from "./chunk-HOAY7CPE.js";
import {
  lib_exports8 as lib_exports
} from "./chunk-NPRSAB35.js";
import "./chunk-LUL5GG4I.js";
import {
  __toESM
} from "./chunk-RZ55PUNP.js";

// node_modules/.pnpm/@thirdweb-dev+sdk@4.0.99_@types+react-dom@18.3.7_@types+react@18.3.26__@types+react@18._4ecbbc39539d7059b1b8ad321c3f738a/node_modules/@thirdweb-dev/sdk/dist/nft-collection-5b9d9850.browser.esm.js
init_lib();
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var NFTCollection = class _NFTCollection extends StandardErc721 {
  static contractRoles = NFT_BASE_CONTRACT_ROLES;
  /**
   * Configure royalties
   * @remarks Set your own royalties for the entire contract or per token
   * @example
   * ```javascript
   * // royalties on the whole contract
   * contract.royalties.setDefaultRoyaltyInfo({
   *   seller_fee_basis_points: 100, // 1%
   *   fee_recipient: "0x..."
   * });
   * // override royalty for a particular token
   * contract.royalties.setTokenRoyaltyInfo(tokenId, {
   *   seller_fee_basis_points: 500, // 5%
   *   fee_recipient: "0x..."
   * });
   * ```
   */
  /**
   * Signature Minting
   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.
   * @example
   * ```javascript
   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation
   * const signedPayload = contract.signature().generate(payload);
   *
   * // now anyone can mint the NFT
   * const tx = contract.signature.mint(signedPayload);
   * const receipt = tx.receipt; // the mint transaction receipt
   * const mintedId = tx.id; // the id of the NFT minted
   * ```
   */
  /**
   * @internal
   */
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    super(contractWrapper, storage, chainId);
    this.abi = AbiSchema.parse(abi || []);
    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc721ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, _NFTCollection.contractRoles);
    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);
    this.owner = new ContractOwner(this.contractWrapper);
  }
  /**
   * @internal
   */
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.address;
  }
  /** ******************************
   * READ FUNCTIONS
   *******************************/
  /**
   * Get whether users can transfer NFTs from this contract
   */
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.read("hasRole", [getRoleHash("transfer"), lib_exports.AddressZero]);
    return !anyoneCanTransfer;
  }
  /** ******************************
   * WRITE FUNCTIONS
   *******************************/
  /**
   * Mint a unique NFT
   *
   * @remarks Mint a unique NFT to a  specified wallet.
   *
   * @example
   * ```typescript
   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.
   * const metadata = {
   *   name: "Cool NFT",
   *   description: "This is a cool NFT",
   *   image: fs.readFileSync("path/to/image.png"), // This can be an image url or file
   * };
   *
   * const tx = await contract.mint(metadata);
   * const receipt = tx.receipt; // the transaction receipt
   * const tokenId = tx.id; // the id of the NFT minted
   * const nft = await tx.data(); // (optional) fetch details of minted NFT
   * ```
   */
  mint = buildTransactionFunction(async (metadata) => {
    return this.erc721.mint.prepare(metadata);
  });
  /**
   * Mint a unique NFT
   *
   * @remarks Mint a unique NFT to a specified wallet.
   *
   * @example
   * ```javascript
   * // Address of the wallet you want to mint the NFT to
   * const walletAddress = "{{wallet_address}}";
   *
   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.
   * const metadata = {
   *   name: "Cool NFT",
   *   description: "This is a cool NFT",
   *   image: fs.readFileSync("path/to/image.png"), // This can be an image url or file
   * };
   *
   * const tx = await contract.mintTo(walletAddress, metadata);
   * const receipt = tx.receipt; // the transaction receipt
   * const tokenId = tx.id; // the id of the NFT minted
   * const nft = await tx.data(); // (optional) fetch details of minted NFT
   * ```
   */
  mintTo = buildTransactionFunction(async (walletAddress, metadata) => {
    return this.erc721.mintTo.prepare(walletAddress, metadata);
  });
  /**
   * Construct a mint transaction without executing it.
   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.
   * @param receiver - Address you want to send the token to
   * @param metadata - The metadata of the NFT you want to mint
   *
   * @deprecated Use `contract.mint.prepare(...args)` instead
   */
  async getMintTransaction(receiver, metadata) {
    return this.erc721.getMintTransaction(receiver, metadata);
  }
  /**
   * Mint Many unique NFTs
   *
   * @remarks Mint many unique NFTs at once to the connected wallet
   *
   * @example
   * ```typescript
   * // Custom metadata of the NFTs you want to mint.
   * const metadatas = [{
   *   name: "Cool NFT #1",
   *   description: "This is a cool NFT",
   *   image: fs.readFileSync("path/to/image.png"), // This can be an image url or file
   * }, {
   *   name: "Cool NFT #2",
   *   description: "This is a cool NFT",
   *   image: fs.readFileSync("path/to/other/image.png"),
   * }];
   *
   * const tx = await contract.mintBatch(metadatas);
   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs
   * const firstTokenId = tx[0].id; // token id of the first minted NFT
   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT
   * ```
   */
  mintBatch = buildTransactionFunction(async (metadata) => {
    return this.erc721.mintBatch.prepare(metadata);
  });
  /**
   * Mint Many unique NFTs
   *
   * @remarks Mint many unique NFTs at once to a specified wallet.
   *
   * @example
   * ```typescript
   * // Address of the wallet you want to mint the NFT to
   * const walletAddress = "{{wallet_address}}";
   *
   * // Custom metadata of the NFTs you want to mint.
   * const metadatas = [{
   *   name: "Cool NFT #1",
   *   description: "This is a cool NFT",
   *   image: fs.readFileSync("path/to/image.png"), // This can be an image url or file
   * }, {
   *   name: "Cool NFT #2",
   *   description: "This is a cool NFT",
   *   image: fs.readFileSync("path/to/other/image.png"),
   * }];
   *
   * const tx = await contract.mintBatchTo(walletAddress, metadatas);
   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs
   * const firstTokenId = tx[0].id; // token id of the first minted NFT
   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT
   * ```
   */
  mintBatchTo = buildTransactionFunction(async (walletAddress, metadata) => {
    return this.erc721.mintBatchTo.prepare(walletAddress, metadata);
  });
  /**
   * Burn a single NFT
   * @param tokenId - the token Id to burn
   *
   * @example
   * ```javascript
   * const result = await contract.burnToken(tokenId);
   * ```
   */
  burn = buildTransactionFunction((tokenId) => {
    return this.erc721.burn.prepare(tokenId);
  });
  /**
   * @internal
   */
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  /**
   * @internal
   */
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
export {
  NFTCollection
};
//# sourceMappingURL=nft-collection-5b9d9850.browser.esm-OULSOB7U.js.map
